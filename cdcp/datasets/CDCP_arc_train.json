[{"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>State and local court rules sometimes make default judgments much more likely.</AC1><AC2> For example, when a person who allegedly owes a debt is told to come to court on a work day, they may be forced to choose between a default judgment and their job.</AC2><AC3> I urge the CFPB to find practices that involve scheduling hearings at inconvenient times unfair, deceptive, and abusive, or inconsistent with 1692i.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 0]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There is currently a split between the Ninth and First Circuits as to whether 1692i and other FDCPA provisions apply in garnishment proceedings.</AC1><AC2> In many states, the nominal defendant is the judgment debtor's employer,</AC2><AC3> but the judgment debtor is the real party in interest.</AC3><AC4> To allow consumers to better assert the defenses to and exemptions from garnishment available under state law, the CFPB should issue a rule applying 1692i to garnishment proceedings.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In many districts where bad check diversion programs exist, there is anecdotal evidence that the companies administering the programs threaten with prosecution individuals who do not come within the state's bad check law</AC1><AC2> for example, checks that bounce due to printing errors, checks for which there were funds available when written but not when presented, and individuals who pay the amount due by other means within grace periods permitted by state law.</AC2><AC3> The CFPB should ensure that bad check diversion programs have a realistic means of ensuring that only individuals realistically subject to prosecution are targeted,</AC3><AC4> and should also require that, in order to qualify for the 1692p safe harbor, diversion programs prohibit misleading communications and misstatements of state bad check law.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumer attorneys occasionally advise their clients not to record unlawful communications due to state laws requiring both parties' consent for recording.</AC1><AC2> The CFPB should require that debt collectors subject to the FDCPA impliedly consent to recording by consumers.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When an attorney is a 'Debt Collector' (as per their own documents) and not legally considered a 'Collection Agency' the attorney is not held accountable for consumer protection law violations (both local and federal) within civil court.</AC1><AC2> This loop hole needs to be addressed.</AC2><AC3> The attorneys/debt collectors are not monitored by the state bar</AC3><AC4> because it is a collection practice </AC4><AC5> (the attorneys buy old debt and then collect upon that debt in civil court</AC5><AC6> and the state and federal civil courts are not monitoring the attorneys</AC6><AC7> because it is an attorneys office and not considered a collection agency </AC7><AC8> - even though the attorneys buy old debt then take alleged debtors to civil court.</AC8><AC9> I personally know of a very large attorney agency in Washington State that even gives classes thru the Washington state bar to other attorneys</AC9><AC10> because it is a easy caseload to win.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [5, 6], [8, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There is currently dispute among federal district and circuit courts as to whether a post-default assignee of a debt comes within the creditor exception.</AC1><AC2> The CFPB should issue a rule providing that a post-default assignee is a collector for FDCPA purposes.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The FDCPA contains an exception for creditors.</AC1><AC2> The CFPB should include in any rule confirmation that the same practices prohibited for collectors under the FDCPA would be unfair, deceptive, or abusive acts and practices if done by a creditor.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Assignments without notice could lead to consumers paying the wrong person.</AC1><AC2> The CFPB should encourage proper notice by ruling that a payment made to either of the assignee or the assignor reduces the debt.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The original creditor has information about the debtor's language;</AC1><AC2> ii) The collector obtains information about the debtor's language; *or*</AC2><AC3> iii) The debtor lives in a ZIP code known to have a significant (5%?) number of non-English speakers.</AC3><AC4> This requirement should only apply to languages with large LEP populations - a threshold might be 100,000 - to avoid undue cost.</AC4><AC5> For smaller populations, where obtaining a full translation might be uneconomical, collectors could include the following passage translated into the appropriate languages on an otherwise English letter:</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I work at a private university</AC1><AC2> and we do not sue for collections.</AC2><AC3> Since the debt can be reported to the credit bureau for 7 years,</AC3><AC4> we like to keep our accounts at collection agencies during that entire time.</AC4><AC5> With the language now being offered due to time-barred states, our collection agencies do not want any of our accounts older than 4 years (TX).</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I received a bill from an attorneys office regarding a bill I did not think that was mine.</AC1><AC2> I sent a certified return receipt request for validation but never received a response.</AC2><AC3> So I sent a 2nd certified return receipt - request for validation and again never received a response.</AC3><AC4> The attorneys office filed a civil suit and took me to court.</AC4><AC5> I explained this to the judge and gave proof.</AC5><AC6> The proof I submitted into the court file were copies of request of validation, the USPS certified letter statement's and request verification receipt statement's.</AC6><AC7> This was all ignored by the judge </AC7><AC8> because I was pro se and did not know Washington state law.</AC8><AC9> I had made the request prior to this case being filed.</AC9><AC10> Later it was explained to me by an attorney that the local county civil courts do not enforce federal laws, only state laws and in state court a request for validation is not recognized.</AC10><AC11> I also requested proof of licensing which I did not receive </AC11><AC12> because the plaintiff was and currently is not a licensed in Washington state as a debt collection agency </AC12><AC13> - they are attorneys.</AC13><AC14> The plaintiff won their case</AC14><AC15> and I owed a debt that was not mine.</AC15><AC16> I ask you, where is the fairness in this?</AC16><AC17> What needs to occur is the laws need to be made clear for both the lay person and the judicial system.</AC17>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [6, 7], [10, 11], [16, 15]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I'm aware of that,</AC1><AC2> but I don't think many appellate courts have considered the issue.</AC2><AC3> To confirm that it's the law, it should be included in a rule.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do NOT owe any debt but have a COMMON FIRST and LAST NAME.</AC1><AC2> My Constitutional rights are violated every time a lawyer fails to perform due diligence, per rule 137, BEFORE SIGNING and FILING COURT PAPER against me.</AC2><AC3> The clerks are helpless, </AC3><AC4> the judges & attorney disciplinary do nothing favoring \"lawyer zealousness.\"</AC4><AC5> I then have to spend time & money, going to court to prove I am NOT the person who owes the debt.</AC5><AC6> I urge the CFPB to create mechanisms for clerks & citizens that make it 1) easier to fix these messes &, 2) to bring sanctions against lawyers & judges for MISUSE OF LEGAL PROCEDURE, ABUSE OF PROCESS, WRONGFUL CIVIL PROCEEDINGS, & MALICIOUS PROSECUTION.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Allow the States and/or local courts administer lawsuits.</AC1><AC2> Regardless of any added rules, documents, etc. none will help increase debtors attending hearings.</AC2><AC3> Since 1964 I have seen no significant increase of consumers attending hearings.</AC3><AC4> I have, however, seen the major reason being attributed to not understanding due process by consumers.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>No federal rules.</AC1><AC2> Allow States continued enforcement of their state laws.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Maybe I missed something</AC1><AC2> but I never received any notice from my original mortgage lender that my mortgage was sold.</AC2><AC3> Maybe that is better</AC3><AC4> since the new \"owner\" may be a pool of investors.</AC4><AC5> my experience was the buyer sent the notice listing the original creditor name.</AC5><AC6> Requiring the seller and buyer to send a notice would cause consumer confusion.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Assuming debtors have a valid address, which is some cases they do not, </AC1><AC2>additional notice that the debt is being assigned to a third party collection entity is no benefit.</AC2><AC3>My experience is intervention to collect by a third party normally occurs when the consumer is over 180 contractual delinquent.</AC3><AC4>Furthermore, if the consumer receives the warning the account would be placed with a third party</AC4><AC5>Many and more confusing to the consumer and agency.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Suspend further action to collect or re-sell.</AC1><AC2> Placing a rule that prohibits a collector from reporting information to a CRA during the 30 day window would be a nightmare from elm street and only cause more problems.</AC2><AC3> Unresolved disputes should not be sold and should be removed from collection..Period.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>No, it is not even clear who a debt collector is, particularly under CA law.</AC1><AC2> The person sending the validating notice is typically a debt collector.</AC2><AC3> This just causes confusion.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>CA has already made great strides as to debt buyers.</AC1><AC2> This should be the rule for all collectors: that when they file, they must produce properly authenticated backing for the debt sued upon.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There should be no option to attempt to verify the debt.</AC1><AC2> Attempts should always be required</AC2><AC3> and if verification is not made, the debt cannot be further transferred.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>FDCPA should define what constitutes reasonable period of time.</AC1><AC2> In my experience most attorneys who represent a debtor do not return communication inquiries about representation.</AC2><AC3> In most cases the delay in response may be caused by the debtor paying installment payments to the attorney to file a bankruptcy proceeding.</AC3><AC4> When the debtor does not keep the repayment terms a creditor is presently not notified that the representation has terminated </AC4><AC5> and there is no attorney representation.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Collectors are responsible for re-establishing contact with delinquent customers and providing services that facilitate repayment of the loans, regardless of the technology utilized.</AC1><AC2> In Collections, automated dialing systems effectively increase the ability for the collector to reach delinquent customers unwilling to proactively reach out to the creditors.</AC2><AC3> Automated dialing systems are used in many other ways not related to debt collection: telemarketers use them to reach potential customers, schools use them to notify parents of closings due to inclement weather.</AC3><AC4> The technology is the same</AC4><AC5> but the intent is different based on the user.</AC5><AC6> The Telephone Consumer Protection Act (TCPA) prohibits creditors from using automated dialing systems to call cell phone numbers without consent from the customer.</AC6><AC7> The TCPA\"s original purpose, protecting consumers from costly charges as a result of automated calls, has been subsumed by the new goal of preventing overly numerous call attempts to a number that (generally) is directly connected to the customer.</AC7><AC8> It does not change the purpose of collection calls, </AC8><AC9> it merely makes the process less efficient.</AC9><AC10> Regulating which numbers can be called using an automated dialing system is also counter to the growing reality of wireless-only households.</AC10><AC11> According to the Center for Disease Control's 'Wireless Substitution' latest report (Early release data, July-December 2012), over one third (36%) of adults in the United States live in a household with only wireless telephone service.</AC11><AC12> That figure is even higher (45%) when you look at children living in the US.</AC12><AC13> With an average annualized growth rate of 34%, it is conceivable that sometime before 2020 only a minority of the country's adults will be living in households with a landline telephone that can be autodialed.</AC13><AC14> The CFPB should allow for the autodialing of all telephone numbers provided by the customer without byzantine consent requirements.</AC14><AC15> Regardless of whether it is at application or during the course of normal business, once the number is provided by the customer to the creditor, that number should be considered another viable option for collection.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[6, 7], [9, 10], [9, 11], [9, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>They can't be sued on in court </AC1><AC2>and communications should reflect that.</AC2><AC3>I have found that persons who buy old debts are not competent and rely on software and letter services to fulfill their collection obligations.</AC3><AC4>Perhaps it is time to return to licensing of collectors.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>First, I have learned there is a significant legal difference between 1) identify theft, 2) mistaken identity (see contract law</AC1><AC2> Furthermore, that these three words need to be separated, clarified and their legal handling completely examined.</AC2><AC3> There is almost zero legal remedy for wrong person found.</AC3><AC4> More information would NOT have helped.</AC4><AC5> The lawyer had plenty information </AC5><AC6> but he did not validate any of it after he found my address.</AC6><AC7> The clerk told me these lawyers and their agents are \"just going through the phone book/internet\" hauling people with the same first and last name into court thinking they will eventually find the debtor.</AC7><AC8> A complete waste of court resources, an enormous expense to the innocent citizen, and the unlawful detainment and threatening of an innocent citizen and their assets.</AC8><AC9> The debtor, it has since been discovered has left the county.</AC9><AC10> The lawyer could have easily validated his information using online public property records from both the Clerk of courts and the County Clerk and found out the middle initial was not a match along with over 7 other pieces of identifying information that were not a match.</AC10><AC11> The lawyer did not even do the simplest checking.</AC11><AC12> I filed with the IARDC </AC12><AC13> and nothing happened.</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would suggest a review of the language already published in the Federal Rules of Bankruptcy BR 3001( effective date 12/1/2012) relating to documentation.</AC1><AC2> Based upon my participation with the Rule and numerous comments/hearings, I believe some time can be eliminated without re-inventing a different set of standards.</AC2><AC3> Bankruptcy involves collection and involves consumers including attorneys on both sides as well.</AC3><AC4> I recommend another examination of the \"validation\" notice language and the litany of interpretations of the language.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would suggest a visit to the Federal Bankruptcy Rule 3001(effective 12/1/2012) and comments made during the proposed period, plus the hearing presentation statements published and are available.</AC1><AC2> The Rule already addresses documentation issues.</AC2><AC3> I again see that attaching all of the proposed documentation to the validation notice is not productive for the consumer or the sender.</AC3><AC4> I do believe additional documentation as to chain of title be available if a consumer is being sued in Court.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a creditor collecting my own debt, I assert that by the time I move to litgation, I've exhausted all other forms of collection.</AC1><AC2> I've talked to, emailed, and snail mailed the debtor.</AC2><AC3> I've tried to negotiate a payment plan or settlement offer all to no avail.</AC3><AC4> Litigation is our last attempt.</AC4><AC5> Once we are litigation, we present our best case and let the debtor present their defense.</AC5><AC6> My experience is that debtors don't participate in their defense out of either fear or lack of knowledge about the legal process.</AC6><AC7> But the burden of educating the debtor shouldn't be put on the creditor's shoulders.</AC7><AC8> If debtor's prefer to ignore the issue, then a default judgment is justified.</AC8><AC9> There should be consequences to the inaction of the debtor.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 0], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt collectors continuously resell the debt to other debt collectors who start the clock all over again.</AC1><AC2> Then that debt collector resells the debt </AC2><AC3> and the 3rd debt collector restarts the clock again, and so on.</AC3><AC4> The burden of proof is put on the consumer to prove it is an old debt.</AC4><AC5> The credit reporting agencies don't automatically remove old debts </AC5><AC6> nor do they check to see if a newly reported debt is in fact a 9 year old debt that has been resold numerous times.</AC6><AC7> The credit agencies (CRA) are more of a problem for consumers than the debt collectors.</AC7><AC8> The CRAs are paid by the credit card companies</AC8><AC9> and the credit card companies have bigger profits when they can charge higher rates based on poor credit scores.</AC9><AC10> So there is inherently a huge conflict of interest here.</AC10><AC11> If the CRAs can keep our credit scores down the card companies can make more money and don't mind paying the CRAs a piece of the action.</AC11><AC12> Seems like unspoken collusion to me.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5], [6, 3], [9, 7], [9, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do not believe that it is \"just\" to allow a third party to buy a past due debt and sue for the entire balance, plus attorney fees, court costs, and other fees associated with \"mediators or arbitrators\".</AC1><AC2> I believe that a third party debt buyer should be limited as to how much they can sue for above their initial investment.</AC2><AC3> Too many times the original creditor is a publically traded company </AC3><AC4> and the loss has already been taken by the share holders.</AC4><AC5> Then some debt buyer buys a portfolio of un-performing debt and pays a dime on a dollar for it.</AC5><AC6> Sends all of it to a \"law office\" to collect 100% or more of the original alleged obligation.</AC6><AC7> The debt buyer should not be able to sue for 900% of their investment.</AC7><AC8> They should be limited to a percentage of true damage.</AC8><AC9> I know of no other civil process where this would be considered ethical.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [6, 8], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In most states all that a debt collection law office needs to provide is a complaint.</AC1><AC2> The average consumer has no idea what the difference is between a balance and a sum.</AC2><AC3> they do not know how to calculate the interest and certainly do not know what is \"legal\" pursuant to state or Federal Credit Card Act limitations.</AC3><AC4> The name of the Plaintiff may not even be recognizable to them.</AC4><AC5> They just know that they owed some money and fell behind on bills.</AC5><AC6> More times than not, they do not respond at all.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If the consumer claims identity theft then the Debt collectors should be required to prove otherwise.</AC1><AC2> The CRAs should be forbidden to report any debt that has been disputed as Identity theft unless they can provide court admissible proof that it is a valid debt.</AC2><AC3> The CRAs should be held more accountable and heavily fined for reporting erroneous information.</AC3><AC4> Their fines should be paid directly to the consumer for the countless hours they spend trying to fix their credit reports.</AC4><AC5> The CRAs should be required to send a letter to the consumer's insurance companies, mortgage companies, and anyone else that charged the consumer a higher rate based on their erroneous credit score and find out how much their error costs the consumer.</AC5><AC6> The sum of those added costs should be paid by the CRAs directly to the consumer in addition to the fines.</AC6><AC7> The burden of proof should fall on the CRAs and the debt collectors, not the consumer.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have been contacted about a collection agency that stated that an old prescription charge was unpaid.</AC1><AC2> The total was like $1500.</AC2><AC3> When I asked for proof, I received a piece of paper that had three numbers on it that added up to $1500.</AC3><AC4> Nothing more.</AC4><AC5> Literally.</AC5><AC6> When a consumer asks for proof, they should at the very least receive a fully itemized listing of what it is is being collecting upon. (e.g. a detailed statement of account, or the un-paid invoice(s).</AC6><AC7> Additionally, consumers should receive documentation as to why they are legally responsible. (E.g. an agreement that they signed.</AC7><AC8> I realize that for businesses that traffic in unpaid consumer debt this is going to be a huge burden </AC8><AC9> as this information has long been lost.</AC9><AC10> Too bad.</AC10><AC11> At the very least, this should be the standard for any debts incurred after a certain date.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Agree with RBell.</AC1><AC2> Delinquent borrowers already almost always know they're delinquent</AC2><AC3> so further notices are not productive.</AC3><AC4> When notices are provided they should include the name of the original account holder and the full account number to establish a connection between any tier debt collector and the original account holder.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt collectors should not be permitted to harass a debtor's ex-spouse by repeatedly calling the ex-spouse.</AC1><AC2> Debt collectors are known to use the old phone number of the debtor that now belongs to the ex-spouse exclusively.</AC2><AC3> Even though the ex-spouse tells the collector to remove her phone number from the collector's records, the collector does not,</AC3><AC4> and then repeatedly calls her trying to get to the debtor.</AC4><AC5> Collectors must be required to remove her phone number from their records at her first request and not be permitted to call her again.</AC5><AC6> Otherwise, she has no recourse to get the harassment to stop.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [4, 0], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Why should, an agency have to mail a letter to the consumer who requested not to be called?</AC1><AC2> They most likely won't read it</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't think the consumer should have the options as to when and how they are called.</AC1><AC2> Most collection agency's today would remove a consumers phone number hen asked.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>banks can simply add this provision to their Loan Sale Agreements.</AC1><AC2> All buyers executing a Loan Sale Agreement containing such a provision would be contractually obligated to refrain from litigating or threatening litigation.</AC2><AC3> some current buyer would refuse to purchase with such a provision</AC3><AC4> and other current buyers would expect a price discount</AC4><AC5> because they woudl not be able to sue.</AC5><AC6> In both instances, any inventory not acquired by current buyers would be quicly snapped up by other purchasors who would be willing to comply with these contractual provisions.</AC6><AC7> Such a resolution would obviate the necessity of legislation or regulation</AC7><AC8> as the matter woudl have been taken care of under the contract between a willing seller and a willing buyer.</AC8><AC9> there would be no constitutional question regarding the restricting of law suits </AC9><AC10> nor would there be any delay in implementation.</AC10><AC11> All that would be required is the cooperation of the selling banks</AC11><AC12> which could be induced readily with some Safe-Harbor language for banks that follow this protocol.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think it should be illegal or miss leading for a agency to change its caller id.</AC1><AC2> You could easily look up a relatives number and use that.</AC2><AC3> There should be a rule regarding a change in caller id.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't think it matters whether a collector used a alias or not.</AC1><AC2> It's just a name. If it is used constantly</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't know if technology allows collectors to distinguish land lines from cell phones.</AC1><AC2> It is fair for collectors to use info provided on the application for credit.</AC2><AC3> Collectors should be allowed to assume that the mailing address of record is an accurate indication of the debtor's time zone.</AC3><AC4> Creditors periodically request updates of contact info in some cases;</AC4><AC5> this would be a good idea for all to do.</AC5><AC6> Mailing address should take priority for determining time zone unless the debtor advises otherwise.</AC6><AC7> As mentioned previously, people with cell phones may move from one locale to another without changing their area code.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A debt collector did not litigate a credit card debt, but summarily garnished our joint checking account.</AC1><AC2> It was two weeks later that notification was received from the debt collector.</AC2><AC3> This occurred September-October 2012.</AC3><AC4> Debt Collectors must provide advance notice of their intent to garnish a checking account.</AC4><AC5> It took several weeks including an Order from the Judge to release the funds, only after the Debt Collector took all of a tax refund.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 0], [3, 1], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In theory this seems like a reasonable policy,</AC1><AC2> but how can collectors know where a debtor is if they are calling his or her cell phone?</AC2><AC3> Knowingly calling third parties should be prohibited across the board.</AC3><AC4> It is no one else's business what goes on between creditors and their debtors.</AC4><AC5> Calls to a person's boss or family can cause further financial and domestic problems,</AC5><AC6> neither of which will help with getting the debt paid.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [2, 4], [2, 5], [3, 4], [3, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a consumer I should receive a notice or some type of warning that the debt will be turned over to a collector.</AC1><AC2> And when there are a change in debt collectors, the consumer should be notified.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debtors should be able to leave a message for a specific debtor, the name of their company and request a call-back at a specified number.</AC1><AC2> When a consumer returns this type of call, the collector or debtor should be required to give them the mini-Miranda warning.</AC2><AC3> There is no need for collectors to leave messages revealing the nature of their calls.</AC3><AC4> The Health Information Privacy and Portability Act prohibits disclosure of protected information to unauthorized parties</AC4><AC5> and the same should apply to debt collectors.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Calling a debtor at work is counter-intuitive;</AC1><AC2> if collectors are continuously calling someone at work, other employees may report it to the debtor's supervisor.</AC2><AC3> Most companies have established rules about receiving or making personal calls from company or cell phones during an employee's working hours.</AC3><AC4> If a collector or creditor calls a debtor on his/her cell phone and is informed that the debtor is at work, the call should be terminated.</AC4><AC5> No calls to employers should be allowed </AC5><AC6> as this jeopardizes the debtor's job.</AC6><AC7> How does that help in debt collection? It doesn't.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [1, 2], [3, 2], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Blocking caller ID information is disingenuous to say the least.</AC1><AC2> Most consumers won't respond to blocked numbers or ID's anyway.</AC2><AC3> Collectors should be required to identify themselves and to provide caller ID information that identifies them.</AC3><AC4> Most people who cannot pay their bills are aware of the problem,</AC4><AC5> so being reminded under false pretenses is more of an annoyance than a solution to the problem.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 0], [2, 4], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers should not incur additional costs for cell phone calls, texting or voice messaging in relation to collections.</AC1><AC2> The more costs assessed to a debtor, the less money they have to pay their creditors.</AC2><AC3> Debt collectors and creditors should be required to stop all modes of communication to a device that the debtor indicates does not provide free communications whether calls or texts.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 0]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There should be a monetary \"floor\" required before debt collectors can pursue uncollected debts in court.</AC1><AC2> The idea that corporations that already charge puninshing interest rates and fees can clog the court systems trying to collect a few hundred bucks from someone who is unemployed, ill, or otherwise unable to pay is counter-productive.</AC2><AC3> There should be a minimum amount of consumer debt owed before creditors can sue debtors.</AC3><AC4> Another issue with using state and local courts to settle debt collection suits is that it burdens jurisdictions already heavily burdened with cases and strapped for cash.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 3], [2, 1], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Identity Theft Tops List for 13th Consecutive Year in Report of National Consumer Complaints</AC1><AC2> __URL__</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers should be made aware of sale or transfer of their debts.</AC1><AC2> From whom to whom along with effective dates and contact info for the creditor and the new owner of the debt.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Notifying consumers of the sale of their debts and related details would help consumers with identifying who is contacting them about a debt;</AC1><AC2> there are robo calls about lowering your credit card interest rate and such that are solicitations.</AC2><AC3> Consumers have a right to know who they are dealing with in relation to their financial affairs.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers should be aware of who is handling collection procedures.</AC1><AC2> The seller of any consumer debt should be required to notify the debtor of which debt owed to which creditor, is being sold by xyz organization to 123 debt collector.</AC2><AC3> The effective date of the debt sale and contact info for the new collector should be included.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A notice should go out that the debt has been sold</AC1><AC2> because it definitely informs the consumer in how they should go about negotiating repayment of the debt.</AC2><AC3> When the debt is sold, it is sold for significantly less than what is owed,</AC3><AC4> and the lender gets to write it off,</AC4><AC5> and the borrower takes a 7-year negative hit in their credit profile.</AC5><AC6> Sometimes when you are dealing with debt collectors, the \"debt collector\" is often a wholly-owned subsidiary of the \"original\" lender, which means they get a tax write-off; you get a hit in your credit; and they still try to collect on the entire amount.</AC6><AC7> If a debt is sold, then it should actually be sold to a third-party, and not a subsidiary of the original lender.</AC7><AC8> And consumers should get full disclosure on who their debt has been \"sold\" to.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [6, 5], [7, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumer owing the debt should be contacted about any third party offer to pay their debt.</AC1><AC2> Anyone paying debt for someone else should be required to provide their identity to the creditor and debtor.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A separate \"summary of rights\" should be sent to, and made available, to consumers.</AC1><AC2> We are woefully uninformed and misinformed about our rights as consumers; what avenues of negotiation we can pursue; or even who can assist us.</AC2><AC3> Furthermore, there should be some laws on the books on when collectors cannot collect</AC3><AC4> if the original creditor has not made an attempt to collect the debt for an extended period of time, I should not get a collection notice 20 years after the fact.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This kind of thing is likely determined by family court law in the jurisdiction where the debtor lives.</AC1><AC2> Community property law, divorce or separation agreements and issues of domestic violence laws all come into play in these kinds of circumstances.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Some people are concerned that collectors don't do much more than doublecheck that the amount in the validation notice is what the creditor says the consumer owes.</AC1><AC2> THAT'S ALL THEY DO.</AC2><AC3> They never do anything of substance to actually push back on the creditor's claims.</AC3><AC4> I've had actual documentation that disputes creditor's claims, and all collectors do is rely on the information given them to by creditors.</AC4><AC5> The CFPB is no better.</AC5><AC6> My experience with them was much the same as dealing with a collector.</AC6><AC7> The CFPB did nothing to verify or investigate the creditor's claims;</AC7><AC8> they simply took the creditor's claims as outright facts despite conflicting documentation.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [4, 5], [4, 6], [4, 7], [5, 6], [5, 7], [6, 7]]", "output": "{\"relation_types\": [\"evidence\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Just like mortgage servicers are required to send \"goodbye letters\" (a notification of when loan has been sold) and \"hello letters\" (a notification of when another company is buying a debt), so also should debt collectors.</AC1><AC2> Also, they should be required to disclose the amount for which they bought the debt... the discounted price.</AC2><AC3> Also, there needs to be full disclosure as to who is buying the debt along with the disclosure of the owners of the debt collection company and the street address of the company</AC3><AC4> so face-to-face meetings can be arranged.</AC4><AC5> Full transparency and full disclosure should be required related to any company trying to collect debt.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I should know if a debt is time-barred,</AC1><AC2> so that I can make an informed decision regarding the debt in question.</AC2><AC3> The information should be in the validation notice.</AC3><AC4> If the debt becomes time-barred after the validation notice is sent, I should be informed of the new status of the debt IMMEDIATELY!</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 0]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It has been my experience that practices can vary greatly between various creditors who find it necessary to turn delinquent or defaulted debt over to a collection agnency.</AC1><AC2> In my situation, little or no notification was given.</AC2><AC3> At a minimum, a creditor should give specific information as to date and which company the debt is being assigned or sold to.</AC3><AC4> Getting such a notice would help me understand that there is going to be a change with whom I would be communicating with going forward.</AC4><AC5> The costs and expenses or problems that dad honors are collectors would have been giving those is miniscule compared to the problems cause by not giving notice.</AC5><AC6> I would argue that they would actually save money in the long run like giving such notices.</AC6><AC7> At a minimum, The information that should be clear that in the notice is (1) the date of when the debt would be turned over to collection agency; (2) the name address of the collection constant company to whom the doubt was assigned; and (3) specific formation about the debt collection company and a list of that company's \"best practices\", policies and procedures as to what the consumer can expect.</AC7><AC8> It would be good if there could be a single-point-of-contact for this company as well as the supervisors and owner of the collection company.</AC8><AC9> Collection agencies need to be forced to deal more forthrightly with consumers and be required to deal with greater transparency.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [2, 5], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt Collection companies get a very unfair debt negotiation advantage against an alleged defaulter when they hire an unscrupulous service company that has lied about giving a proper service or subservice to the alleged debtor's residence.</AC1><AC2> Judges do not seem to understand that if a service company will fraudulently state in court documents that they served a defaulter or subserved someone at the residence when in fact they did not, that the debt collector can become very arrogant and cocky as to how they negotiate with the alleged defaulter.</AC2><AC3> In a nutshell, if the debt collector's one sided terms are not met, they will simply hire the service company who will provide service even if it is a false service.</AC3><AC4> Judges rationalize that the mail service is an adequate notification without realizing that what a false service does is embolden the debt collection company to not properly negotiate a debt with an alleged defaulter because they have total control over the service aspect, even if fraudulently obtained.</AC4><AC5> This need to be fixed</AC5><AC6> and false servers need to be fined along with the debt collection companies who hire them and keep hiring them even after they receive complaints of false service.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If I have been falsely served or subserved, (the making up of a person who does not exist to claim a service, or simply stating \"Jane Doe\" received the service) and the judges don't care, and the debt collection companies don't care, I should have the right to file an errors and omissions insurance claim against the debt collection company for false service that resulted in a verdict against me.</AC1><AC2> I have already tried asking for an errors and omissions insurance policy from the debt collection company </AC2><AC3> so that I could file a claim and the debt collection company simply ignored my request.</AC3><AC4> I find this both egregious and outrageous.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [1, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I also find the assertion that INVOLUNTARY DEFAULTERS don't put up a legal defense because they are afraid or have a lack of knowledge about the legal system to be outrageous.</AC1><AC2> Strategic Defaulters save part of the money that could have gone to pay down their debts so they can give it to an attorney who may be able to get them a sweet pay off deal.</AC2><AC3> INVOLUNTARY DEFAULTERS keep trying to make their monthly payments until the monthly accrual of interest rate charges and/or a life changing event forces then into an INVOLUNTARY DEFAULT.</AC3><AC4> INVOLUNTARY DEFAULTS are not recognized by the courts.</AC4><AC5> I had a SPOTLESS payment record for 15 years prior to a life changing event that caused me to become an unpaid CareGiver.</AC5><AC6> If I could have been allowed to start with very small monthly payments to all of my creditors in exchange for having my phone lines left alone, I probably could have started making some income again.</AC6><AC7> Instead, the constant debt collection phone calls forced me to convert my land lines to 20 cent a minute cell phones that I could not even afford to answer.</AC7><AC8> I LOST work and contacts</AC8><AC9> because debt collectors would not accept small monthly payments as a beginning pathway towards paying off my alleged debt.</AC9><AC10> Probably the ongoing interest rate charges on default debt makes it unrealistic for debt collectors to accept small payments.</AC10><AC11> Until alleged defaults are truly frozen so that those who want to pay them off have the best chance to do so, more and more debt will accrue.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [0, 3], [7, 8], [8, 9], [10, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Possibly the most egregious action of all regarding credit card debt occurred in 2002, suspiciously close to the 911 aftermath.</AC1><AC2> While insurance companies were paying out tens of millions of dollars to building owners who suffered damage because of 911 </AC2><AC3> (which technically they should not have done </AC3><AC4> since this was an act of war which is NOT covered by most insurance plans), </AC4><AC5> the comptroller of the currency was DENYING insurance companies from competing with credit card companies in the credit card debt suspension insurance arena.</AC5><AC6> The result was a credit card debt suspension insurance monopoly for the credit card companies with premiums that were overpriced by a factor of 1000% to 2000%</AC6><AC7> The profit margin was so high for credit card debt suspension insurance that the CFPB actually had to fine the credit card companies OVER 500 MILLION DOLLARS in the summer of 2012 for overly aggressive credit card debt suspension insurance sales and marketing practices.</AC7><AC8> I had warned about overpriced credit card debt suspension insurance back in 2008 with the creation of __URL__</AC8><AC9> but was never compensated for my efforts.</AC9><AC10> It meant that MOST credit card defaults in the United States over the last 10 to 15 years were based on a fraudulent foundation of obscenely over priced credit card debt suspension insurance that consumers could not afford to keep purchasing.</AC10><AC11> Consumers were literally paying for 5 years worth of credit card debt suspension insurance but only receiving 3-5 months worth of coverage!</AC11><AC12> Most of the times that a judge was declaring a credit card default, they were propping up the overpricing of a monopolistic credit card debt suspension insurance policy that did not fairly give consumers the most obvious way to protect themselves from a default that was caused by life changing event</AC12><AC13> We could literally fix the U.S. economy almost overnight by doing the right thing.</AC13><AC14> First acknowledge credit card debt suspension insurance fraud that the credit card companies have perpetrated on the american people over the past 10 to 15 years </AC14><AC15> and as retribution reduce all consumer credit card debt by approximately 65%.</AC15><AC16> Then raise the monthly minimum payment on the remaining 35% from 2% to 5% </AC16><AC17> so the monthly payment remains roughly the same but consumers feel their debt more easily going forward.</AC17><AC18> The comptroller of the currency tried to get credit card companies to raise their monthly minimum payment requirements from 2% to 4 or 5% back around 2005 but relented when it became obvious too many people would default.</AC18><AC19> By reducing consumer credit card debt by 65% as a form of reparations for debt suspension insurance fraud consumers suddenly have a lot less debt BUT still have to make a similar monthly payments.</AC19><AC20> However MORE of that monthly payment goes towards paying down the actual debt rather than the cesspool known as ever expanding interest rate charges.</AC20>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [5, 4], [10, 9], [15, 16]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have a common last name, </AC1><AC2>and for about three years I was bombarded with collection calls for other individuals with my last name and first initial.</AC2><AC3>I finally changed my phone listing from my initials to my nickname and have had only collection call since.</AC3><AC4>I am an elderly retiree.</AC4><AC5>I have no car loan or mortgage.</AC5><AC6>I pay all my bills on time, </AC6><AC7>and I don't carry balances on my credit cards.</AC7><AC8>No debt collector has ever admitted to me that they got my number out of the phone but, </AC8><AC9>but that's what they're doing.</AC9><AC10>I would like to see every debt collector tell the individual they are calling the source of their information.</AC10><AC11>I now have a long list of people with debts in collection.</AC11><AC12>Since I'm not a debt collector,</AC12><AC13>I don't believe that I have a legal obligation not to reveal their names.</AC13><AC14>I do, however, believe that I have a moral obligation not to do so.</AC14><AC15>Please find a way to keep debt collectors from harassing innocent people.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [12, 11]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a mortgage lender for an FDIC-insured bank, I'm astounded at the number of customers who sit across from me and are wholly dumbfounded when I tell them their loan request is denied because of outstanding collections.</AC1><AC2> For certain there are some people who knew full well they would have collections items and are playing dumb (and not doing so very well).</AC2><AC3> But many of them had no clue,</AC3><AC4> and 90% of those collections are medical in nature.</AC4><AC5> If the CFPB truly is about protecting the interests of the consumer, then the debt collection process needs to be simplified drastically in regard to collection items (medical, utilities, etc.).</AC5><AC6> after 60 days of non-payment, the account can be closed.</AC6><AC7> The creditor sends a certified letter to the last known address of the debtor, informing them they have 30 days to bring the account current or make other payment arrangements, </AC7><AC8> or the account will be turned over to a collection agency.</AC8><AC9> Said letter also needs to contain the contact information for that collection agency,</AC9><AC10> so they know in advance who to contact if they don't respond within 30 days.</AC10><AC11> Yes, a lot of those letters will be returned undeliverable or will end up in someone else's hands.</AC11><AC12> But that would demonstrate a good faith effort by the creditors to work with the debtors before passing the buck to a collection agency.</AC12><AC13> The added benefit for the government is the increase in certified letters passing through the USPS!</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 2], [8, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When mortgage holders transfer servicing of a mortgage loan to another creditor, they have rules in place as to informing the consumer that their loan has been sold.</AC1><AC2> Apply the same standards to any debt.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The agency needs to be careful of new rules that will, though unintended, be harmful to the free market.</AC1><AC2> However, it is important that litigation is monitored to ensure that the system does not allow reward with no risk.</AC2><AC3> A plaintiff in a lawsuit cannot be placed in a situation where it is rewarding to sue with insufficient cause and minimal risk.</AC3><AC4> Creditors and those following in the process of recovery do not need additional regulation in this area</AC4><AC5> since their efforts are monitored by the CFPB.</AC5><AC6> The CFPB does not need to set standards for the industry,</AC6><AC7> but make it clear that only those documents provided to the court in the original filing will be considered in a CFPB review.</AC7><AC8> If in the course of a CFPB review, it is found that litigation was filed without a successful verification of the facts, the CFPB could award the amount sought by the filing to the defendant of the case and a fine to the CFPB of no less than $2,000 but no more than the amount sought.</AC8><AC9> This position would motivate the litigant to ensure their facts were correct before any filing took place.</AC9><AC10> This position would allow CFPB to review cases filed no matter how they were adjudicated by the involved court.</AC10><AC11> This review could be conducted at CFPB offices</AC11><AC12> since it only requires the original filings.</AC12><AC13> This review could be initiated simply based on a complaint to the agency's offices.</AC13><AC14> The penalty could be adjustable based on a variety of agency standards.</AC14><AC15> I would have to take more time to consider when the plaintiff was not the original creditor or a member of the recovery industry,</AC15><AC16> but, again, there must be a risk associated with the reward to stop nuisance suits.</AC16>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [7, 8], [7, 9], [10, 11]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There needs to be something in place to stop the frivilous law suits that agencies have to spend thousands of dollars to defend even though they have tried to explain to the consumers / attorneys that there was no wrong doing and no case</AC1><AC2> a lot of these consumers file the suits Pro Se and continue pushing for a settlement or trial</AC2><AC3> in these cases the agencies spend monies to prove there was no cause for action to begin with and to have a judge agree with the agency.</AC3><AC4> Please look at putting some kind of penalty on consumers or their attorneys when they send settlement demands or file law suits when they have been shown that there is / was no case</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt collectors should not be allowed to alter their caller ID information.</AC1><AC2> They call misrepresenting themselves as \"Process Servers\" inquiring information about another person's debt.</AC2><AC3> This prevents the consumer from reporting the debt collector for violating consumer protection laws</AC3><AC4> because a false identify was used.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>First, a third party collecting on behalf of a lender isn't, nor should be, defined as a furnisher of information.</AC1><AC2> While the FDCPA requires notice specific to the validity of the debt, </AC2><AC3> the FCRA has requirements for users of consumer reports.</AC3><AC4> Combining two statue requirements in the initial notice of a debt serves no purpose.</AC4><AC5> Sending during the 30 day notice would create confusion in the event the consumer responds, for example, to the validity of the debt and does not include a request about a credit report accuracy.</AC5><AC6> I believe the issue is whether a third party debt collector or debt buyer should report an account to a credit reporting agency which would overlap the original lender's last report on the consumer account.</AC6><AC7> In my opinion they should not.</AC7><AC8> I have seen confusion due to lack of rule clarity.</AC8><AC9> For example, if a consumer files a bankruptcy petition who should report that event?</AC9><AC10> If a third party opts to report then the third party would be required to report events that take place during or after the bankruptcy filing.</AC10><AC11> To date, Title 11 offers no direction to reporting and neither does the FCRA other than a credit reporting agency removing after 10 years.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [5, 4], [6, 7], [6, 8], [9, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a Director for Collections now for Kennedy Space Center Federal Credit Union, which is over 500 Million in asset size I try as I have for prior union to file suit closest to the Consumers current address.</AC1><AC2> One method is to assign over to an attorney within the current residence-venue of the Consumer.</AC2><AC3> In legal terms we attempt to get service when filing a suit out of state,</AC3><AC4> its method is called obtaining if possible a Alien Juddgement outside from the County and or State the contract/note was originally signed.</AC4><AC5> There are states in the Union that do note accept foreighn judgments.</AC5><AC6> So recording a judgement obtained for example in Floirda and rerecorded in another State may not be possible.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Very confusing if I can pay my student loans directly to DOE or to one of the many private companies who have owned my loan over the years.</AC1><AC2> They continue to try to entice me to restructure the student loan debt - very misleading - without disclosure of their fees</AC2><AC3> at this point I cannot even trace a $30000 fee that was double billed to my total.</AC3><AC4> It is a web of confusion that I cannot escape.</AC4><AC5> I intend to take my student loans to my death</AC5><AC6> as I have no other way of making the monthly payments.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [3, 1], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Most of the consumer debt I see if coming from debt buyers and the consumer doesn't recognize the name or the amount.</AC1><AC2> Many of these are beyond the statute of limitations to file suit </AC2><AC3> but suit is filed anyway.</AC3><AC4> Many consumers don't know to file an answer is court </AC4><AC5> and a default judgment is entered.</AC5><AC6> The information you suggest would help a lot in letting consumers know what this debt is.</AC6><AC7> I would include the trail of ownership of the debt</AC7><AC8> as there could be intermediary owners between the original creditor and final collector.</AC8><AC9> Debts are sold and resold.</AC9><AC10> It would also help to have some documentation of the specific debt having been sold</AC10><AC11> so the consumer can verify the current ownership of the debt.</AC11><AC12> Currently, all they get in response to a validation request is \"we checked and you owe it\".</AC12><AC13> Our firm asks for specific documents related to the claimed debt and the response we get is \"the courts say we don't have to provide any documents...go fish\".</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3], [6, 7], [7, 8], [9, 10], [9, 11], [9, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The price of paper (bad debt) varies depending on the collectability of the debt based on info known about the debtor and also varies based on the amount of documentation purchased from the original creditor.</AC1><AC2> Most debt buyers only pay for a couple of recent credit card statements.</AC2><AC3> They may provide a \"bill of sale\"</AC3><AC4> but these never identify a specific account being sold and reference a master purchase contract which is never provided.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The majority of the collection disputes I help my clients with are never validated with documentation.</AC1><AC2> The CRA simply sends a letter stating that the debt was verified </AC2><AC3> although the dispute letter specifically asked for documentation.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The majority of the clients I work with try to settle their accounts.</AC1><AC2> The main issue is that most of the collection companies will not provide the client with a letter of agreement until after the payment is made.</AC2><AC3> They also will often wait weeks for a receipt.</AC3><AC4> I have even had clients tell me that the company required a $10.00 payment for the receipt.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Unscrupulous debt collectors use this tactic trying to force people into agreeing to repay a debt.</AC1><AC2> The threat of debt collection calls at work is a powerful incentive to repay a debt.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The Pro Publica piece on one \"installment\" loan lender has plenty of examples of harassment that goes over the line that is not covered by this language</AC1><AC2> Truly dreadful conduct.</AC2><AC3> __URL__</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a creditor, I can agree with this notification on medical services</AC1><AC2> since most people receive bills from companies they never heard of.</AC2><AC3> When it comes to auto loans, and other monthly installment loans, I am sure the consumers are aware of the debt and who it is payable to, unless sold.</AC3><AC4> This could be a huge regulatory burden on creditors that don't sell loans and follow current collection laws.</AC4><AC5> After all, do very many people pay monthly payment to the same people for several months and them forget they owe the debt.</AC5><AC6> All laws should not apply to all creditors.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was never informed by Bank of America that they sold my credit card and closed the card.</AC1><AC2> When I realized it, I paid it off immediately.</AC2><AC3> During that quarter, after long illnesses, my Father and Mother both passed (within 31 days of each other) </AC3><AC4> and frankly, credit card payments were not in the forefront of my thinking.</AC4><AC5> ALSO, just because a bank or credit card company has been exempted from Usury laws does not mean they do not commit the violation!</AC5><AC6> THAT needs to be stopped!</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Depends on the type of Bankruptcy.</AC1><AC2> If it is a CH 13 many times the creditors receive more money than if they choose to forgive a portion of the debt and settle direct with the consumer.</AC2><AC3> This is because of the strict \"means test\" for CH 7.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am concerned about the perception consumers have concerning older debts.</AC1><AC2> With the knowledge that this legislation is both to improve debt collection practices (helping the credit industry) and to educate and protect consumers (to increase confidence and enforce their rights), this is especially relevent.</AC2><AC3> Many consumers appear to be under the impression, if they haven't managed to pay off the debt within the first initial years, they should *ignore* it until it falls off their credit report.</AC3><AC4> Reviving the debt is the issue.</AC4><AC5> Yet these consumers are not concerned about paying the debt off in full</AC5><AC6> they might be in much better financial standing now.</AC6><AC7> They're concerned about how paying a debt affects their credit score.</AC7><AC8> I believe this should be concerning.</AC8><AC9> If a debt is outstanding, and repying part (or all) of this debt actually would *worsen* a consumer's credit, it seems counter-intuitive.</AC9><AC10> It works both against the interests of creditors and debt collectors - and the interest of consumers who owe money on a debt.</AC10><AC11> I don't know of a viable solution,</AC11><AC12> but I'm certain this is a concern which should be addressed.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [7, 8], [7, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If a consumer is notified that their debt has been sold, there should be a way to contact the original creditor to verify.</AC1><AC2> e. there should be a paper trail</AC2><AC3> I see an opportunity for scam artists to claim that (as they are now) the consumer owes money to them and to pay off their debt immediately to the scam artist.</AC3><AC4> With a clear paper/electronic trail, the path a debt takes from creditor to collector to collector can be verified and authenticated for the consumer's peace of mind,</AC4><AC5> and so the right party gets paid.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [1, 2], [1, 4], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If a consumer sends a post dated check(s) and it bounces then it may not fall under the bad check enforcement.</AC1><AC2> Also, consumers use ACH capability to repay a debt,</AC2><AC3> so if the amount is not available, then this may also not fall under bad check enforcement.</AC3><AC4> My experience is more consumers use ACH rather than personal check distribution.</AC4><AC5> there are numerous reasons why checks bounce</AC5><AC6> so I suggest a look see as to determining the reason or cause why the check bounced.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>while this isn't the best forum for me to go into my company's entire collection process, we work a debt for at least 120 days with letters, live agent calls, robo calls, emails, mailed invoices, and by suspending subscription service (where allowed) as part of our collection campaign.</AC1><AC2> Even then, we only go to litigation after the debtor has been unresponsive to our attempts to contact them.</AC2><AC3> I've found that if a debtor talks to their creditors, many times creditors will take their situation into account.</AC3><AC4> I've offered lengthy repayment plans, reduced or waived interest or late fees, or partial settlement for those explain their hardship.</AC4><AC5> But if a debtor is uncooperative or doesn't respond to our attempts to work out a balance, what other alternatives do creditors have?</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The CFPB should require debt sellers to contact the debtor and inform them the debt has been sold.</AC1><AC2> Additionally, ALL pertinent information must be given to the debtor to eliminate any confusion.</AC2><AC3> Furthermore, the seller of the debt must be required and enforced to annotate the debtors credit report with the sale to help eliminate confusion and in a way to not increase the bad debt.</AC3><AC4> Essentially, debts that are sold sometimes appear as two seperate debts on a consumers report which increases the penalty of having bad debt.</AC4><AC5> A consumer should not be penalized twice for 1 debt.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 3], [1, 3], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The idea is sound in principle,</AC1><AC2> but as any technology geared towards convienance, there are risks against privacy encouraging identity theft.</AC2><AC3> Having creditors, collectors, and consumers come together \"on the same page\" regarding debt would be fantastic for everyone involved.</AC3><AC4> But any technology which accomplishes this needs to be very secure with very strict authentication requirements to ensure *only* the relevant parties can view information concerning the debt.</AC4><AC5> Otherwise, not only thieves would have access to this information</AC5><AC6> but also non-criminal third parties, who may never have learned of such information due to the protection of consumer privacy laws.</AC6><AC7> Knowledge of the debt and money owed would need to have the same level of security afforded to consumer reports and information within a consumer report (as defined in the FCRA).</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>security would be paramound.</AC1><AC2> Since the weaknesses in current authentication practices financial institutions/others covered by FACTA and the FCRA are not within the scope of this legislation,</AC2><AC3> it shouldn't be difficult to impose those same security standards on any centralized debt collection database.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I strongly endore drose977's response.</AC1><AC2> Currently, debt collection agencies can sell debt without proper validation.</AC2><AC3> Or they can sell the debt if a consumer disputes the debt and the agency can't product the proper validation.</AC3><AC4> These things should not be allowed and are very detrimental to the consumer.</AC4><AC5> Consumers should be protected above collectors and other agencies</AC5><AC6> as they, typically, have far less resources to fight inaccurate information.</AC6><AC7> Additionally, the inaccurate information adversely effects consumers more than any other group in these situations.</AC7><AC8> Collectors should not be allowed to report a debt as 30 days late if the debt isn't 30 days late.</AC8><AC9> The law should include stiff enforcable penalities to deter collectors from pre-dating debt.</AC9><AC10> These rules should apply for any debt reported late at any time, not just the first 30 days.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [0, 4], [4, 5], [4, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The most common consumer contact my firm receives as a dispute is the comment by the consumer on a call with the agency that \"it's not my debt\".</AC1><AC2> While that may be a true statement in some cases, some proof from the consumer should be required as to why the debt isn't theirs.</AC2><AC3> For our customers, proof of residence at a different address from where our service was provided is usually sufficient for us to remove that customer from the debt.</AC3><AC4> The consumers must understand that they have to work with the creditor or agency to correct whatever info lead to an \"incorrect link\" (common name, bad SSN, fraud...).</AC4><AC5> The 3 items listed in CFPB summary is usually adequate.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers should not be allowed to dispute a debt using identity theft as a reason without proof as well.</AC1><AC2> Otherwise some consumers will \"game\" the system and make false disputes.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I currently have an alias on my Credit report that I have NEVER gone by.</AC1><AC2> I've disputed this serveral times </AC2><AC3> and I can't get this alias and the related debt off my report.</AC3><AC4> As such I want federal laws that REQUIRE an agency to produce some paperwork ,legal document that proves a consumer used that alias on a credit application/paperwork.</AC4><AC5> When disputed with a CRA they should be requesting this information from the agencies as well.</AC5><AC6> CRA's should be the neutral parties and be the enforcing agencies on both sides.</AC6><AC7> CRA's should be mandated to report accurate information and be responsible to gather the accurate information.</AC7><AC8> currently they are warehouses of bad information that err on the side of collectors.</AC8><AC9> Consumers do not have a reliable agency fighting for their rights.</AC9><AC10> without enforcement Federal laws equate to a bunch of useless words on a paper.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 0], [3, 1], [3, 2], [4, 5], [5, 8], [6, 5], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The CFPB should ban workplace calls completely.</AC1><AC2> Consumers provided a home phone number when they take on the debt</AC2><AC3> and that should be the number they call to collect it.</AC3><AC4> Communicating by registered/certified letter should also be the alternate method not workplace calls.</AC4><AC5> Second Massachusetts limiting the total number of calls is a fabulous idea.</AC5><AC6> We don't throw debtors in prison today</AC6><AC7> yet the ridiculous amount of abuse and scorn they must endure is totally unacceptable.</AC7><AC8> CFPB desperately needs to clean up the debt collection industry.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [4, 6], [4, 7], [7, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>More information to the consumer with the initial notification would be more confusing and intimidating than it already is for them.</AC1><AC2> Simplifying the initial notification while including information about how to contact someone if you do not recognized this obligation is the way to go.</AC2><AC3> Then the CFPB can design and require everyone to send a separate Summary of Consumer Rights to a consumer.</AC3><AC4> It could also be available in the exact same form on the CFPB website and on informed professionals websites within the industry.</AC4><AC5> I would maintain the consumer's right to ask for a cease communication,</AC5><AC6> but I would suggest that the CFPB would serve everyone better by including that the CFPB would suggest that the consumer may be better served by keeping this communication available except as a last resort.</AC6><AC7> This solution also bears the added advantage of making sure the public is aware of the assistance available through the CFPB.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [1, 2], [1, 3], [5, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>my in-laws had the same issue with BoA.</AC1><AC2> They paid their mortgate EARLY every month and still were reported as late every month.</AC2><AC3> This is tragic</AC3><AC4> and ruined their credit.</AC4><AC5> When these things happen it takes years for the credit to br repaired even though a collector reported the information falsely, incurracately, and repeatedly.</AC5><AC6> BoA should be penalized HEAVILY for these infractions</AC6><AC7> otherwise they just ignore consumers.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [5, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As someone who regularly reviews credit reports,</AC1><AC2> I am appalled by a practice I see regularly.</AC2><AC3> Debt Collectors frequently resubmit the report of a debt as delinquent every month .</AC3><AC4> This will have a highly adverse impact on the consumer's credit scores.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If federal rules can be ignored by local/municipal/state laws then the federal laws are irrelevant.</AC1><AC2> Consumer credit is recognized in all 50 states and internationally.</AC2><AC3> As such these laws should be enforced by each state and lower courts and states and such should not be able to make laws that ignore of superseed federal law.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Calling someone's work is clearly and without dispute intended to embarrass and annoy.</AC1><AC2> It is never acceptable.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Unless the consumer chooses to communicate by phone, all correspondences from collectors should go through mail.</AC1><AC2> This allows the consumer to take time in considering what the collector is requesting.</AC2><AC3> It also avoids confusion for both parties.</AC3><AC4> The only reason this isn't the standard approach is because it limits how annoying and embarrassing collectors can be--plain and simple.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Once a debt has reached the end of its statue of limitations is should be removed from the consumer credit report.</AC1><AC2> However, collectors use the law to refresh old debts so they effectively never leave a report.</AC2><AC3> If a collector can't sue to retrieve the debt it has no business on a consumer report.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Legally, I don't believe that CFPB authority should stretch into this area </AC1><AC2>since the federal laws do not include such a limitation.</AC2><AC3>Notification to a consumer that a debt is beyond statute is problematic</AC3><AC4>since that date is not permanent.</AC4><AC5>Partial payment on an account restarts the statute of limitations.</AC5><AC6>I don't believe that a rule issued by the CFPB can help here.</AC6><AC7>Education of consumers is the only pro-active method that I see as available here.</AC7><AC8>However, this education should include notification to the legal profession that the CFPB will bring violations in this area to the attention of the Attorney General in their state.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Current debt substantiation requirements all suffer from the same significant shortcoming in that they fail to address the often symbiotic relationship between first-line creditors, collectors, reporting agencies, consumer data clearinghouses, buyers of bad debt, and others industry players.</AC1><AC2> Each has a vested profit motive in the \"validation\" of debt.</AC2><AC3> Without appropriate disincentive--i.e., enforcement of rules and stiff penalties for non-compliance--corners are cut and quid pro quo-type behaviors begin to surface.</AC3><AC4> Consumers hold few cards and have to play against a stacked deck.</AC4><AC5> The validation process should involve more than merely inquiring with the creditor about the validity of the debt or the identity of the debtor, and failure to observe all the necessary steps--in the sunshine, no less--should have severe consequences.</AC5><AC6> The best deterrent would be putting the power back in the hands of the (truly-wronged) consumer through the inclusion of \"private attorney general\" style enforcement mechanism.</AC6><AC7> Awarding attorneys' fees and damages, with the ability to elect either actual or meaningful statutory damages (similar to the scheme introduced by Congress into the copyright statutes), would create serious disincentives for anyone involved in unscrupulous validation practices.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is a problem that needs to be corrected.</AC1><AC2> In this case, the line of credit is negatively affecting your credit a multiple of times even though it is one line.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>We live in the Information Age.</AC1><AC2> All the information this individual is requesting is readily available with a few keystrokes.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>First parties should still have the right to sue if they deem it necessary.</AC1><AC2> I have no problem with this rule if it is directed to third party debt buyers.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't believe in abusive behavior </AC1><AC2>(i.e. the behavior spelled out in the FDCPA),</AC2><AC3>but what this individual is saying that she owes a debt that she is not paying.</AC3><AC4>Instead, she wants to be the offensive party and paint the collector into a corner using a recording device.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Can there be a national repository to report abusive phone calls from debt collectors that masked (fake and \"spoof\") their caller ID?</AC1><AC2> I got a brand new phone number a few years ago </AC2><AC3> and it obviously previously belonged to someone who is delinquent on their bills </AC3><AC4> because I get calls everyday from debt collectors looking for the person who had my phone number before me.</AC4><AC5> No matter how many times I tell them they have the wrong number, they don't care and they just keep calling and they call from spoofed phone numbers.</AC5><AC6> And this is my cell phone, which is against the law for debt collectors to call.</AC6><AC7> The same debt collectors call with faked caller IDs.</AC7><AC8> Here are just some of the phone numbers these debt collectors use: 808-792-8186 462643 858-568-7632 805-322-4584 706-913-1192 808-348-0083 858-345-4076 858-312-7724 908-505-9008 800-633-2677 252-808-7969 571-522-0386 407-712-3093 213-816-2972 804-721-3193 678-781-4530 427307 858-240-4079</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Compliance 2013 demonstrates the type of arrogance that I have been addressing in my prior comments.</AC1><AC2> The belief that a default is a default by courts along with the practice of REWARDING Strategic Defaulters while sentencing INVOLUNTARY DEFAULTERS to never ending escalating debt because of the ongoing interest rate charges needs to be addressed.</AC2><AC3> I have been researching consumer debt for the past few years </AC3><AC4> and Consumer Debt is ON THE RISE GLOBALLY,</AC4><AC5> and that is not a good thing.</AC5><AC6> Canadian finance expert warns about rising consumer debt. __URL__</AC6><AC7> I can replace Canada in the title with England, Australia, South Africa, China, Russia, Ireland and on and on and on.</AC7><AC8> The consumer debt escalation is being caused by a ridiculously low 2% monthly minimum payment, the gateway drug to higher and higher debt, and because consumers who have legitimate life Changing events that cause them to default cannot plead INVOLUNTARY DEFAULT in court.</AC8><AC9> We let criminals plead involuntary to many crimes, but not law abiding citizens when it comes to their credit cards and student loans!</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 5]]", "output": "{\"relation_types\": [\"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers are typically notified numerous times before the account is sent to a collection agency.</AC1><AC2> It is in the best interests of the credit union to try and resolve the delinquency before it is sent to a collection agency due to the added cost.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Any form of written communication should count as a notice in writing.</AC1><AC2> If a debt collector receives a notice via email of contact they should be required to follow it.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>jfearon, I think you have to do it online.</AC1><AC2> I was able to clean up a family member's credit report online.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The consumer should be allowed to record all calls for proof of conversation with collectors.</AC1><AC2> And once a collector received a notice to not contact a debtor at their workplace it should be required that they do not even for \"location\"</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am concerned that there is some type of rewards system in place that somehow monetizes those who report when a consumer has a potential bad credit scenario.</AC1><AC2> As a conspiracy theory it makes sense since it drives up the cost of a loan.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am concerned that state and federal agencies are contributing to identity theft, big time.</AC1><AC2> In just the past month I had to make an online payment on what I believe was a federal hobbs act violation by the Los Angeles building and Safety department.</AC2><AC3> A day after making the payment or risk losing my home, that same credit card was being used online by thieves.</AC3><AC4> Then a few weeks later another agency asked for bank documents, I supplied them via fax, and they were lost!</AC4><AC5> And on top of that, there really didn't seem to be a big deal made out of the fact that the documents went missing.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree.</AC1><AC2> I have been harassed for years (after getting a new cell phone number) from debt collectors calling for someone else.</AC2><AC3> I presume it is the person who had my phone number before me.</AC3><AC4> No matter how many times I tell them that they have the wrong number, they just keep calling over and over.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree.</AC1><AC2> I've heard of this happening </AC2><AC3> and it's unjust.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers need to be pro-active in everything they do.</AC1><AC2> If an individual had the capability to take on a debt then they should have the capability to resolve the debt.</AC2><AC3> Every credit union I know goes the extra mile to help their members achieve financial success.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If a consumer states that he disputes the debt, the debt collector should immediately cease ALL collection activity until the debt is validated.</AC1><AC2> And, by validation, it needs to be more than \"the name and social security information matches the creditor's records.</AC2><AC3> The validation process should include a clear and complete copy of ALL DOCUMENTS that create the alleged obligation.</AC3><AC4> If none is available, then the debt should be cancelled.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a bankruptcy lawyer, I frequently deal with clients or are harassed by debt collectors calling family or neighbors.</AC1><AC2> the collectors will claim they are acquiring location information, but this is frequently the case where the consumer has been at the same location for years.</AC2><AC3> I hope the rules will narrow the \"location information\" exception </AC3><AC4> so that it can only be used where there is really doubt about the consumer's location.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Paying a debt in full will always improve a credit score unless the debt is over 7 years old.</AC1><AC2> If that is the case, I'm sure you can make a request to the financial institution to not report the payment.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It seems that just about anyone can create a debt collection company</AC1><AC2> and if the owners and/or employees have unscrupulous desires, then it seems that privacy is a big concern.</AC2><AC3> Plus, if anyone can create/own debt collection companies, then it doesn't seem to surprise me why so many debt collecting companies break the laws.</AC3><AC4> There should be tighter laws on the formation of debt collection companies and the employees that they can hire.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>another issue is an original business which isn't covered under FDCPA only needs a servicemember's military address (usually their only address),</AC1><AC2> they simple replace the servicemember/customer's name with Commanding Officer on a mailing or use a unit locator and ask for Commanding Officer.</AC2><AC3> Considering some of the businesses located outside of a base that prey on unsophisticated young troops, like a used car lot and it's easy to have more leverage with that troop.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Check your state law, </AC1><AC2>such as Illinois has its own Collection Agency Act.</AC2><AC3>It's a licensed profession and Atty general for the state would be a start for a complaint.</AC3><AC4>__URL__</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 3]]", "output": "{\"relation_types\": [\"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>At least in Illinois there is a Caller ID spoofing law.</AC1><AC2> Still get calls every day with false/unintelligible called ID listed and no message left.</AC2><AC3> __URL__</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2]]", "output": "{\"relation_types\": [\"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Creditors generally do not send accounts to collection until after they have sent multiple notices.</AC1><AC2> Requiring a specific notice will expose small creditors to liability beyond any benefit to consumers.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A standard first letter would be an excellent idea - especially if states would agree on the content.</AC1><AC2> Consumers could recognize the format and know where to look for the information they need.</AC2><AC3> Consumer testing would be a very good idea.</AC3><AC4> I believe that industry members would favor this to reduce litigation over technical violations.</AC4><AC5> Taxpayers would benefit by reduced federal court expenses.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 3], [2, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I knew a man who was sued by a debt collector and he was not served.</AC1><AC2> \"Someone\" was served, but not at his address and he was denied due process.</AC2><AC3> He learned of the suit when it was a judgment on his credit report.</AC3><AC4> He attempted to have the judgment overturned for lack of due process and the judge would not grant it.</AC4><AC5> Unfortunate, but yes they are allowed to deny due process and get away with it.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree both party's should be aware if any recording is going on.</AC1><AC2> It is fair for both sides</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The FTC got this one right.</AC1><AC2> Alternative one is easy to communicate and understand.</AC2><AC3> Terms like default and charge-off can be confusing and subject to interpretation.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't think that is the solution, </AC1><AC2>I hear there isn't room in the jails to put all the bill collectors.</AC2><AC3>A lot of the multiple calls problems come from an dialer calling, if it doesn't get an answer it will call back later.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have a debt in dispute with the CFPB, and it has not yet been resolved, but during the government shutdown the Original Creditor turned it over to a collection agency.</AC1><AC2> The collection agency has not contacted me in writing at all, but they did a hard pull on my credit report.</AC2><AC3> I legitimately closed the account when it was paid in full, but they continued billing me after I had cancelled the service.</AC3><AC4> Now the matter is simply snowballing.</AC4><AC5> I am very upset about this.</AC5><AC6> If a consumer is in the midst of a dispute with the CFPB, I would think there would be a \"time out\" on collection actions and especially malicious hard pull of the credit report while the dispute is ongoing.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A simple request for a call back is the best.</AC1><AC2> \"Foti\" messages serve no one.</AC2><AC3> It's clear to everyone that the call is from a collector </AC3><AC4> and 3rd parties are unnecessarily inconvenienced.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>You don't answer you'll get a call again.</AC1><AC2> Rather than ignore you could answer and ask the company not to call you.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers should be able to review all encoding and information in e-OSCAR</AC1><AC2> and there should be a comprehensive means to submit corrections and evidence to a dispute.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't think that we are discussing how to block a collector from calling you.</AC1><AC2> You shouldn't have to feel that you have to \" block \" a call .</AC2><AC3> You should just answer and ask them not to call you.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Creditors should be entitled to require consumers to provide them with a contact address and phone number and to provide updates while debts are outstanding.</AC1><AC2> If consumers do not do so, it should be fair for creditors (and collectors) to skip-trace or to reach them at other numbers.</AC2><AC3> Collectors should not be allowed to make calls to work until they have made multiple attempts to contact a consumer at home.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't think limiting the time to call a person at work is an option.</AC1><AC2> Everyone works at different times.</AC2><AC3> Some people moves, change cell phone numbers , </AC3><AC4> so call them at work is sometimes the only option.</AC4><AC5> It's hard to know what place \"prefers\" no personal calls , </AC5><AC6> and a list could be an option, </AC6><AC7> but most people work for smaller company's </AC7><AC8> and the lists will cater to the large company's.</AC8><AC9> Most people have information about where they work somewhere on the web.</AC9><AC10> I don't see a problem if a debt collector calls a customer at work if they don't know prior of any inconvenience.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [3, 2], [7, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Let's start by assuming the creditor provided something for which a consumer agreed to pay.</AC1><AC2> Creditors should be entitled to get a phone number and address at which the creditor can reach the consumer and to get updates as long as a debt is outstanding.</AC2><AC3> If a consumer chooses to use only a cell phone, the creditor and collector should be able to contact him at that number.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>To start e-oscar should take internet complaints the same a shad written letters.</AC1><AC2> They do not do that.</AC2><AC3> They take internet disputes differently then they do hand written letter.</AC3><AC4> That is in regards to disputed debts and it is important that the credit bureaus be consistent about the dispute process and the statues of limitations based on state laws.</AC4><AC5> They should also have limits on how many collection agencies they sell the account of too including their shady practice of selling accounts of to collection agencies in different states.</AC5><AC6> Their should be a cap on debts owed and the power that the agencies have on consumers.</AC6><AC7> I think ultimatel it is about the collection agencies not abusing the consumer and helping consumers find ways to keep their accounts out default.</AC7><AC8> A good start to offer consumers to get their accounts out of default would be based on charging consumers a small percentage of % coupled with a promissory note with a date to begin making payments to the debt collector.</AC8><AC9> They abuse the consumers </AC9><AC10> and they should stop it.</AC10><AC11> Overall, the communication process between consumers and debt collectors is flawed with mis communications and a lack of options to pay back what they owe.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have no personal experiences with debt to speak of, only my experiences working with victims of identity theft who have fraudulent debts; which is a horse of a different color.</AC1><AC2> Consumers are not educated about how debt collection and revival works.</AC2><AC3> The issue in the end isn't the mechanics, or if they can request the debt not be reported.</AC3><AC4> The issue is that, the way things stand now, it is not clear how repaying a debt will improve their score.</AC4><AC5> It is not clear that they can ask for the collector not to report the debt payment if the debt is older than seven years.</AC5><AC6> Consumers are confused and have these inaccurate perceptions because things are not clear.</AC6><AC7> Again, it is the perception which concerns me - it would benefit both creditors and consumers if it was plain and clear, in language the average consumer could understand, that paying off a debt is a good thing.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Please go hard after the service industry.</AC1><AC2> They have done a lot to foul up the debt collection process by having their service people FALSE SERVE and FALSE SUBSERVE prospective debt collection alleged defaulters.</AC2><AC3> It's happened to me twice, </AC3><AC4> the first time the process server simply guessed by using the most generic age size, weight and assign a made up name!</AC4><AC5> The second time the servicer simply called the sub server \"Jane Doe\" and once again made up the most generic cut across as many age, height and race descriptions they could come up with, which meant they could not be more far off.</AC5><AC6> Then when I went to court I just happened to hear another defendant make the claim to the judge that they were never served, that the paper work was left outside the door.</AC6><AC7> Besides the service company lying in court documents about serving someone that was not actually served, </AC7><AC8> which in and of itself should be enough to give the judge some type of latitude to do something to protect the defendants, </AC8><AC9> when a debt collector knows they can get a false service, they have MUCH LESS MOTIVATION to negotiate with the defendant. </AC9><AC10> Judges don't seem to get this aspect of false service.</AC10><AC11> I know what I know </AC11><AC12> and I will state unequivocally anywhere that I have twice been false served/subserved.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [0, 1]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"evidence\", \"evidence\", \"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Innocent until proven guilty is the American Justice System.</AC1><AC2> And the burden of the proof is on the one bringing the suit.</AC2><AC3> Debt collectors need to get their act together before trying to file frivolous lawsuits.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>That's the price of being in the business.</AC1><AC2> If debt collectors can't hack it in the real world, then they need to find another business industry to be for their \"careers.\"</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>After having a perfect payment history for 15 years, I had to across the board default on six accounts </AC1><AC2>because I became an unpaid caregiver for my parents.</AC2><AC3>However, before I ever defaulted, I contacted each account and explained what was going on.</AC3><AC4>I would also like to note that five of the six accounts were still being paid down until I ran out of savings.</AC4><AC5>I discovered the credit card companies HAVE NO INTAKE for potential defaulters.</AC5><AC6>I consider a potential default division a cost of doing business that credit card companies have eschewed </AC6><AC7>because they have co-opted the courts to do all the work for them for a very nominal fee.</AC7><AC8>My goal was simple, keep making monthly miniscule autopay payments on all six accounts in exchange for no harrassing phone calls so that I could concentrate on CareGiving AND modifying my self employment so that I could make something every month.</AC8><AC9>Everyone refused, and the harrassing and MORE IMPORTANTLY REPETITIVE phone calls started.</AC9><AC10>I ended up having to convert my land lines to 6 dollar a month cell phones, </AC10><AC11>and then I rarely used them </AC11><AC12>because I could not afford the 20 cents a minute cost.</AC12><AC13>In essence the credit card companies and debt collectors destroyed the best way I had to regenerate earnings while still being an unpaid CareGiver.</AC13><AC14>And as Marlene so eloquently pointed out, an additional roadblock is the debt collectors ABSOLUTE REFUSAL to put any verbal agreement reached in writing!</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [5, 6], [10, 11]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>That's business.</AC1><AC2> Debt collectors--small, medium, and large--know the cost of doing business.</AC2><AC3> And if they don't know, then they need to find a new \"career.\"</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't think that the partial SSN should be included.</AC1><AC2> That raises too many privacy concerns.</AC2><AC3> And I'm sure that one day a debt collection company will have a \"system malfunction\" and will \"accidentally\" send the full SSN.</AC3><AC4> Too many consumers have similar names in the same city.</AC4><AC5> Lastly, many different companies classify a partial SSN as the first 5 digits whereas other stick to the traditional last 4 digits.</AC5><AC6> If a mail thief is lurking, then he might have access to a consumers full SSN.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [1, 5], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Once I tell a debt collector I am a unpaid CareGiver</AC1><AC2> and that is why I had to stop making payments,</AC2><AC3> In essence they were telling me to let my parents die if necessary and go get a job.</AC3><AC4> I was repeatedly baited with the comment, \"So you are a \"refuse to pay\".</AC4><AC5> I found this type of conduct outside the lines of common decency.</AC5><AC6> I had a business,</AC6><AC7> I had to give up the business to become an unpaid CareGiver.</AC7><AC8> If I had been shown at the time I apparently agreed to the credit card agreement that there truly were no ifs ands or buts in regards to monthly payments forgiveness on an \"unsecured\" debt, I would have come up with a different business model that did not require credit card debt.</AC8><AC9> Credit card companies get to present themselves as pro family in their advertising when the exact opposite is true in times of crisis.</AC9><AC10> Ask people who had a dramatic life changing incident occur how the credit card companies treated them.</AC10><AC11> Ask the Colorado flood victims, or the Hurricane Sandy Victims, or the person who was the victim of a hit and run how the credit card companies treated them.</AC11><AC12> These are the same credit card companies that lobbied the comptroller of the currency in 2002 to keep their monopoly on credit card debt suspension insurance and the outrageous overpriced premiums they were charging their customers.</AC12><AC13> One of the best ways consumers had to be responsible regarding their credit card debts was having AFFORDABLE credit card debt suspension insurance.</AC13><AC14> This option was stolen from consumers in 2002 when the comptroller of the currency allowed credit card companies to over charge by 1000% to 2000% on monthly credit card debt suspension insurance premiums.</AC14><AC15> I created a time line document that shows how the financial elite stole fairness from the people in regards to credit card products.</AC15><AC16> My appearance in front of the CFPB in May of 2013 and the research I shared with them. __URL__</AC16>\n### Here is the list of pairs of related argument components in this paragraph: [[14, 15], [1, 0]]", "output": "{\"relation_types\": [\"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I dont understand why bill collectors are so stuck in ancient times.</AC1><AC2> I get so many calls and its annoying.</AC2><AC3> I would much rather get a text or email.</AC3><AC4> The phone ringing can be annoying and a text is more subtle.</AC4><AC5> It also doesnt require me to hear a long dragging voicemail.</AC5><AC6> I would rather get a text saying who they are and what they want.</AC6><AC7> If I dont respond soon then call me.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [2, 4], [5, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I often find that some banks wont allow their agencies to take debit or credit card.</AC1><AC2> All agencies should accept debit and credit payments.</AC2><AC3> Its like they are stuck in 1950.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Texts will not work for consumers.</AC1><AC2> Consumers must pay for texts </AC2><AC3> and this is already against the law will rightly so.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Text me please...</AC1><AC2> it is annoying to have to ignore your call every other day.</AC2><AC3> For goodness sake it is 2013!!!</AC3><AC4> Send me a text and wait for my reply.</AC4><AC5> I cant take calls at work and ignore calls from numbers I dont know.</AC5><AC6> Which makes it easy for me to be in collections and not know.</AC6><AC7> If you have my cell number because the bank had it please use it.</AC7><AC8> Send me a text and tell me who you are why youre calling.</AC8><AC9> If not I wont answer.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [3, 4], [3, 5], [5, 4], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I dont mind the calls to work.</AC1><AC2> My problem is the frequency.</AC2><AC3> The reality is that I owe the bill and I know it.</AC3><AC4> But I dont think they should call my job unless I dont call them back.</AC4><AC5> Tect me and call me first and give me a few days.</AC5><AC6> Then call my job but not every day.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Actually a dialer does not call back.</AC1><AC2> Your dialer has been purposely setup that way by YOUR IT dept.</AC2><AC3> I bet you would lose in the knowledge of dialers.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>That is insane.</AC1><AC2> My mom heard one when I was playing my voice messages at home.</AC2><AC3> They should only disclose through texts.</AC3><AC4> Texts arent something that will be heard by others.</AC4><AC5> That long message saying they are collectors and trying to colleft a debt is ridiculous!!</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It is against the law to call cell phones.</AC1><AC2> And to send out texts.</AC2><AC3> And no matter how much the debt collection lobbyists try to change the law, it won't work.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I need a number to show.</AC1><AC2> Stop blocking yhr number and stop using 800 numbers.</AC2><AC3> To me 800 numbers belong to sales or solicitors.</AC3><AC4> I want to know I have a debt in collections.</AC4><AC5> So dont hide.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Look, its 2013!</AC1><AC2> Ignoring phone calls is annoying </AC2><AC3> and constantly seeing missed calls is aggrivating.</AC3><AC4> Why are bill collectors stuck in ancient times?</AC4><AC5> Text me!! </AC5><AC6> Email me!!</AC6><AC7> Those phone calls are not going to be answered </AC7><AC8> because I work and have kids.</AC8><AC9> Communicati g with them would be so much easier if I could text and email these people.</AC9><AC10> Seriously this is not 1950 we live in!!</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 6], [5, 6], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>People get fired for personal calls at work.</AC1><AC2> I worked at a place where employee phone call was recorded and randomly monitored due to the sensitivity of our work.</AC2><AC3> And every now and then an employee would get caught making/taking a personal phone call and would be fired with no questions asked.</AC3><AC4> Work is not the place for personal business.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [3, 0]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I dont mind the spouse.</AC1><AC2> I mean shes my wife </AC2><AC3> so I dont see why not.</AC3><AC4> But I dont agree with girlfriends or boyfriends for those who dont have a spouse.</AC4><AC5> Spouse is okay.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: Understood.<AC1> All i meant was that I know a lot of automated dialers. given the nature of my work.</AC1><AC2> They don't magically redial.</AC2><AC3> The are forced to by the company.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A debt that is paid in full doesn't improve a credit score at all.</AC1><AC2> A debt that is settled for less or paid in full is the exact same.</AC2><AC3> Once the damage is done to a credit score, the damage will remain.</AC3><AC4> The only slight (very small) improvement on a credit score is when a bad debt was a credit card account and had over 100% utilization.</AC4><AC5> Once the utilization goes down below 100% (and that occurs when the credit card debt was either settled for less or paid in full) does the credit score improve only very slightly.</AC5><AC6> But the damage is still done and will take years to recover from.</AC6><AC7> __URL__</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 6], [1, 6], [3, 6], [4, 6], [2, 0], [2, 1]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"evidence\", \"evidence\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a debt collector, I noticed a problem with the protection of landlords/property owners who are requesting internal DNC's with the company I have employment with.</AC1><AC2> As they will be Do not call flagged \"DNC\" with one account, they will not be DNC'ed with another account for the purposes of skip tracing,</AC2><AC3> the chance of repeat calls in urban centers harassing certain members of the public is plausible </AC3><AC4> as the only numbers that are held consistently in the database afaik \"By Law\" are verified and confirmed numbers.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Potential for abuse.</AC1><AC2> Here comes your neighbor knocking telling you he's getting calls looking for you.</AC2><AC3> The same with family members makes holiday gatherings fun since it's clear it's a debt collector doing some location acquisition.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>see robocalling, picking up just lets them know this is the prime time to make future calls since you're home at this time.</AC1><AC2> Account keeps changing hands, repeat.</AC2><AC3> \"It takes time for us to update our do not call lists...\"</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>You may want to see an attorney specializing in FDCPA cases and take that collector to court.</AC1><AC2> Federal law might be in your favor with all the validation requests ignored.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Many recommendations are dispute credit report in writing </AC1><AC2>since online is more rushed by the people hired to handle this.</AC2><AC3>No requirement to do it online.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There needs to be some federal protections for the consumer and a clear appeals process.</AC1><AC2> The state run by private company programs seem to see the alleged debtor as already guilty.</AC2><AC3> For example, some consumer groups have suggested that entities may not be including a \"clear and conspicuous statement\" that the consumer may dispute the validity of the alleged bad check violation.</AC3><AC4> What kind of financial incentives are there for these companies to meet certain benchmarks that may not be in the consumer's best interest?</AC4><AC5> It kind of sounds like those arbitration programs for credit card debt where everything was stacked in the favor of the creditor.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [0, 1]]", "output": "{\"relation_types\": [\"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In my experience, simply contacting a person to collect a debt, time-barred or otherwise, implies litigation is possible and/or impending.</AC1><AC2> It shoud be clearly stated in any communication if the debt is time-barred </AC2><AC3> and these types of debts should not be discussed by a phone call initiated by the collector.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I'm in agreement with that statement.</AC1><AC2> Having worked for a Sheriff's Office where we served many debt collection processes, I found that not much effort is made to locate the proper address for the defendant.</AC2><AC3> When we would find the defendant had moved, we would return it not found.</AC3><AC4> However, the same cannot be said about private process servers who go out and post processes on the door without confirming they live there.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Repeated phone calls are torture.</AC1><AC2> There is NO need for this when there is a mail system.</AC2><AC3> One completed phone call should be enough.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [2, 0], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have experienced a debt collector call me several times in a day although they have already got the voice mail.</AC1><AC2> Even if I already have spoke to them and told them my situation and created a \"payment date,\" they call again the next day.</AC2><AC3> I do not know if the system is talking to each other or they just have that \"auto dialer\" on and just calls all day and every day.</AC3><AC4> It is abusive and on hte verge of harrassment.</AC4><AC5> Not to mention, the time that they call is 10pm or 9pm.</AC5><AC6> I believe that is too late to call</AC6><AC7> and there should be reasonable time to call and based upon the time zone you LIVE IN not based on the area code of your mobile phone number.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[6, 4], [6, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have already spoken with an attorney.</AC1><AC2> This is how I found out about the separation of state and federal law.</AC2><AC3> Because I was sued in state civil court is why my validation requests were ignored by the plaintiffs as well as the seating judge.</AC3><AC4> What I should have done (in state court) was sent a 'discovery' request AFTER the case had been filed rather then a validation request.</AC4><AC5> Please note - the 'collection agency' was a large legal firm.</AC5><AC6> They knew the laws well and whereas I was a lay person and not versed in law , I was like a sitting duck just waiting for the slaughter.</AC6><AC7> If I did take them to court I would receive hundreds but it would cost me thousands....</AC7><AC8> and I just do not have that type of money.</AC8><AC9> What really touched my heart was sitting in that court room and seeing others that also thought that the law would be fair if they represented themselves.</AC9><AC10> Needless to say, we all lost and lost big time.</AC10><AC11> I asked the judge why would he allow this when the plaintiff was a unlicensed collection agency and he stated ' they look like attorneys to me'.</AC11><AC12> I knew that at that point I had lost my case.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree that there documentation should always be provided.</AC1><AC2> Why would I pay a debt without absolute proof that it belongs to me?</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The first entity I will probably take to small claims court and possibly file a complaint with Kamala Harris.</AC1><AC2> The second incident I started sending faxes messages in big bold letters to the same fax where my prior faxes had been lost, asking other workers to look to see if they had taken the papers by accident.</AC2><AC3> I also faxed overnight warning those who might have access to that room that taking fax documents could lead to their arrest.</AC3><AC4> I did this for several days in a row.</AC4><AC5> It was the only way I could think of to apply a much needed enema to those who have established a routine and can't shake free from it.</AC5><AC6> Of course this assumes that they care.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I like the Summary of Rights idea.</AC1><AC2> I think that a validation letter and even an initial communication letter should included of Summary of Rights for State Laws and Fed Laws.</AC2><AC3> This would help two fold: both the debtors/consumers and the debt collecting companies.</AC3><AC4> The debtor/consumers would know their rights </AC4><AC5> and the collectors would then also know the particular rights for the states that they are collecting in.</AC5><AC6> This shouldn't be burdensome at all </AC6><AC7> since the CRA already include Summary of Rights as do employers who check credit.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [5, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There should never be a fee for payment.</AC1><AC2> In fact, in about 1/3 of the states have state laws that prohibit any fees/surcharges for payment by credit/debit cards (unless it is a government agency).</AC2><AC3> if a debt collector accepts credit/debit cards for payment, there should not be any fees for payment processing.</AC3><AC4> Nor should there be any fees for payment processing for any other payment method for that matter.</AC4><AC5> debt collection companies should also be able to accept prepaid debit cards for payment as a means of privacy and security for the debtors, rather than access to a bank account.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When two parties engage in a lawsuit, each side presents the evidence they have supporting their assertions.</AC1><AC2> As a collector, I provide proof of the debt</AC2><AC3> The debtor is also expected to present some proof that the debt is not theirs.</AC3><AC4> Yes, the assumption is innocent until proven guilty but you have to provide evidence to support your claim of innocence.</AC4><AC5> If I offer a signed document that says you agreed to the purchase and documentation that supports that you did not pay, I have fulfilled my side of the burden of proof.</AC5><AC6> The debtor also bears a burden of proof in our system.</AC6><AC7> That's what the judge is for - to hear both sides, weigh the evidence, and make a fair decision based on the evidence and arguments presented.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Being in a court of law and talking to a debt collector on the phone that requires proof that the debt in question is not a valid debt, are two different things.</AC1><AC2> If your intent is to sue, then sue.</AC2><AC3> But requiring proof from anyone you call up and demand that they prove to you (and not a judge) that the debt is not theirs is extortion.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If there already isn't a law or rule at the fed level for when what happens to time barred debts when a debtor leaves the purview of one states SOL and now resides in another states SOL, there needs to be.</AC1><AC2> It should be clear that if a debtor changes states, which SOL should come into play.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think there should be a fed law that should clearly state that any partial payment might revive the SOL for suit.</AC1><AC2> How consumers get a phone call/letter telling them they have a debt and they just blindly pay it or make partial payments in order to just stop getting the phone calls? Lots.</AC2><AC3> And the debt might not even be theirs, </AC3><AC4> but they pay it anyways thinking that they might have a old debt that they forgot to take care of.</AC4><AC5> The problem with that is, that the debt then is revived, the debt collector sues, and the judge tells the debtor \"well, if this wasn't your debt then why did you agree to make partial payments?\"</AC5><AC6> Then the judge will make favor in the debt collector for a revived debt that the debtor was not even responsible for in the first place.</AC6><AC7> This scenario happens every day of the week.</AC7><AC8> And the consumer had thought they were doing the right thing, but the debt collector is actually taking advantage.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Actually there should always be more communication about specific things, rather than less.</AC1><AC2> More communication from the Original Creditors that an account will be turned over to a collector and when.</AC2><AC3> And when a debt collector then turns it over or sells to someone else there should be more communication about who.</AC3><AC4> Just like when mortgages are sold to other servicers, the borrowers get letters informing them of who now owns their mortgage and who now to send payment to.</AC4><AC5> This should be standard practice for debt collectors.</AC5><AC6> Explaining to the debtor that they have turned the account to someone else and that all payment and communication should now be directed to the new guy (even if no payments were sent to the first debt collector.</AC6><AC7> Because there are debtors who can't make payment now but can later, and if they start sending payment to an old debt collector via an old letter they got in the mail, then debtors attempts to actually resolve the debt go by the wayside.</AC7><AC8> More communication about who/what/where/how is necessary.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [5, 7], [7, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I once had a debt collector send collection letters to my work address.</AC1><AC2> They had my home address.</AC2><AC3> I think this should also be prohibited.</AC3><AC4> Who gets personal mail sent to them at work?</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I keep getting collection calls for some unkown person on my cell phone at least 4 times a day.</AC1><AC2> I have repeatedly told them that this is not that person's number.</AC2><AC3> I recently got a new number </AC3><AC4> and it is so aggravating to monitor your calls because of someone else</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The name of the agency is the CONSUMER Financial Protection Bureau not the Collector Financial Protection Bureau.</AC1><AC2> The industry have their lobbyists </AC2><AC3> and consumers have the CFPB.</AC3><AC4> The goal is to protect consumers from illegal practices by certain industries </AC4><AC5> and that sometimes means more regulations.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A neighbor who has since moved away has had her debts turned over to collection agencies.</AC1><AC2> We receive repeated calls trying to get contact information, even though we request to be taken off their list.</AC2><AC3> An unfortunate situation but we don't know the whereabouts of the individual and shouldn't be subjected to this sort of harassment.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am a clerk at a local city court.</AC1><AC2> I am the civil clerk </AC2><AC3> and I feel that debtors are treated extremely unfairly by debt collection laws.</AC3><AC4> The Court cannot give legal advice</AC4><AC5> so it is saddening to have to try and explain and console upset litigants who have no idea what they are in for.</AC5><AC6> I think there should be more avenues for pro se litigants who cannot afford to retain a private attorney </AC6><AC7> (which is 95 % of the litigants in my city).</AC7><AC8> I can say that most people do not answer summonses because they either were not properly served or they just straight up do not care, or most often, do not understand the legalese.</AC8><AC9> BUT, I do have to say that I get many litigants who call and ask what they do now that they are served.</AC9><AC10> On the occasions that people do file answers, most of them are in letter form, not a \"legal\" verified answer.</AC10><AC11> Most debt collection attorneys jump right on that and request a summary judgment.</AC11><AC12> Our Court does not turn away letters, </AC12><AC13> and we send a copy to the attorney and set the matter up for a pre trial conference with a judge or court attorney to help try to get both parties together to come to some sort of resolution.</AC13><AC14> The Court does have to adhere to a scheduling policy for these conferences, </AC14><AC15> but we are very flexible </AC15><AC16> if a defendant has a scheduling conflict we try to accommodate them as best we can.</AC16><AC17> When summonses are filed with the court, half of them have tons of information about the debt, others only have the amount due!</AC17><AC18> I find that sometimes it's hard for litigants to obtain further proving documents from attorneys, even with the court telling them they have to.</AC18><AC19> When entering default judgments, I take my time and examine the whole file, like comparing the contents of the summons/complaint and the default judgment submitted, re-checking the affidavit of service of the summons (to make sure the defendant had the legal time to answer the summons), and ensuring that attached to the default judgment is the proper documentation as to purchasing the debt, a non-military affidavit, etc.</AC19><AC20> I also make sure that they are being charged the proper interest rate and court costs.</AC20><AC21> The bottom line is that the debtors still do not have enough and/or sufficient laws to protect them, and the Court's hands are tied based on these laws,</AC21><AC22> even if they wanted to help, they couldn't.</AC22><AC23> I know the Court is to remain impartial, but in a small city, everybody knows everybody and sometimes it's hard to see these practices occurring.</AC23>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3], [21, 20]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>To the first question, due diligence is a must.</AC1><AC2> Even if collectors are allowed to continue litigation (which I do not see going away,) there must be a penalty for the collector if false claim is made.</AC2><AC3> If a collector starts litigation and it is found to be against the wrong person, compensation and additional penalty should be paid by the entity initiating the litigation in the form of a reasonable fee to the victim and an additional (and substantial) fee to the governing authority to help cover oversight expenses.</AC3><AC4> To the second question, I believe an overwhelmingly large portion of consumer debt can be repaid.</AC4><AC5> However, there are always going to be exceptions to this.</AC5><AC6> In cases where debt can not be collected for whatever reason, it should be written off as truly not collectable and no not be allow to be sold again as debt to be collected.</AC6><AC7> Fine tuning and definitions of \"Not Collectable\" will have to be worked out by the appropriate oversight bureau or agency.</AC7><AC8> To the third question, both party's must be measured.</AC8><AC9> There are currently established credit reporting agencies to monitor the consumer side of this issue and an additional, numerical evaluation score can be added to the consumer's already established credit report.</AC9><AC10> That would be a starting point that can be expanded on as the system is fine tuned.</AC10><AC11> The collector, on the other hand, would require a new measuring system that would not only score the company as a whole, but the individuals taking part in any debt resolution activities.</AC11><AC12> For successful examples of such a system I would direct you to the Department of Transportation, Federal Motor Carrier Safety Administration and their Compliance-Safety-Accountability system.</AC12><AC13> Admittedly, their system is much more complex and dives much deeper than would be required for the debt industry.</AC13><AC14> However, their point system is valid and flexible for future change.</AC14><AC15> It would also allow for measurement of the initial creditor.</AC15><AC16> Such measurement would give the government and investors a better idea of a given business' risk level.</AC16><AC17> Add to this mix, the recommendations from Mr. Bartmann and you have a system whereby collectors and financial institutions will better regulate themselves to achieve an ethical and responsible outcome and not hide behind the \"what I did was legal\" defense.</AC17><AC18> It would be a Win-Win for both sides and bring many consumers out of the debt death spiral.</AC18><AC19> Lastly, the federal government could implement this system with a minimal impact on state autonomy.</AC19><AC20> It would reduce the number of litigation in state and local courts, thereby motivating the states to take part.</AC20>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [9, 8], [18, 19]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I contacted the debt collection company and tried to make arrangements for payment of debt,</AC1><AC2> the reason I could not pay my bills is my husband was laid off work and he had started a new job.</AC2><AC3> I wanted to make payments of $100. a month, debt collectors said NO, so I said the most I could afford was $200 a month the said NO they wanted $1,000. a month.</AC3><AC4> Now we have 4 children, a mortgage and utility payment, debt collection said $500 a month my husband brought home after taxes $1,100 twice a month.</AC4><AC5> My mortgage is $1,300 per month not including utilizes so I told debt company that I couldn't pay.</AC5><AC6> I always thought something was better than nothing and that a debt company would try to work with you.</AC6><AC7> I learned that they won't work with you.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have received calls from debt collectors at 9:30 pm,</AC1><AC2> and I consider this rude.</AC2><AC3> I have also had robocalls early in the morning that woke me up.</AC3><AC4> I am 69 yrs old, and retired, </AC4><AC5> and I sleep late.</AC5><AC6> My health is not good at the moment, </AC6><AC7> so sometimes I have had a bad night</AC7><AC8> please, please don't wake me up with a robocall.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[6, 5], [7, 3], [7, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do NOT answer any calls that have \"unknown caller\" or \"unknown\" in the ID.</AC1><AC2> If you can't show your name in the ID line, then something is not right with your company, or you have something to hide.</AC2><AC3> Remember, YOU are calling ME, </AC3><AC4> so in that sense, phone calls are an invasion of my privacy.</AC4><AC5> I don't have any obligation to answer any calls that I don't want to.</AC5><AC6> There should be a regulation that requires debt collection agencies to identify themselves when making phone calls.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I absolutely hate robocalls, especially those that repeat constantly and relentlessly.</AC1><AC2> There are some people who shirk their responsibilities,</AC2><AC3> but there are also those who simply do not have money to pay out a debt.</AC3><AC4> People lose their jobs, get laid off, get sick and can't work, retire and try to make it from one month to the next on miniscule retirement benefits.</AC4><AC5> There should be a regulation against robocalls, period.</AC5><AC6> They should not be allowed.</AC6><AC7> They are not necessary and only serve to harass people.</AC7><AC8> It's a bullying tactic, in my opinion.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [4, 7], [5, 7], [7, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am on a Senior plan for my mobile phone </AC1><AC2>and I get charged for each text that comes in or goes out.</AC2><AC3>I am able to make/receive texts, but have to pay for each one ...</AC3><AC4>so it is not fair to make me pay extra on top of what I already owe.</AC4><AC5>I am against using cell phones for business advertisements or debt collecting texts or calls.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [2, 1], [3, 2], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree with Bonzarel.</AC1><AC2> The obvious solution is to ban debt collection calls to cell phones, period.</AC2><AC3> Not everybody has the same options on their mobile plans, </AC3><AC4> and some have strict time/call/texting limits and/or restrictions.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [1, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Is it possible to just allow consumers to opt out of certain kinds of communication entirely?</AC1><AC2> They could set transparent, limited rate increases which debt collectors could charge for each mode of communication that is eliminated.</AC2><AC3> A rule setting that kind of rate increase would add some necessary transparency to the question of whether these kinds of communications are even worthwhile for the agency.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would like to see the time frame for validation change.</AC1><AC2> I, as a consumer, have 30 days from the date of the letter to dispute the debt,</AC2><AC3> however, the collection agency can take as long as they want, even years, to get back to the consumer.</AC3><AC4> This practice is not only bad </AC4><AC5> but some charge interest on the debt, even though they don't call it that (fee's\"), all the time they are 'looking into it\".</AC5><AC6> If I have 30 day's they should have the same time frame to get back to me, period.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Collection Agency's' should be REQUIRED by law to show their phone number when calling a debtor.</AC1><AC2> Most if not all come up \"unknown\".</AC2><AC3> If they are a legitimate company then they should have no problem showing their number.</AC3><AC4> If I call them, and my number is blocked, I can't get thru until I unblock my number.</AC4><AC5> If they truly are legitimate, they should want to do things fair and above board.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 4], [4, 2], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Agreed.</AC1><AC2> And it should be their real phone number.</AC2><AC3> So that when you miss their phone call and try to call them back, it should go to the real company.</AC3><AC4> And not say something like \"the call can not be completed as dialed.\"</AC4><AC5> I mean, what is the point in that.</AC5><AC6> Some debtors can't get to their phone before it goes to the answering machine </AC6><AC7> and if the collectors don't leave a message, the debtor will try to call back.</AC7><AC8> But then the call can't be completed when you try to call back.</AC8><AC9> So, really what was the point of the call.</AC9><AC10> Many debtors would just assume it was a scam call.</AC10><AC11> Increasing Right Party Contacts should be the goal.</AC11><AC12> And that goal can only be reached if the real phone number is showing up on calller id.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [8, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There's no need to be rude about it.</AC1><AC2> There are some debt collection practices that should obviously be illegal.</AC2><AC3> Other things that people are discussing here are obviously matters of convenience.</AC3><AC4> To the extent that preferences are widely shared and outright prohibition wouldn't increase lending costs across the board beyond a marginal amount, outright prohibition makes sense.</AC4><AC5> But if someone wants the ability to stop someone from conducting any and all robocalls from all phones, and robocalls help creditors recoup their loans, then the creditor should be able to charge a regulated fee for that convenience.</AC5><AC6> I'm not saying that the debt collection agency itself would charge the fee</AC6><AC7> Just that a consent-based approach is another option.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Any collector who uses a robocall, without first having a live person call to verify that the phone number is correct, is lazy and irresponsible.</AC1><AC2> Aside from being a major nuisance, robocalls to a third party are always an improper disclosure </AC2><AC3> because prerecorded calls are required to include the name of the company at the start of the message (per the TCPA).</AC3><AC4> I've received dozens and dozens of calls like this, </AC4><AC5> and now I know which of my neighbors are alleged to owe money.</AC5><AC6> I say \"alleged\", </AC6><AC7> because the companies making these calls are usually the same scofflaws who have been sued repeatedly for trying to collect nonexistent debts.</AC7><AC8> Outlawing robocalls, particularly robocalls to third parties, would hurt the bad actors without having much impact on legitimate collectors.</AC8><AC9> I wouldn't have a problem with live callers using autodialers, except that the technology used by some collection agencies is so far behind the times.</AC9><AC10> Telemarketers are able to stay within the required 3% abandonment rate,</AC10><AC11> yet my experience is that the drop rate on live calls from collectors ranges from 50% to 100%.</AC11><AC12> Yes, I had one company hang up immediately every single time one of their agents called me. </AC12><AC13> I'm not sure how this is profitable.</AC13><AC14> Extending the FTC's 3% rule to debt collection calls would address this issue.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [1, 2], [5, 6], [13, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If I am paying for the minutes on my phone, which I do, then I should be able to chose who's call I do and do not want to answer.</AC1><AC2> When it comes up 'unknown\", how do I know it's a Collection Agency, a telemarketer trying to sell me vacation homes, cruse lines trying to sell me a cruse, someone wanting to offer me a better mortgage rate, ect...</AC2><AC3> Every call I answer deducts time from my minutes </AC3><AC4> and that is NOT fair to me.</AC4><AC5> I now block ALL \"unknown, withheld & private\" calls.</AC5><AC6> If they truly are legidimate and want to talk to me, press 1 to unblock, just like I have to.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A collector's toll-free number is the ideal number to display on Caller ID,</AC1><AC2> since it allows the call to be returned from anywhere without incurring long-distance charges.</AC2><AC3> It also lets the recipient know right away that it is not a personal call and is probably not from a local company.</AC3><AC4> I'd much rather see an 800 number than a spoofed local number for a company that is really 1000 miles away (or in India).</AC4><AC5> This spoofing is clearly a false and deceptive practice that is barred by the FDCPA, </AC5><AC6> but still it occasionally happens.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't like #2</AC1><AC2> because if they were to start telling consumers to a to a certain website, that opens the door for spammers/hackers to increase virus infections by simply doing the same thing.</AC2><AC3> Just calling every phone number in the phone book and telling the consumer navigate to a certain website and then infect their computer.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>They could at least start with address and area code of debtor\"s phone number.</AC1><AC2> And I would say that the reach would be at least as far as the local commuting area.</AC2><AC3> So for a city like Boston, there's Boston, Chelsea, and the other surrounding areas.</AC3><AC4> Now, if a debtor from NY traveled to Boston for the marathon, for example, that would be much harder for a collector to have a reasonable expectation of a debtor\"s whereabouts.</AC4><AC5> But once a debtor has identified his/herself within the reach of the commuting area of the place of emergency, then perhaps the exemption period should kick in.</AC5><AC6> In a place like Newtown, or Colorado, if a collector has a reasonable belief that a debtor may have been an employee of the school or movie theater (if they can't identify the debtor being in the local commuting area by address/phone number), then they should also stop collection for the exemption period.</AC6><AC7> So, place of employment, address, phone number, and debtors self-identifying their whereabouts, could be ways that debt collectors could/should have reason to believe the location of a debtor.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It would be a good idea to create a national database of collectors and assign them an ID number just like the IRS.</AC1><AC2> Require them to state their name and ID number just like IRS employees do.</AC2><AC3> This would allow debtors to easily identify an abusive collector or just call a debt collection agency and ask to speak to a specific employee.</AC3><AC4> If they call and leave a voicemail they are required to state their ID number somewhere in the recording.</AC4><AC5> It would be good for both debtors and collectors.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [0, 4], [1, 0], [1, 2], [1, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is a collectors favorite.</AC1><AC2> They call over and over to harass debtors </AC2><AC3> and they should be limited to one call per day with a required voicemail stating their purpose.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Creditors should only be allowed to call between the hours of 9am until 7pm local time unless they have written consent (maybe even a web form) that gives them a minimum 3 hour window in which to call.</AC1><AC2> Additionally, they are limited to 3 phone calls a day maximum.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think limitation is good as not to harass.</AC1><AC2> I think it has been generally defined as 3-4 days per day, </AC2><AC3> though I think that is still excessive, </AC3><AC4> and any collector who follows that is clearly trying to harass.</AC4><AC5> Who else would someone call 3-4 times in a day?</AC5><AC6> But, with the example of 1 call per day, I would think that there would also need to be another limitation such as 1 call per day or no more than 4 calls in a week.</AC6><AC7> Otherwise, a collector could call 1 time a day, 7 times a week, 30 times in a month, etc.</AC7><AC8> And personally, in my personal phone calls and in my business phone calls, it can take me more than a day or two to return a message.</AC8><AC9> Customarily, in personal phone calls and business phone calls, if a message is left, the caller will leave a message and wait a couple of days before calling back if the person has yet to return the phone call.</AC9><AC10> This is the way normal phone etiquette works--both in personal phone calls and in business calls.</AC10><AC11> So, why should debt collections be different,</AC11><AC12> why should they break the norms.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 3], [0, 8], [0, 9], [3, 4], [5, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 16, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Creditors should only be allowed to call between the hours of 9am until 7pm local time unless they have written consent (maybe even a web form) that gives them a minimum 3 hour window in which to call.</AC1><AC2> Additionally, they are limited to 3 phone calls a day maximum.</AC2><AC3> If they leave a message they should be required to leave the name of the company, the name of the representative, the number to call, and a reference number.</AC3><AC4> In regards to debt sales, the entity selling the debt should give 90 days notice of the intent to sell giving the consumer notification of the intent to sell and maybe even offer a settlement amount.</AC4><AC5> The entity purchasing the debt must honor any and all terms of the debt they are purchasing (i.e. payment plans, deferment/forbearance, etc.).</AC5><AC6> My brother has several private student loans.</AC6><AC7> About a year ago we started getting phone calls from Discover in regards to student loans and we all assumed that it was a sales call because no one living at my address had student loans with them.</AC7><AC8> Eventually we managed to be home when they called </AC8><AC9> and we discovered that two of my brother's loans were sold to Discover </AC9><AC10> and he was never notified.</AC10><AC11> So all this time thinking it was a sales call, because Discover only gave a 1-800 number to call about student loans and not even the name of the person they were trying to reach, his loans were actually in default </AC11><AC12> because Discover cancelled the forbearance he had upon purchase.</AC12><AC13> When he attempted to put them back into forbearance, Discover told him they \"didn't have a system for that yet\".</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The courts should also mandate that if a debtor has reached out to the creditor in an attempt to negotiate the creditor must continue to try to reach a settlement rather than seeking judgment against the debtor.</AC1><AC2> Also, the collection agency should not be able to add interest on top of debt that seek judgment for if the debtor agrees to pay </AC2><AC3> since they will make a profit over what they paid the original creditor.</AC3><AC4> Basically these so called \"attorneys\" (just another form of ambulance chaser in my book) are just forcing bankruptcies upon people who would be willing to work a deal </AC4><AC5> and then they and the courts and the government are whining about what the bankruptcies do to the economy and the bottom line.</AC5><AC6> Last time I checked even in a court of law you can't play both sides.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A lot of excellent points made by MLegz13.</AC1><AC2> My elderly parents needed help with day to day activities even if they were too proud to say anything.</AC2><AC3> I stopped my award winning video business to be their CareGiver.</AC3><AC4> Once the savings ran out, I had to default after 15 years of having a perfect credit card payment history.</AC4><AC5> The debt collectors were constantly accusing me of being a \"refuse to pay\" even though I said I acknowledge the debt but had no income at the moment.</AC5><AC6> It is this type of scenario that requires debts be frozen where they were at the time of default and in exchange the debtor agrees to pay off the debt, even if the initial monthly payments are just for a couple of dollars.</AC6><AC7> What this does is free the debtor's phone lines so they can completely focus on moving forward rather than engage in pointless rat a tat with repetitive debt collection callers.</AC7><AC8> It's why I started the Debt Neutrality Petition as well.</AC8><AC9> If you click on the link PLEASE read the comments left by some of the 500 plus people who have signed the petition.</AC9><AC10> Even a debt collector signed the petition, their comment speaks volumes of truth, as did all the others as well.</AC10><AC11> Debt Neutrality Petition. __URL__</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6], [7, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>How about allowing arbitrators to not be bound entirely by the law, but also by common sense when it comes credit card defaults?</AC1><AC2> Common sense tells us that if a Colorado flood washes away a community, those in the community are possibly not going to be able to pay their credit card bills for a few months.</AC2><AC3> Common sense tells us that a medical emergency, being the victim of a hit and run accident, destruction of a home, or becoming an unpaid CareGiver for a family member should take precedence over the monthly payment requirement. </AC3><AC4> This is not about debt forgiveness, </AC4><AC5> its about declaring a debt neutral, no more penalties, fees or interest rate charges are applied to the debt, and the debtor agrees to pay off the debt in a reasonable manner, even if it takes 10 years to do so.</AC5><AC6> __URL__</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>With a fully communicative voicemail identifying the purpose of the call I think one call is quite diligent.</AC1><AC2> If they choose to call and leave no message then they might as well have done nothing.</AC2><AC3> At least this way their message is being delivered.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The national database and licensing would be a good idea if it were used effectively to weed out the bad collectors and put them (and their corporate officers) out of business permanently. Not those who get caught up in technical violations over mini-Mirandas, but the ones who knowingly commit serious violations of the FDCPA, FCRA, and TCPA.</AC1><AC2> As Tfleeman noted in his very insightful comment above, the \"private policing\" we have now has not been effective in stopping the worst abuses.</AC2><AC3> As for the main topic of this page, I think it's far better for a collector to leave a voicemail (with clear identification of the caller and callee) than to call the same number 50 times without leaving a message.</AC3><AC4> The rules should encourage this rather than frustrate it.</AC4><AC5> So, I would favor option #1, with the mini-Miranda deferred until the collector is sure he is talking to the right person.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [3, 2], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would have to point out that there is many complaints in regards to how abusive or harassing debt collectors are according to consumers.</AC1><AC2> As a third-party debt collector, I receive dozens harassment complaints daily.</AC2><AC3> I would just like to note that 80% of the time, these consumers that my fellow co-workers and I come across, are complaining of harassment and abuse;</AC3><AC4> and 100% of them are truly just unwilling to face the facts.</AC4><AC5> That's what they are complaining about.</AC5><AC6> When we tell them that they owe a debt, they consider it harassment and abuse.</AC6><AC7> They just don't want to hear their problems.</AC7><AC8> Yes, grant it, there are some debt collectors that are harassing and abusive, but the other 98% are just pointing out the truth.</AC8><AC9> When consumers realize that it is them and not us, debt collectors would receive a better reputation.</AC9><AC10> But until then, we are the enemy in the consumer's eyes.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 5], [6, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The majority of the time, when a debt has been paid off, it has been paid to the client, not the collection agency.</AC1><AC2> Most of that time when that debt has been paid to the client, the client neglects to report it to the agency.</AC2><AC3> So the collectors continue to call on a paid debt that they have no knowledge of.</AC3><AC4> It's really not the collectors fault, it is generally the client's.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [2, 1], [3, 0], [3, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If a debt is to be turned over to a collection agency, the owner of the debt should be required to send a fully itemized statement to the debtor.</AC1><AC2> The statement should have a large-type header, something like, \"[NAME OF CREDITOR] IS TURNING THIS DEBT OVER TO [NAME], A DEBT COLLECTION AGENCY.\"</AC2><AC3> This would give the debtor another chance to pay in the simplest way, before getting tangled up in idiot phone calls,</AC3><AC4> and it would help the debtor identify the debt.</AC4><AC5> The debt owner already has the itemized bill;</AC5><AC6> it would be just a matter of copying it again and sending it.</AC6><AC7> there should be a requirement that the original creditor make a true, good-faith effort to contact the debtor.</AC7><AC8> I've dealt with those who do this, and those who don't.</AC8><AC9> Some will send you a bill, and then when they get no answer, call you and check the address, which is often wrong.</AC9><AC10> Some, it seems, hardly wait for the ink to dry on their first bill before they turn it over to collection.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [0, 3], [0, 5], [5, 4], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My experience is only with medical bills.</AC1><AC2> The debt collectors seem only to know (a) what hospital and (b) how much.</AC2><AC3> When you've been doing the hokey-pokey from emergency room to nursing home and back again over a period of months, that information is not much help.</AC3><AC4> What's really needed is an itemized bill that's a lot clearer than the \"statement of benefits\" we get now. Something as clear as: \"You were in X hospital on this date. You had this test and that test. They cost a gazillion dollars, but we bargained them down to $17.48. Please pay this amount.\"</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 1], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Wow, I didn't even know we had those rights</AC1><AC2> except for the one about the workplace, they're all news to me.</AC2><AC3> So I've no experience,</AC3><AC4> but my guess would be that the debt collectors would rather not receive this information.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think probably the benefits of giving debt collectors and buyers access to these documents would NOT worth the costs unless the documents have to be included with the validation notice.</AC1><AC2> If the debt collectors were anxious to be sure they had the right debtor, sure, great.</AC2><AC3> But I don't think they are.</AC3><AC4> The actual guy on the phone is only anxious to get the money;</AC4><AC5> he doesn't really care where it comes from or whether the debt is legal.</AC5><AC6> Giving him the information, without giving it to the debtor, probably wouldn't be much good.</AC6><AC7> And maybe I'm being unfair.</AC7><AC8> Maybe these companies are strict about making sure the debt is collected from the right person.</AC8><AC9> Naaah....</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 5], [2, 4], [4, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The main problem with privacy is that we use the SS# for everything, so everything can be connected.</AC1><AC2> That's been a bad idea since they started using it as a taxpayer i.d.</AC2><AC3> It probably prevents a little fraud,</AC3><AC4> but it's not worth it.</AC4><AC5> We have, in effect, made it illegal to be untraceable--not a good thing for victims of domestic abuse, among others.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 4], [1, 4], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I generally prefer e-mail to telephone communication,</AC1><AC2> but you can't be sure the e-mail has reached the person.</AC2><AC3> I would suggest a notice that says, \"If you don't acknowledge receipt of this e-mail, we'll start phoning you.\"</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Payment processor Visa has general information and the corresponding state statutes about the 10 states that prohibit companies from charging credit/debit card fees located on their website.</AC1><AC2> Texas, which most people would think would be business friendly, is actually really consumer friendly when it comes to these fees, for example.</AC2><AC3> Texas has had a long-standing state law against credit card fees, and just recently this year created a new state law to cover against debit card fees and other stored value cards (like prepaid debit cards).</AC3><AC5><AC<AC6>4> <AC7>__<<AC8>/A</A</AC7>C6>C5>URL__</AC4><AC5><AC<AC6>4> <AC7>__</A</A</AC7>C6>C5>URL__</AC4><AC5><AC<AC6>4> <AC7>__</A</A</A</AC8>C7>C6>C5>URL__</AC4><AC5><AC<AC6>4> <AC7>__</A</A</A<AC9>C7>C6>C5>URL__</AC4> And, no, I do not have any knowledge of if debt collectors are charging debtors payme</AC9><AC10>nt processing fees or not, but if they are--especially in the states that forbid this practice--they should not be allowed to do so. And I further believe that in the remaining states that do not h</AC10>ave any laws forbidding credit/debit cards surcharges, that a fed reg/law should forbid debt collectors in all states from doing so.\n### Here is the list of pairs of related argument components in this paragraph: [[0, 3], [0, 4], [2, 5], [2, 6], [1, 2]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"evidence\", \"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yes, I am also concerned with whether or not collectors should identify themselves in a message, or if they should be more general in identifying who they are in a voice message as to not invade the privacy of the debtor for whomever else may share the same answering machine or otherwise may over hear the message.</AC1><AC2> So far, I have purposely remained neutral on this matter</AC2><AC3> because I have yet to form an opinion.</AC3><AC4> I can see both sides of the arguments.</AC4><AC5> I think I lean more to wanting the collectors to be more discrete and general about who is calling,</AC5><AC6> but I still am not sure.</AC6><AC7> The big concern that is more concrete is definitely the phone number caller id,</AC7><AC8> in that it should be the true number of the business and (if a message is left) should also be the call back number.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [2, 3], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have found, on numerous occasions, that the debt collection process allowing firms purchasing debt - for pennies on the dollar - often use intimidating tactics that can easily be considered extortion.</AC1><AC2> Every time a deb t collector purchases an old, out-of-date debt, they re-file the debt with the credit bureau(s).</AC2><AC3> This continues the credit report damage for years - sometimes decades.</AC3><AC4> As a mortgage banker, those persons often find it impossible to secure a mortgage and realize the American dream of home ownership.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think I do kind of like this idea.</AC1><AC2> This designated database/website could also list Summary of Rights for state laws and Fed laws.</AC2><AC3> Then this same website might also be able to be used as a way to report abusive behaviors (or link to the appropriate websites to do so), and other relevant information for consumers regarding consumer debt, credit, and credit reports, and other various useful information that is currently available but is spread across many agency websites.</AC3><AC4> The website could be paid for and maintained by the debt collectors (sort of like how annualcreditreport.com is paid for and maintained by the credit reporting agencies).</AC4><AC5> It could be a way to help bring legitimacy to the debt collection industry by having a way to identify them to separate the legit companies from the bad ones while allowing collectors to operate effectively.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Please include calls to family and friends of debtor.</AC1><AC2> We are called frequently to pass on messages for people that have our last name, some of them we don't know.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I often get robo calls about family members debt, sometimes 3 or 4 a day, usually for family members that I haven't spoken to for decades.</AC1><AC2> I am not sure how they get my phone no.</AC2><AC3> as it is unlisted and I am sure the family members don't have it.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Mslade, you have some valid points about the confusing Foti rulings,</AC1><AC2> but I think you are wrong about the TCPA.</AC2><AC3> This law has always applied to debt collectors, politicians, and even charities with respect to cellular phones.</AC3><AC4> And it's not just one judge who has ruled in this way.</AC4><AC5> The FCC and the courts have repeatedly affirmed it.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Tiffany, I think part of the problem is that the 2% of collectors who harass and abuse are responsible for a disproportionate share of the contacts that consumers have with your industry.</AC1><AC2> Everyone (whether they owe a debt or not) has had an encounter with one of these bad apples,</AC2><AC3> and then they want to take out their anger on you.</AC3><AC4> And when you make an honest mistake and get sued for a technical violation, you pay the same penalty as a company that has deliberately harassed someone with 100 phone calls.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My daughter has both private and federal loans through Sallie Mae.</AC1><AC2> They call her cell phone and my cell phone daily, at least 10 times a day.</AC2><AC3> They called me,</AC3><AC4> by the way, they do not have her permission to speak with me, and tell me to stop paying her federal loans because they can be deferred and pay the private loans.</AC4><AC5> My daughter owes 176000.00 in private loans and can't afford to make the payments that they are asking for.</AC5><AC6> They called her employer requesting information on her.</AC6><AC7> She sent a letter and requested that they only contact her through email and US mail.</AC7><AC8> When they called me I asked them if they received this</AC8><AC9> and they said yes but they need to be able to talk to someone.</AC9><AC10> Well, they don't have my number as a contact number.</AC10><AC11> I told them and they still call my cell phone daily.</AC11><AC12> My daughter can barely pay the bills she has now.</AC12><AC13> I help her pay her private loans.</AC13><AC14> I am not on any of her loans.</AC14><AC15> This harassment needs to stop!</AC15>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>All? It's just not so.</AC1><AC2> Maybe retailers do;</AC2><AC3> I have no experience with them.</AC3><AC4> But medical billers are consistently mistaken, careless, and just plain wrong.</AC4><AC5> One medical facility called my daughter-in-law's cell phone about a bill for my mother!</AC5><AC6> They had her number as, I think, the fourth emergency number.</AC6><AC7> And this was a GOOD place, that actually tried and finally managed to get in touch with me.</AC7><AC8> I was very pleased with their billing department, compared to others we had dealt with.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I see what you mean,</AC1><AC2> but that tiny percentage suffers incredible annoyance and harassment.</AC2><AC3> Should they pay what they don't owe, merely to get out from under?</AC3><AC4> All we've ever asked for is an itemized bill from the original creditor,</AC4><AC5> but the collectors act as if that's too much.</AC5><AC6> And they say--and probably believe--that we've received other bills, </AC6><AC7> but we haven't.</AC7><AC8> We've lived in the same place for 30 years</AC8><AC9> how awful it must be for people who move a lot.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[8, 5], [8, 6], [8, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yep, that's right.</AC1><AC2> Isn't the point supposed to be to collect the debt?</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The state in which I practice does not allow jurisdiction based solely on where the contract was signed.</AC1><AC2> As such, we limit our filings to the venues where we reasonably believe the consumer resides.</AC2><AC3> The states typically define what is the proper court thereafter, whether its based on amount, location, etc.</AC3><AC4> so even if there is a large judicial districts we do not have the choice to file elsewhere by local rules.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am sorry to hear about this situation.</AC1><AC2> This kind of abusive behavior is upsetting to hear as a consumer.</AC2><AC3> They don't need to \"speak\" with anyone.</AC3><AC4> You/your daughter are perfectly within your legal rights to ask the phone calls to stop and to communicate by other means.</AC4><AC5> And the collectors who are refusing to honor this request is in violation.</AC5><AC6> Moreover, they should not be contacting you</AC6><AC7> nor they should be contacting you/your daughter 10 times a day.</AC7><AC8> This is clearly excessive and abusive.</AC8><AC9> I would like to also mention, that although they do have a point about the federal loans can usually be placed into deferment,</AC9><AC10> debt collectors are not fiduciaries</AC10><AC11> and are not acting with nor are capable of providing financial advice that is in the best interest of the consumer/debtor.</AC11><AC12> The collectors will say anything and do anything just to get paid.</AC12><AC13> They should not be allowed to offer advice on what bills to pay and how to pay them.</AC13><AC14> This sort of \"advice\" can be detrimental to consumers/debtors.</AC14><AC15> Perhaps the CFPB should allow collectors to offer referrals on financial advice,</AC15><AC16> but they should not allow collectors to outright give financial advice.</AC16>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [6, 7], [12, 11], [12, 13]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt collectors file a large number of default judgments </AC1><AC2>because quite simply consumers do not take action, not because they are unaware of the issue.</AC2><AC3>Usually at the time a lawsuit is filed, a debt collector has attempted to resolve the issue via telephone calls and/or letters.</AC3><AC4>This doesn't even include the efforts the original creditor may have made.</AC4><AC5>A lawsuit is never a first response.</AC5><AC6>It is usually done after numerous and repeated failed efforts to work with a consumer to resolve an outstanding debt.</AC6><AC7>A default judgment is just a further extension of that.</AC7><AC8>Even after we file suit, we may attempt to reach the consumer to resolve the lawsuit prior to judgment being taken.</AC8><AC9>I have seen numerous files where we have spoken to the consumer and told them they can file an answer, and they still don't.</AC9><AC10>In my opinion, default judgments are largely the result of consumer's deliberate uninvolvement with the process, rather than a collector taking deceptive steps.</AC10><AC11>I will state that many states have local rules that if there is no response to a summons and the consumer has defaulted, they do not need to be noticed on a motion for a default judgment.</AC11><AC12>Therefore, the actual entry of the judgment may in fact come as a surprise, despite the summons stating if you don't answer a judgment may be taken.</AC12><AC13>However, an attorney who follows the local rules is not acting deceptively.</AC13><AC14>In order to curb this shock for the consumer who doesn't answer, it wouldn't be bad to require all motions for judgment be served upon the consumer, despite local rules which may require otherwise.</AC14><AC15>I would point out, many default judgment motions are not noticed for motion hour.</AC15><AC16>They may simply be submitted for a ruling without a court hearing.</AC16><AC17>As to the inquiry as to what is required to support a default judgment, this varies court to court and judge to judge.</AC17><AC18>The courts that I have seen require more documentation are largely looking for affidavits of debt, charge off statements and statement showing payments or charges, and the assignment (if the plaintiff is a debt buyer).</AC18>\n### Here is the list of pairs of related argument components in this paragraph: [[16, 17], [0, 1], [4, 5], [11, 10], [14, 15]]", "output": "{\"relation_types\": [\"evidence\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would like to see requirements that the consumers are required to provide written notice of any new addresses for the creditor to reach them</AC1><AC2> so in the event the account does go into default, the creditor has current information to attempt to contact the consumer.</AC2><AC3> Many consumers move frequently, yet fail to update the creditors</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe that this practice in already in place in three major ways.</AC1><AC2> The creditor usually already requires all of their customers to provided updated contact information,</AC2><AC3> Once a consumer moves the address change and other contact information changes are updated on the consumers credit report,</AC3><AC4> and finally, The USPS has records of mail forwarding procedures once a consumer moves.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>From a creditor's standpoint, I generally agree with this comment.</AC1><AC2> I think a good validation notice could answer a lot of the consumer's question.</AC2><AC3> I think the author of the above note had some very well reasoned thoughts.</AC3><AC4> I wouldn't go so far as to add that an itemized statement must be provided, particularly if one might not be available (perhaps because of record retention rules or because one simply may not exist),</AC4><AC5> but providing information as to the type of account, brand name of the original creditor issuing the account, the account number, the date of last pay, and the name of the party from whom the debt may have been purchased would help.</AC5><AC6> Providing documentation at the get go seems rather unneccessary and costly, particularly if the wording of the letter allows the consumer to readily identify the account, and the disclosures allow the consumer to request documentation for validation.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [3, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Alternative one is the easiest to communicate and probably the easiest to understand.</AC1><AC2> Accouting systems will vary from creditor to creditor</AC2><AC3> and requirements beyond this would only become more cumbersome and costly for a creditor and more confusing for a consumer.</AC3><AC4> I would not have the breakdown be different for different types of credit extended.</AC4><AC5> Computers and brains all across America will start smoking.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>You raise an issue that has two distinct definitions: \"sent\" and \"received\"</AC1><AC2> I don't think that any consumer wishes that they \"receive\" a notice that wasn't \"sent\" in the first place.</AC2><AC3> In addition, letters and parcels get lost in the mail all the time.</AC3><AC4> If there is a requirement for a credit/collector to \"send\" the notices you are referring to, the first place to send them are going to be an address that is on file.</AC4><AC5> If the letters then get returned, then you would know that they are not at the address that is on file.</AC5><AC6> But the letters have to be \"sent\" in the first place.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>You are correct.</AC1><AC2> There is quite a difference between send and receive.</AC2><AC3> All I am suggesting is that a creditor only be required to send any notice to the last known address - not that the consumer receive it.</AC3><AC4> and you presume too much if you think that all mail is returned if not delivered to the proper recipeint),</AC4><AC5> then the creditor must send the notice to that new address.</AC5><AC6> If the point of this dialogue is to ensure the consumer is protected, then require the consumer to protect themselves and provide this information to the creditor.</AC6><AC7> If they don't then a creditor can't be hanged in a lawsuit for a letter failing to reach a consumer, when the creditor actions used the best information on hand.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Sorry, but you are mistaken about debt collectors not being able to change information in your credit file.</AC1><AC2> Yes, they can,</AC2><AC3> and yes they do.</AC3><AC4> If my account has been sold (several) times to other people, and my original creditor no longer owns the account, then how would my account be (updated/reported) by that company (debt collector) that purchased it?</AC4><AC5> And, yes they (the person furnishing) the information to the credit bureau can and do supply credit bureaus with fraudulent information.</AC5><AC6> That's how Debt Collector's get sued in the first place.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree.</AC1><AC2> Most creditors already have this information in contracts and other correspondence to the debtor.</AC2><AC3> This additional notice is unnecessary would be cumbersome and costly.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>this is not necessarily true.</AC1><AC2> There are services that text and the sender pays for the text.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I had a 19 year old debt come back to haunt me</AC1><AC2> I went to three attorney's to attempt to pay them to \"talk\" to the company, as the information I was given, would not call me back after leaving several messages, along with an offer to settle it for slightly more than one-half of what they claimed I owed.</AC2><AC3> This debt went from around $1200 up to $9,300 in those 19 years.</AC3><AC4> This type of behavior must be regulated</AC4><AC5> it is only out and out a scam.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Once companies have sold the debt to a collection agency they do not help resolve it in any way</AC1><AC2> and the collection agency is only interested in getting money not whether the debt is real or there were some mitigating circumstances.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The most important would be not to call at work.</AC1><AC2> That's really the most important to the collectors, too,</AC2><AC3> because a person out of work isn't likely to pay.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe most default judgments occur for one reason: the consumers know they owe the debt and see no reason to prolong the situation.</AC1><AC2> Many consumers will call us and make payment arrangements after being served.</AC2><AC3> We advise them they have the opportunity to be heard in court but most decline.</AC3><AC4> They simply want to resolve the debt.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My experience is the collection agency will not correct the debt on the credit report!</AC1><AC2> we need a law requiring the collection company to report debt repayment or debt settlement to the credit bureau in a timely manner... Say 30 days after the debt has been settled, or payment arrangements have been made.</AC2><AC3> It can be very hard to clean up your credit when working with collection companies...</AC3><AC4> they want their money but they don't care if your credit report is accurate!</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Massachusetts has this right.</AC1><AC2> There need to be strict and enforceable limits on the number of times a collector can call during the week.</AC2><AC3> I've received as many as 40 calls over a 5-day period from Citicards and calls every 50 minutes at work during the day by Wells Fargo.</AC3><AC4> THIS IS SHAMEFUL</AC4><AC5> AND THIS FREQUENT REPEAT CALLING HAS TO BE STOPPED BY LAW!</AC5><AC6> Those of us who are in debt know it and don't have to be reminded over and over again.</AC6><AC7> Calling numerous times per day or per week won't get the debt paid any faster.</AC7><AC8> If you explain that to the collector on the other end of the phone, they blame the repeat dialing on their computers.</AC8><AC9> Now that's lame.</AC9><AC10> The computers can be programmed to call once a day or a hundred times a day.</AC10><AC11> Once is enough.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [4, 3], [6, 5], [8, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Please READ this article about global debt.</AC1><AC2> Enforcing the existing debt collection paradigm simply legitimizes and illegitimate system.</AC2><AC3> PLEASE DO MORE than that,</AC3><AC4> Please LEVEL THE DEBT PLAYING FIELD.</AC4><AC5> GLOBAL DEBT ELEPHANT IN THE ROOM. __URL__</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 4]]", "output": "{\"relation_types\": [\"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would suggest that debtors who INVOLUNTARILY defaulted on a debt don't have the money to hire an attorney,</AC1><AC2> so they don't see the point to going to court without an attorney.</AC2><AC3> Why doesn't the court give access to free legal counsel to debt defaulters the way they do to those who are accused of committing a crime?</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The CFPB doesn't need to craft rules to encourage non-litigation alternatives or not to sell to those who utilize litigation models.</AC1><AC2> BillBartmann's data is suspect as to 10M lawsuits filed yearly and likely his models comparing litigation and non litigation data has not been published.</AC2><AC3> The facts are consumers need to reach out and communicate to a lender, agency, or debt buyer rather than not communicating at all.</AC3><AC4> Debts not repaid usually result in the debt being charged off </AC4><AC5> so the consumer had a minimum of 180 days to seek alternative repayment options.</AC5><AC6> Lenders, collection agencies and debt buyers have a right to sue a legal debt just like the IRS.</AC6><AC7> Keep in mind that judgments last longer than open credit accounts looking at statute of limitations.</AC7><AC8> To BillBatram's comment that filing bankruptcy creates hell as far as FICO scores, consumers face that issue with non payment of debt</AC8><AC9> and bankruptcy is an alternative for a consumer to have a fresh start.</AC9><AC10> That was the intent of the bankruptcy law and still is.</AC10><AC11> Consumers with little or no hope to repay debts care more about moving forward with their lives instead of worrying about FICO SCORES.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [4, 3], [8, 9], [9, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think your idea is an excellent one.</AC1><AC2> My concern is that it might force interest rates even higher.</AC2><AC3> Ideally, there would probably be less overall defaults if consumers, when first getting credit were required to pay at least 5% of the total due each and every month.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My deceased daughter(she passed 2 years ago) had some debt.</AC1><AC2> We continue to receive calls from debt collectors even after we have asked them not to call us anymore.</AC2><AC3> My wife has filed complaints with the Oregon State Justice dept. to complain about the harrassment.</AC3><AC4> Why can't these collectors do their research on the debtor, before they harrass the parents!!</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>These are all excellent suggestions</AC1><AC2> but they don't address people who are incapable of paying down the interest bearing debt in a timely manner but could pay it down in a longer manner and if no more interest rate charges were accruing.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>and if you remain skeptical, please check out this article by a completely independent source about global debt.</AC1><AC2> Global Debt Elephant in the Room. __URL__</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Larry S, your quote...\"A plaintiff in a lawsuit cannot be placed in a situation where it is rewarding to sue with insufficient cause and minimal risk\" is a very powerful statement and one that I entirely agree with.</AC1><AC2> It is this scenario that emboldens debt collectors to hire riff raff service companies who will lie about doing a legal service or sub service, and apparently get away with it.</AC2><AC3> I have been victimized by two false subservices.</AC3><AC4> I think both were done by the same service company.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"evidence\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have been falsely subserved twice.</AC1><AC2> Both times resulted in verdicts against me.</AC2><AC3> Thank you for taking the time to express your viewpoint, which should carry a LOT OF WEIGHT</AC3><AC4> since you are in it at the ground level.</AC4><AC5> If I had not been falsely subserved, it is possible that the debt collector would have been more humbled and more amenable to my extremely generous offer of agreeing to the pay the debt in full based on what it was at the time of the default, as long as I could start with a very low monthly payment and build it up over time.</AC5><AC6> And as along as I was honoring my word, the debt would no longer be reported negatively on my credit report.</AC6><AC7> But I never got that far</AC7><AC8> because the debt collection companies simply hired someone who would deliver a service, no questions asked as to its legality.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Jeffreyjon, it sounds like you are identifying how a strategic defaulter acts.</AC1><AC2> However, Involuntary Defaulters don't have the income available to pay down a debt if the interest rate charges are going to keep accruing.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>By the time a file reaches litigation, the debtor has already received at least one prior opportunity to resolve the debt with the collector (the initial demand letter, which by law must inform the debtor of his/her right to challenge the veracity of the debt being pursued).</AC1><AC2> By making default judgment more difficult, the CFPB would only be rewarding the debtors who choose to take no action to resolve their complaints.</AC2><AC3> Furthermore, the CFPB arguably has no authority to impose new, more burdensome requirements upon litigants in state court fora.</AC3><AC4> Doing so would constitute an admission that state court rules of civil procedure deny due process in other types of proceedings that are not granted the \"benefit\" of Federal oversight.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It is unwise to require that the debt collector send sensitive personal information to the debtor (e.g., SSN, account number</AC1><AC2> as such a requirement would expose the debtor to the danger of ID theft.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>For attorney debt collectors, being required to provide a list of all the rights the consumer may have comes perilously close to the provision of legal advice;</AC1><AC2> even if it doesn't cross that line, the unsophisticated debtor may believe that an attorney is acting as a neutral court officer rather than as an advocate for an adverse party.</AC2><AC3> I've had debtors ask me \"Do I need to come to court for this?\" after I've sued them.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Several courts have held\"and the [FTC] and the [CFPB] agree'that a collector who sues or threatens suit on a time-barred debt violates the FDCPA.</AC1><AC2> The FDCPA prohibits, among other things, the use of \"any false, deceptive, or misleading representation or means in connection with the collection of any debt.\" </AC2><AC3> These include making a false representation of 'the character, amount, or legal status of any debt,\" threatening 'to take any action that cannot legally be taken or that is not intended to be taken,\" and \"using any false or deceptive means to collect or attempt to collect any debt.\"</AC3><AC4> __URL__</AC4><AC5> It is in fact your gross distortion of the law and misunderstanding to claim that SOL are a defensive mechanism to allow a plaintiff \"to avoid being disadvantaged\" for not filing a lawful suit within a lawful time frame.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 3], [2, 3], [0, 1], [4, 0]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As I frequent many of the consumer credit forums,</AC1><AC2> I will tell you that most consumers do think that a debt can still be brought to court when the receive contact past the SOL.</AC2><AC3> And others I have run into also still get contacted even after the 7 year mark when the debt has finally dropped from their credit report.</AC3><AC4> In fact, just the debt dropping off from the reports that has otherwise been dormant will get an automatic response from debt collectors.</AC4><AC5> It seems they purposely wait for it to drop off and then pounce to instill fear. As in a \"gentle\" reminder that they are still there.</AC5><AC6> They act like sharks in the water circling their prey.</AC6><AC7> And the consumers bring up questions like \"when will this end?\" and \"I thought the debt wipes out after 7 years, why are they still contacting me?\"</AC7><AC8> Something needs to be done about this.</AC8><AC9> SOL are SOL for a reason.</AC9><AC10> Debt collectors should not be able to harass and harass and harass.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [9, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A marital spouse is no longer a marital spouse when either martial partner dies.</AC1> To death do us part.<AC2> The end is death.</AC2><AC3> A spouse doesn't remarry while still married,</AC3><AC4> but unmarried people will remarry.</AC4><AC5> A divorced spouse or a widowed spouse, may become the spouse of another once remarried.</AC5><AC6> The term spouse, in my opinion, relates to a marriage.</AC6><AC7> Once the marriage is over, the \"spouse\" is no longer a \"spouse.\"</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [4, 3], [6, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>After offering documentation that I didn't owe a debt, the collection company ignored what I offered as proof and continued to try to collect the debt</AC1><AC2> even stated they didn't care that I didn't owe it.</AC2><AC3> They should be required to investigate and respond in writing to a consumer's defense,</AC3><AC4> so a follow up can be made, or complaint filed with a governmental agency.</AC4><AC5> Documentation should also follow the claim </AC5><AC6> as collection companies sell their lists to new companies.</AC6><AC7> Better, no documented defense of a claim should be eligible for sale until resolved.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 13, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt collectors should announce themselves and refrain from acting like: investigators, attorneys, or hitmen.</AC1><AC2> There needs to be an enforced code of behavior that represents a professional on the other end of the phone.</AC2><AC3> Most recently, my husband has been receiving threatning phone calls from a collector pretending to be a law enforcement investigator.</AC3><AC4> The most humiliating part is that the calls have escalated to his ex-wife, cousin, and associates.</AC4><AC5> He has a common name and the \"investigator\" has not properly identified himself or clearly identified if my husband is the right person that the debt belongs too.</AC5><AC6> In addition, the so called debt is 8 yrs old,</AC6><AC7> and they call from unknown numbers</AC7><AC8> or if the number shows up and it's googled there are comments stating that the persons calling are harassing.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 0], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Well, I get at least one call per week from a litigant saying \"I was served with a summons today, and it says I must appear within 10 (or 30) days to answer this complaint, but there is no court date on the papers for me to appear\",</AC1><AC2> and I have to tell them the procedure (and point out to them the blurb about you not physically having to come to court to answer).</AC2><AC3> I'm not sure how much clearer the wording in the summons has to be,</AC3><AC4> I understand them fully, and not just because I'm familiar with the forms,</AC4><AC5> I'm just smarter than the average litigant I have to deal with I guess.</AC5><AC6> The complaints do state that they have the rights to the debt, under verification that is notarized, at first...</AC6><AC7> but they cannot enter the default judgment unless they provide the affidavit signed by both parties who owned and now owns the debt, which is generally attached to their judgments.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was not the one with debt.</AC1><AC2> I was a mediator trying to help.</AC2><AC3> The people with this situation sometimes ignore the first notice to them and don't ask for a validation letter.</AC3><AC4> Others, I believe, do not read it carefully and see they have a small window of time to dispute the claim.</AC4><AC5> I think the original notice letter to the debtor should HIGHLIGHT the part about a validation letter.</AC5><AC6> I also, think the original creditor should be required to help resolve disputes instead of debtors or third parties like me only being able to talk with the collection agency.</AC6><AC7> Probably 50% of the agencies I have dealt with do not follow existing regulations.</AC7><AC8> Without penalties they never will.</AC8><AC9> The few that are reasonable and follow the rules are a pleasure to deal with, as a third party.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 2], [4, 3], [5, 6], [5, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Disputes are not investigated.</AC1><AC2> That is a joke.</AC2><AC3> Sending out a letter to whoever these debt collectors think is responsible for the debt is just rote -- it is not done in good faith or follow the letter of the law.</AC3><AC4> They 1) use vague names, no signature, post office boxes, a million aliases for their debt collection business</AC4><AC5> THAT practice has to stop).</AC5><AC6> The FTC says \"reasonable\" investigation but these companies do none,</AC6><AC7> and that is the standard practice.</AC7><AC8> A good start is having a realistic and fair and honest laws requiring the companies to verify debt without already having assumptions or worse, not caring if they have the right person or not.</AC8><AC9> Any rule change needs to carry some penalty</AC9><AC10> or it won't have any impact on an industry that has run roughshod over consumers now for two decades.</AC10><AC11> Abuses abound.</AC11><AC12> There also should be special requirements for validating medical debt because of privacy rights.</AC12><AC13> There seems to be no concern of violating people's privacy when it comes to medical debt collection activities.</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[8, 9], [11, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I had the same situation with another cellular carrier.</AC1><AC2> It seems it's a ploy to keep making the debt seem fresh.</AC2><AC3> It was another early termination fee,</AC3><AC4> and I wrote many letters before it was finally removed from my credit report.</AC4><AC5> I think that the tactic of selling the same debt to keep it on a credit report definitely should stop.</AC5><AC6> It is one debt,</AC6><AC7> and there is a time limit for how long it stays on one's credit report.</AC7><AC8> One way to keep track of this is to require people to be notified if a debt is sold.</AC8><AC9> It is required when a mortgage is sold.</AC9><AC10> It seems like a no-brainer.</AC10><AC11> The rules should also be written to discourage -- no, to bar -- collections companies from passing around debt for the purpose of keeping it on credit reports.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5], [4, 6], [7, 8], [7, 9], [9, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Well I do want to shout.</AC1><AC2> You've never been on the receiving end of a collections company that treats people like cattle with dollar signs on them, whether they owe money or not.</AC2><AC3> And it's been going on for years.</AC3><AC4> Shame that is the first comment to make to me.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I concur with previous comment.</AC1><AC2> If consumers are informed when our mortgages are sold that should be a rule across the board.</AC2><AC3> Sending a letter by mail isn't very expensive, either.</AC3><AC4> It should contain the amount, info on original debt, the name and address of who owns the debt and I'd even add the amount the debt was sold for.</AC4><AC5> Consumers can keep track for one thing, and make sure these debts are not posted twice on our credit reports,</AC5><AC6> it will let people know who to contact about the debt.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [3, 4], [3, 5], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think it should be kept uniform.</AC1><AC2> It seems to make sense for sellers to send notification.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Probably won't find any legislation</AC1><AC2> since people who have allegedly defaulted on a debt aren't necessarily going to tell the world, or create a lobby for their cause.</AC2><AC3> Debt Defaults and Debt Collections are a one sided issue in which judges have been constrained to simply determine if a default has occurred, or not.</AC3><AC4> The lawyers primarily work with strategic defaulters</AC4><AC5> because S.D.'s have some source of money or income available to pay both the attorney and a partial portion of the debt.</AC5><AC6> Involuntary Defaulters are left to fend for themselves</AC6><AC7> because they don't have money to pay a lawyer.</AC7><AC8> Debt Neutrality, in which an involuntary defaulter agrees they owe the debt and simply want's to be able to pay it down based on the amount the debt was at the time of the default, with no more penalties, interest rate charges, or fees, even if it takes 10 years to pay off the debt, would possibly alleviate a large amount of unnecessary court cases.</AC8><AC9> And of course, once the very modest initial payments were set up, the account would no longer register as a negative on a debtor's credit score or credit rating.</AC9><AC10> And to safeguard fraud, the debtor would not be able to keep borrowing larger and larger amounts of money until after their defaults were paid in full.</AC10><AC11> It's a very logical solution in my opinion.</AC11><AC12> Judges should be able to use logic to solve the growing backlog of credit card default cases.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [1, 2], [3, 4], [5, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The letter I received just said this communication is for the purpose of collecting a debt.</AC1><AC2> First, it was supposed to be a \"validation\" letter,</AC2><AC3> but they don't bother to validate</AC3><AC4> they jump the gun.</AC4><AC5> Communication is always the best way to avoid confusion,</AC5><AC6> so I don't think it would be a hardship on anyone to state clearly this is a debt collection agency/company</AC6><AC7> why use euphemisms.</AC7><AC8> And then to state unless such and such is paid by (whatever time frame is legal) this will be placed in collection.</AC8><AC9> I believe there is some rule now to that effect,</AC9><AC10> what I think the problem is, it is not handled consistently.</AC10><AC11> Each of these many many debt collectors do their own thing.</AC11><AC12> Some are better at communicating than others.</AC12><AC13> Some deliberately do NOT communicate, for deliberate reasons.</AC13><AC14> Crafting consistent rules and regulations should be the start.</AC14><AC15> And then actually requiring these companies follow them.</AC15><AC16> If you don't put teeth into it, none of these collection agencies will bother.</AC16><AC17> There are already rules.</AC17><AC18> But we are here because of lack of obeying the law, lack of ethics, lack of clarity in the law, and in my opinion, laws that are slanted against the consumer.</AC18>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 4], [6, 5], [9, 10], [10, 11], [10, 12], [14, 15]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I found an unsealed envelope in my mail box that had court documents in them.</AC1><AC2> I contacted the debt collection company and asked what was going on </AC2><AC3> since I had not been served.</AC3><AC4> They claimed a subservice had already been done to someone at my residence.</AC4><AC5> I explained that was probably not likely </AC5><AC6> because I am a Caregiver and I would have been the only one to answer the door and I did not get any service.</AC6><AC7> I had to pay to file a response and was late by one day, andthen had to challenge the default because of the non service.</AC7><AC8> The judge agreed that there had been no valid subservice </AC8><AC9> based on the fact that the service company used the most generic \"guess\" they could come up with, a women in her mid 30's to late 40's, around 5 foot 4 inches, weight around 130 pounds to 150 pounds.</AC9><AC10> That is about as generic of a description as one could give, </AC10><AC11> and it was completely wrong.</AC11><AC12> because that person did not exist.</AC12><AC13> They even made up a name of someone I had never heard of and when I googled the name, could not find it anywhere on the internet.</AC13><AC14> The second time a false subservice happened, a very similar description was given as the first time, </AC14><AC15> and the alleged subservice recipient was identified as \"Jane Doe\".</AC15><AC16> I would like to point how dangerous these lies are on another level.</AC16><AC17> I exclusively have been providing CareGiving services for my parents, no one else has.</AC17><AC18> By lying and introducing these lies into a court document, anytime in the future I could be accused of exposing my parents to a person at our residence who never even existed.</AC18><AC19> I was also somewhat frozen by this level of dishonesty</AC19><AC20> because on the rare occasion when I had to sue someone, I followed the law and had the service performed legally and properly.</AC20><AC21> I just expected the same in return</AC21><AC22> and by not getting it weakens one's ability to respond.</AC22>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [4, 5], [7, 8], [10, 11], [18, 19]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 8, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The data is difficult to obtain</AC1><AC2> and likely not attainable</AC2><AC3> considering lawsuits can be filed in magistrate, county, state, and federal courts.</AC3><AC4> Also the data could be inaccurate</AC4><AC5> since a case can be postponed and renewed later.</AC5><AC6> I do not know if there is any central data base for either court.</AC6><AC7> Also, lawsuits are filed in bankruptcy proceedings as well</AC7><AC8> so these would need to be considered as well.</AC8><AC9> This is why I am concerned when numbers just get tossed out without and substance verification.</AC9><AC10> Based on my experiences I would estimate about 1.5% of delinquent accounts were forwarded to filing a lawsuit.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [3, 4], [7, 6], [8, 0], [8, 1], [8, 3], [8, 6], [8, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is unreal.</AC1><AC2> Reading your \"if there is a new federal rule regarding messages...\" It seems like this agency is trying very hard to make it easy to get around the court decision which is one of the few that protected consumers,</AC2><AC3> and they also seem to try to protect the company that abuse the phone because what these people do is harassment.</AC3><AC4> They know it,</AC4><AC5> and they know how to do it.</AC5><AC6> They've gotten away with it for so long</AC6><AC7> because they answer to no one,</AC7><AC8> you've put the onus on the consumer to have to sue a debt collector who violates the law.</AC8><AC9> <AC1>This is un</AC9>real.</AC1>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 7], [5, 6], [6, 7], [8, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Why are these questions putting the onus, once again, one the consumer?</AC1><AC2> It is the collectors who have harassed in the name of collecting a debt.</AC2><AC3> It is pretty easy to distinguish landline from cellphone</AC3><AC4> google the number, that tells you.</AC4><AC5> But creditors use recorded calling,</AC5><AC6> that should be stopped.</AC6><AC7> If they have a well-trained person, that person ought to be able to determine the time zone the consumer lives in.</AC7><AC8> I agree with the previous comment.</AC8><AC9> Creditors should assume the current mailing address is the correct one.</AC9><AC10> How difficult is it to go from there in assessing the times that are appropriate to make calls?</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 3], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe that most Defendants are properly served.</AC1><AC2> I review about 200-300 civil cases a month</AC2><AC3> and very rarely is service done improperly.</AC3><AC4> This does vary a bit from state to state</AC4><AC5> but in my experience the majority of defendants have been properly served.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>What a great idea -- record them.</AC1><AC2> Reading these comments, there are so many examples of abuse, </AC2><AC3> it seems like this Consumer Protection agency ought to have gotten the message thus far: the phones are used to harass.</AC3><AC4> The only way to get this to stop is to put some teeth into the laws through civil fines,</AC4><AC5> not put the onus on the consumer to have to sue.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 3], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>They have done so.</AC1><AC2> I've gotten calls from the same collector who will use a toll free, then a number with an area code, then that number will be changed by a digit.</AC2><AC3> Google the number.</AC3><AC4> That is so helpful.</AC4><AC5> It will tell you the company that is calling.</AC5><AC6> It was always the same on.</AC6><AC7> I agree this is wrong, misleading, a fraudulent way to deal with people.</AC7><AC8> But the totality of all I am reading here is that collectors are harassing and do it by phone.</AC8><AC9> The thing to do is put some teeth into the laws that prevent this.</AC9><AC10> Now, the only thing consumers can do is sue.</AC10><AC11> And for $1000 -- and you'd be hard pressed to find a lawyer who will sue for such a small amount.</AC11><AC12> It has become a situation that slams the consumer,</AC12><AC13> it has evolved into that.</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [3, 4], [8, 11], [8, 9], [8, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The debt collector who harassed me did that number one on the \"three others\"</AC1><AC2> I got calls saying \"hey we'll settle for\" such and such.</AC2><AC3> It was a medical debt </AC3><AC4> and I was tempted to say why? </AC4><AC5> There is only going to be more medical debt.</AC5><AC6> When times are that difficult for people, making the mortgage and getting medicine takes precedence.</AC6><AC7> I don't think it should be legal for any of these things to happen,</AC7><AC8> and certainly not robo-repeat calling</AC8><AC9> but yet as you read these comments they are going on.</AC9><AC10> I hope this has a good outcome and there will be laws and fines for those companies that do this,</AC10><AC11> because what is available now, suing the debt collector, has not put a dent in their egregious behavior.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [9, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Email isn't easier to access or view off the debtor's screen than a call</AC1><AC2> a call's content is actually harder to hide if you receive it among other people),</AC2><AC3> text message or SMS.</AC3><AC4> The way regulation should handle sensitive information is by mandating that some information be an attachment, or in a link provided in the email, rather than the body of an email.</AC4><AC5> If the attachment is encrypted or details are stored on a secured web page, no one will be able to access them.</AC5><AC6> In fact, they will be much better protected than any other information relayed to the debtor.</AC6><AC7> Work emails should be handled differently, much like calls to a work place, which can also be accessed by the employer.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have a lot of concerns with emails.</AC1><AC2> Email clients have privacy/security settings that do not allow the sender to know if/when an email has been or was received.</AC2><AC3> The problem is that even with these privacy/security settings, senders are able to get around these settings.</AC3><AC4> This is widely used by spammers and hackers.</AC4><AC5> All of the spam experts all say not to open emails that are spam or potential spam, </AC5><AC6> because the spammers are so good at manipulating and getting around the privacy/security settings and force the recipients email client to inform the sender of when/if an email was opened.</AC6><AC7> Also, I do not like the idea that collectors can insert links in emails.</AC7><AC8> The more unscrupulous collectors and unscrupulous employees can insert links that are harmful to the security of the user\"s computers and offensive to the recipients (like pornographic material).</AC8><AC9> Just think about how many collectors still (even after all of the lawsuits) use offensive and abusive language over the telephone,</AC9><AC10> just think about what kind of harm these bad apples would be able to do with emails.</AC10><AC11> I also I do not like the emails </AC11><AC12> because of the ease with which collection companies can sell the email lists to marketers.</AC12><AC13> Many decades ago, one of my neighbors was a debt collector.</AC13><AC14> She would tell me that if they couldn't get money out of the debtors then we make money off of them by selling your address and personal information to marketing companies.</AC14><AC15> I have huge concerns for allowing collectors from using emails.</AC15><AC16> Any rules that allow collectors to use email should come with deliberate care and attention to the privacy/security, materials and content, and the restriction of selling email lists.</AC16><AC17> I also worry about true and accurate identification of emails.</AC17><AC18> Spammers/hackers are able to manipulate how emails are presented and the name of the email address that they send with.</AC18><AC19> there should also be rules restricting collectors are manipulating and spoofing their email addresses.</AC19>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5], [6, 7], [10, 11], [16, 17]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If emails are allowed, they should not be allowed to be sent outside of what is the acceptable time for phone calls.</AC1><AC2> I would like to restrict the time to inside normal business hours for the locale of the debtor,</AC2><AC3> because no business email should ever be sent from the office outside normal business hours.</AC3><AC4> This is basic and normal business etiquette for emails.</AC4><AC5> But a compromise could be made for what is accepted for phone calls.</AC5><AC6> However, I would like to see no emails sent on Sundays.</AC6><AC7> The USPS does not operate on Sundays</AC7><AC8> and neither should emails of a business nature.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [2, 3], [5, 6], [5, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree that of course an ideal situation would be for consumers not to pay.</AC1><AC2> But let's not let the perfect be the enemy of the good.</AC2><AC3> I was proposing some viable method that would result in an ability of a consumer to have a hearing.</AC3><AC4> Hearings cost money</AC4><AC5> and ultimately the collector would be assessed.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [2, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debtors often respond with \"I don't owe anything\",</AC1><AC2> which is vague and makes it harder to cater for their needs.</AC2><AC3> If any rule making is needed, it is about the types of disputes a debtor may bring forth and the documentation needed for both the substantiation of that dispute</AC3><AC4> leaving the option for a dispute to be deemed frivolous</AC4><AC5> and what constitutes satisfaction of the dispute or proper proof.</AC5><AC6> Otherwise, this is left for negotiation between individual collectors and debtors.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If you want to instantly level the playing field, make any credit card debt above and beyond the moment of default, disputable.</AC1><AC2> Disputability of any amount over the amount at the moment of default would instantly get both the credit card companies and the debt collectors working with the consumer on a reasonable plan going forward, no?</AC2><AC3> As it stands now, credit card companies can and usually do jump the interest rate up to as high as 29.9%</AC3><AC4> and may even let the account stay in default </AC4><AC5> as they rack up frequent default points on the debtor.</AC5><AC6> When I gave up my regional emmy award winning video business to become a caregiver for both of my parents, eventually savings ran out and I notified each of my credit card vendors ahead of any default.</AC6><AC7> NONE could offer me anything other than, \"pay your bill on time\".</AC7><AC8> If instead the credit card companies know that once the default occurs they cannot accrue any more penalties, fees or interest rate charges on the debt, they will bend over backwards to work with the alleged defaulter to get them to pay down the debt.</AC8><AC9> Citibank rate jacked my never late payment 15 year old credit card account by 5,000 dollars.</AC9><AC10> I dispute that amount of excess in lieu of why I had to default, but Citibank does not care, nor does the debt collector.</AC10><AC11> The amount of the debt reverted to what it was at the time of the default, you can bet citibank would be working hard to work with me.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [1, 2], [1, 3], [1, 4], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Why can't we bring back the olden days?</AC1><AC2> I have been a \"victim\" of debt collectors run amok for over 35 years.</AC2><AC3> Back in the day, a debt was assigned to one collector who would pursue me relentlessly for a debt that belonged to someone else.</AC3><AC4> Nowadays with the robo-dialers the collection call is assigned to the \"next available operator.\"</AC4><AC5> Why not just go back to the days when only one collector was responsible for making the contact?</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was sued for an alleged debt from 1993 by NYC landlord.</AC1><AC2> Judge denied him the 1600.</AC2><AC3> and then his real estate/collections attorney put me into collections </AC3><AC4> and the landlord got to write off a debt that was not a debt.</AC4><AC5> Great for these big landlords in NYC </AC5><AC6> as they play the corporate game and sue a tenant 10 times and write it off each and every time even though its not a valid debt.</AC6><AC7> Its a big deal in Manhattan.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It's a good question,</AC1><AC2> but unfortunately the answer is (of course) complicated.</AC2><AC3> Manually dialing phones slows down businesses and raises costs;</AC3><AC4> Automated dialing has preventive measures built in that manually dialing does not.</AC4><AC5> To expand on the first point, debt collectors are cost centers, meaning their primary goal is to minimize costs (i.e., delinquent monies).</AC5><AC6> An automated dialing system allows for a much more efficient manner of calling delinquent account-holders.</AC6><AC7> Representatives are able to review the account history and status while the system connects the call,</AC7><AC8> so the rep can quickly engage the customer.</AC8><AC9> If a customer has given their cell phone or home number to the lender knowing it may be used for future contact attempts, there is no difference to the customer if the call is executed through a computer or dialer on the keypad.</AC9><AC10> To expand on the second point, automated dialing systems have a lot of built in controls that actually protect the consumer.</AC10><AC11> People make mistakes, and so do collectors:</AC11><AC12> Automated dialers can have filters in place that restrict calls to customers based on location, time of day, or even how many attempts have already been made.</AC12><AC13> In addition, calls made through the dialer can all be recorded</AC13><AC14> so if there is a problem with the representative, the customer can refer back to the recording and the truth will come out.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 5], [3, 9], [5, 7], [7, 6], [9, 11], [9, 13], [13, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Additionally the landlords real estate attorney also had a collections agency</AC1><AC2> so he continuously flipped the landlords debts into his agency</AC2><AC3> and again the landlords get to keep writing it off with each and every lawsuit,</AC3><AC4> in this instance it was 8 lawsuits for the same amount.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I bet YOU never had your phone number programmed into a robo-dialer?</AC1><AC2> I can assure you that it's lots of fun.</AC2><AC3> Costs too much to do manual dialing?</AC3><AC4> Too bad.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't really care if manual dialing costs you more money.</AC1><AC2> You obviously have never been subjected to dozens of misdirected robo calls from debt collectors.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If you put an article about landlords and illegal lawsuits and collections, you would be flooded with responses.</AC1><AC2> It is an area of collections that is hidden from you but very prevalent in NYC.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree with anoymousme,</AC1><AC2> I am constantly called up to 5 times a day by numerous collectors for my kids bills.</AC2><AC3> Why should we have to bothered.</AC3><AC4> I gave my kids the message </AC4><AC5> but they ignore it.</AC5><AC6> They do not have a land line </AC6><AC7> so they call me!!!On NEWYEARS </AC7><AC8> I am dropping my land line which I have had for 40 years just to be rid of these pests!</AC8><AC9> How long are parents responsible for deadbeat children.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [6, 5], [7, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Only one out of my numerous collectors for my kids took me off their lists after I told them my son hasn't lived with me for over 20 years.</AC1><AC2> I also stated he owes me money also.</AC2><AC3> My other 10 collectors keep calling </AC3><AC4> but I quit answering </AC4><AC5> because I recognize their phone numbers.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I made a comment below and would like to know how to make them stop calling me for my deadbeat kids debt.</AC1><AC2> I tell them either I will pass on the info or that I have no contact info for them.</AC2><AC3> Only one collector took me off their list.</AC3><AC4> I am still being harrassed by 10 others.</AC4><AC5> I am being forced to drop my land line which I have had for 40 years to get away from them.</AC5><AC6> It really bugs me </AC6><AC7> because I have a near perfect score of 797 .</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 4], [4, 2], [4, 3], [5, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Most consumers have a bad taste in their mouth from the way that a select few agencies used to operate.</AC1><AC2> And rightfully so.</AC2><AC3> But look at it from the other side.</AC3><AC4> If i owed you $1,000 debt do you really think sending me a letter would do the trick?</AC4><AC5> Would you attempt to call me to find out my intentions?</AC5><AC6> My point is, agencies are operating under a pretty broad microscope.</AC6><AC7> Compliance with the laws is being monitored very closely now.</AC7><AC8> We view ourselves at my company as extensions of customer service.</AC8><AC9> If we call you, we specifically ask if we are calling a cell and if it is okay to reach you on that number.</AC9><AC10> If you say no, we remove the number.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 8, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Every validation notice should include, not only the name, but the address and phone number of the current owner of the debt.</AC1><AC2> It is not always the case that the consumer knows who the owner of the debt is, or how to contact them.</AC2><AC3> This would not be a burden on collection agencies,</AC3><AC4> because it would only require the collection agency to cut and paste the address and phone number of the debt owner onto the validation notice.</AC4><AC5> The collection agency should already have this information in their company records,</AC5><AC6> as the debt collector is forwarding consumer payments to said debt owner's address.</AC6><AC7> This would allow the consumer to attempt to deal with the debt owner directly to try to resolve the dispute.</AC7><AC8> For example, a case of mistaken identity can more easily be resolved by talking to a customer service representative of the debt owner, than by talking to a debt collector.</AC8><AC9> The debt collector has no authority to correct the mistake,</AC9><AC10> but a customer service representative of the debt owner does.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 6], [2, 3], [2, 4], [4, 5], [6, 7], [7, 8], [7, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Someone who lived at my address, more than 30 years ago had a debt with Household Finance.</AC1><AC2> We get letters that we return \"Addressee Unknown\" and phone calls.</AC2><AC3> Finally I called one number back and told them that the person they looked for wasn't there.</AC3><AC4> That law firm stopped robo-calling </AC4><AC5> but a few months later a new one started up.</AC5><AC6> Records should convey when debts are sold from collection agency to collection agency.</AC6><AC7> Why should I have to go through all that a second time?</AC7><AC8> I also think debt collectors should be prohibited from using the address to get a phone number after 2 years.</AC8><AC9> This debt was more than 30 years old</AC9><AC10> why do they think anyone who knew here would still live there?</AC10><AC11> I googled the woman's name.</AC11><AC12> I found out on the first search that she lives about 10 miles from here.</AC12><AC13> If I can find her that easily why can't a debt collector, who stands to gain something, be bothered to do a little research?</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 0], [5, 1], [5, 2], [5, 3], [5, 6], [7, 9], [9, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I assume by \"free to end\" you meant the agency is on the hook for the charges incurred on that particular call.</AC1><AC2> I think it would be well worth exploring.</AC2><AC3> We do have situations where the consumer doesnt have a landline and refuses access to their cell.</AC3><AC4> If we recieve a cease and desist order we note the account and return it to our client as such.</AC4><AC5> If a consumer simply asks not to be contacted via cell we will remove the cell and send a collection letter if it is within FDCPA guidelines.</AC5><AC6> Other solutions may be to send a settlement letter allowing the consumer to save money in an effort to resolve the issue.</AC6><AC7> The industry certainly didn't set a very good standard </AC7><AC8> and regulation is certainly needed.</AC8><AC9> I think the vast majotiry of us get the message loud and clear and are making sure we comply impicitly.</AC9><AC10> The effort needs to be two fold.</AC10><AC11> The consumers have to be willing to discuss the accounts and express willingness to pay.</AC11><AC12> After all, if everyone's debts were paid, there would be no need for a call.</AC12><AC13> And that's not meant to sound standoffish.</AC13><AC14> The simple fact remains at the end of the day, debts are owed and our clients want their money.</AC14><AC15> Consumers must share some of the responsibility.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [7, 6], [10, 11], [14, 13]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>What I had in mind when I made this comment was that some debtors are in debt because of a medical condition that has negatively impacted their ability to work.</AC1><AC2> They may be on Social Security disability for this reason.</AC2><AC3> Sometimes, that medical condition is scientifically known to be aggravated by stress, such as any heart condition, or an anxiety disorder.</AC3><AC4> Currently, Section 806 of the FDCPA makes abuse or harassment of debtors illegal.</AC4><AC5> However, what qualifies as abuse might be different for a debtor with a disabling medical condition that is sensitive to stress.</AC5><AC6> My hope, and my suggestion, is that there could be some way for debtors to make collection agencies aware of the fact that the debtor has a documented medical disability, and that abusive or harassing phone calls have additional health consequences for the debtor.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>We have no debt other than what is current on our credit cards, </AC1><AC2>but for 10 or15 years we have been receiving robo calls for an Edward Flanigan.</AC2><AC3>We've owned this number for 22 years and have never known an Edward Flanigan.</AC3><AC4>We are on the do not call list.</AC4><AC5>Robo calls by debt collectors need to be banned outright.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 0], [4, 1], [4, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do not have any debt.</AC1><AC2> I was given a telephone number by Verizon that was previously owned by a person who had not paid her bills.</AC2><AC3> Debt collectors have been calling me for 10 years now </AC3><AC4> and many have been threatening and intimidating.</AC4><AC5> One collector told me he had all my personal information and was going to ruin my life!!!</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4]]", "output": "{\"relation_types\": [\"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>E mail is good alternative</AC1><AC2> but majority of the time it will go to junk or spam mail </AC2><AC3> and the purpose not served.</AC3><AC4> Regular mail with follow up on e mail be better</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [3, 0], [3, 1], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think that privacy concerns regarding account information are valid.</AC1><AC2> Others knowing about collections should not weigh nearly as much as good-faith efforts of collectors to notify and collect outstanding debt.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>we are bombarded with robo calls every day from early am to late evening with unidentified callers;</AC1><AC2> no msgs left after answering machine kicks in;</AC2><AC3> these types of calls should be barred unless msg left with identity of caller included and basis of call to include name of creditor and debtor included</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Periodically (probably when the debt has been sold) I receive harassing phone calls from collection companies regarding a believed debt that my nephew owes.</AC1><AC2> I send him Christmas cards annually, see him at family gatherings every 5 years or so, and stopped contacting him about this harassment after he assured me it had already been taken care of when I received my first call.</AC2><AC3> These calls happen about once a year for a couple weeks at a time.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As someone who has dealt for over two years with a rogue collections company putting a debt I don't owe on my credit report, I think these debt buyers should be disallowed by law.</AC1><AC2> Legitimate third parties can operate,</AC2><AC3> but these fly by night businesses who buy for pennies on the dollar without a care as to whether the books are correct should be fined and put out of business.</AC3><AC4> In other words, the regulations should be so tough that they can't afford to stay open.</AC4><AC5> They only wreak havoc on people.</AC5><AC6> I have dealt with an unscrupulous company for two years;</AC6><AC7> my state Attorney General was involved in getting it removed from my credit report with 1 agency, only to have this company report the same to another agency.</AC7><AC8> No collection should be allowed on the credit report until verified 100%.</AC8><AC9> And if the debt is more than 2 years old, the creditor must notify the supposed debtor in writing and allow 30 days for a response--denial, request for proof, payment, etc.--before putting it on the credit report.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [3, 4], [7, 5], [7, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I recently discovered that my mortgage company does not have the note on my mortgage </AC1><AC2>and they can not locate the note.</AC2><AC3>I am current and have no concerns on reducing the payment.</AC3><AC4>I have asked the mortgage holder what should we do.</AC4><AC5>For the last 8 months they have sent us notices saying they are researching the issue.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My student loan company is giving me a ton of grief about allowing my husband to contact them regarding my student loan debt.</AC1><AC2> I've filled out the same form about four times that is supposed to allow him to talk to them on my behalf </AC2><AC3> but any time they decide that they don't like dealing with him, they pull his authorization (sometimes mid-call) and refuse to talk to him about it.</AC3><AC4> He is never rude with them,</AC4><AC5> he just doesn't put up with the run around my loan company gives me.</AC5><AC6> We never hear the same thing twice from them.</AC6><AC7> Issues that are supposed to be taken care of rarely are and we are constantly told one thing by one rep and something completely different by the next.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have been getting calls for a Hispanic gentleman with the same phone number as me in a different area code for years.</AC1><AC2> Every time I tell them that I have no clue who he is and that I would like them to stop calling my number they assure me that they will get it fixed </AC2><AC3> but then I hear from them again a few weeks later.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Simplicity ought to be the guiding principle</AC1><AC2> and Alternative # 2 is closest to that principle,</AC2><AC3> but expressions like \"charge-off\" should be avoided.</AC3><AC4> That's a technical term specific to accountants.</AC4><AC5> Some average consumers just aren't going to know what it means).</AC5><AC6> Beginning with the amount owed on the date of default, then adding interest (including rate) is simple enough,</AC6><AC7> still, the calculation of that interest could be included).</AC7><AC8> Any and all fees ought to be listed, explained and JUSTIFIED.</AC8><AC9> The same should hold true for any other charges, followed by payments and/or credits added after the date of default.</AC9><AC10> This presentation would provide a clear picture.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 4], [4, 3], [8, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have been a frequent target of debt collectors and their phone calls for several years.</AC1><AC2> The reason, clearly, is because I have a common last name.</AC2><AC3> I do not have any debts.</AC3><AC4> First, once a debt collector starts calling me, it is extremely difficult to get rid of them.</AC4><AC5> One outfit called me a liar and kept calling.</AC5><AC6> Another went after me for two different people.</AC6><AC7> Second, yes, a barrage of collection calls can be harmful.</AC7><AC8> Dealing with debt collectors on a daily basis has taken its toll on my physical and mental health.</AC8><AC9> I'm an old lady.</AC9><AC10> It has also made me paranoid about my own finances.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5], [6, 7], [6, 9], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think that the CFPB should come up with a regulation that prohibits a creditor, and a debt collector, from sending the debt for collection to another debt collection company AFTER a consumer disputes the debt, or sends a \"cease and desist\" letter to the debt collection agency.</AC1><AC2> In my cases that I worked on, a \"cease and desist\" letter was sent to both the debt collector and original creditor requesting that they cease collecting the debt as per the FDCPA.</AC2><AC3> However, all they do is close out one debt collection company and send the account to another one.</AC3><AC4> Then the consumer has to repeat the process.</AC4><AC5> The CFPB should come up with a regulation that states once the debt is disputed or a \"cease and desist\" letter is sent to the debt collector, THAT debt collector must advise the original creditor that a C&D letter was sent.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [4, 0], [4, 1], [4, 2], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>For over 3 years I have been contacted by debt collectors for an alleged debt.</AC1><AC2> I diligently send proof of payment and am ignored, </AC2><AC3> and several months later a new firm sends the same letter re the same debt.</AC3><AC4> The collector never responds, investigates or verifies the dispute.</AC4><AC5> They should be forced to do so.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 0], [4, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Your point is understandable;</AC1><AC2> however the statement you referred to is known as the mini-Miranda.</AC2><AC3> This statement is a requirement in a debt collector's initial communication</AC3><AC4> and in some states every communication).</AC4><AC5> Typically, the validation verbiage is included in a sheet of it's own with several other disclosures a debt collector is required to provide.</AC5><AC6> As far as law being slanted against the consumer, I would disagree.</AC6><AC7> The laws surrounding contacting consumers and the information required to be given is quite stringent,</AC7><AC8> the problem is the channels which are directly regulated by the law are outdated.</AC8><AC9> The primary law that regulates a debt collector was written in the 70's and did not directly define that is thrown around all too often, harassment (among others).</AC9><AC10> Because of this, if a debt collector sends a letter and makes a phone call, he may very well be held accountable in a court of law for \"harassment\".</AC10><AC11> Most collectors settle out of court</AC11><AC12> as defending a suit as frivolous as the one described above would cost much more than settling with a consumer.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[9, 8], [10, 11]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>E-Oscar was created by the credit reporting agencies due to a requirement that is outlined in the Fair Credit Reporting Act.</AC1><AC2> This process is fully electronic save for the consumer's ability to upload paper correspondence or documents for the debt collector/creditor to review.</AC2><AC3> Additionally, the CFPB has published clarification as to the requirements surrounding a \"reasonable investigation\" when a dispute is issued, requiring debt collectors/creditors to go one step further.</AC3><AC4> The underlying issue is this system is abused by many individuals who mass submit disputes repeatedly that have no validity.</AC4><AC5> Agencies and creditors are forced to sift through all of those frivolous disputes in order to actually address legitimate disputes.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Keep in mind, a cease and desist letter does not stop a debt collector from attempting to collect a debt,</AC1><AC2> it only stops the debt collector from communicating with the consumer via whatever method the consumer requests the contact to stop.</AC2><AC3> This does not mean a consumer no longer owes a debt.</AC3><AC4> I do agree with the fact that a debt collector must notify the creditor of disputes.</AC4><AC5> As a matter of fact, legitimate debt collectors do this on a regular basis.</AC5><AC6> As a debt collector typically does not own the debt,</AC6><AC7> they're unable to control what a creditor does with that information,</AC7><AC8> all they are currently able to do is implement internal controls that protect the consumer and the agency.</AC8><AC9> In my opinion, a legitimate dispute should be defined </AC9><AC10> as currently, a consumer solely mentioning the word dispute requires action on an account.</AC10><AC11> I believe some sort of requirement should be imposed as to WHY an account is being disputed and some sort of evidence be provided to support the claim.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[6, 5], [8, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers generally have no notice and do not know that a debt has been sold until checking their credit report or until a collection agency calls to collect a debt.</AC1><AC2> Being notified of a debt being sold, would at least allow the consumer to verify who is actually the owner of a debt.</AC2><AC3> I once paid a debt to a collection agency, only to find that I had paid one of 3 collection agencies who claimed to own the debt).</AC3><AC4> With regards to costs, most consumers and most debt buyers are unable to detail how a 2200.00 debt becomes a 7000.00+ debt.</AC4><AC5> And I found that very few even knew the original creditor's name, yet still attempted to collect this debt.</AC5><AC6> The new rule should at minimum state the Original Creditor's name, and that Debt Buyer has purchased the right to collect the debt.</AC6><AC7> This would allow the consumer to verify that a debt buyer has the right to collect the debt.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>that wouldn't be very efficient.</AC1><AC2> The FCRA does not allow reporting of a debt that is no longer being serviced by a creditor/collector.</AC2><AC3> For example, if your creditor is currently reporting the debt but sells it to a debt collector, your creditor can no longer report on that debt.</AC3><AC4> The buyer can, if he subjects himself to the corresponding federal regulation.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There are requirements for validating a debt to the customer set in the FDCPA.</AC1><AC2> There are investigation requirements in other aspects of federal law when a consumer disputes.</AC2><AC3> A debt cannot simply be created out of thin air.</AC3><AC4> Agencies who engage in this sort of practice are usually stopped relatively quickly and fined quite heavily (as well as subjected to cease and desist and regulatory action).</AC4><AC5> The fact is, while a debt collector is required to maintain certain pieces of information and validate certain pieces of information, the consumer is not required to do anything further than say, \"I don't owe this\" to make collections stop for a period of time.</AC5><AC6> Just like for debt collectors, the few that do it wrong ruin if for the many that do it right,</AC6><AC7> consumers in my opinion should be required to furnish some sort of support of dispute.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [2, 1], [6, 4], [6, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is precisely what lead to my filing bankruptcy.</AC1><AC2> Debt buying and selling, made a debt that was 10 years old, reappear on my credit report.</AC2><AC3> Each time I mentioned that the debt was time-barred.</AC3><AC4> I was informed that the debt had been bought, and that the \"clock\" had been restarted.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I understand your concern and desire to stop the calls that are not for you.</AC1><AC2> No one should be spoken to with disrespect.</AC2><AC3> I dislike the fact that there isn't a clearinghouse of sorts for phone numbers that would help eliminate the needless calls.</AC3><AC4> Of course how would you stop a responsible party from adding their number to the NOT responsible list?</AC4><AC5> It is also unproductive for collection calls to be made to wrong party consumers.</AC5><AC6> There isn't a benefit to anyone to spend time making these calls.</AC6><AC7> There are many rules and regulations to keep collection agencies honest and legal.</AC7><AC8> And there are consequences if they don't.</AC8><AC9> Do you know of any consequences to someone who gives out a bad phone number, address or even a name?</AC9><AC10> I think we should all ban together to restore integrity in the world of credit and stop making excuses for people who want to get out of paying.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 3], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have a 20 year plus debt.</AC1><AC2> A couple of times I have refinanced and payed everything on my credit report.</AC2><AC3> They never appear until it's over.</AC3><AC4> Every year they get a judgement against me </AC4><AC5> and freeze my bank account putting me behind on my bills</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I too am a family member of a consumer who claims to have paid his debt of 12 - 15 years ago, </AC1><AC2>but my husband and I receive two or three calls a day asking for him to call various agencies about a \"matter\" with a case #.</AC2><AC3>In one instance they said they would be at the door in one hour.</AC3><AC4>This family member has not lived here for about 16 years.</AC4><AC5>They should not be allowed to call anyone other than the debtor who nowadays can be found on the internet!!!</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was just watching \"CBS This Morning\"</AC1><AC2> and they mentioned that FICO is going to be partnering with more financial institutions to allow the financial institutions\" customers to get their FICO score for free.</AC2><AC3> FICO is already offered for free with many financial institutions,</AC3><AC4> but now FICO is aggressively expanding this offer through their \"Open Access\" program.</AC4><AC5> __URL__</AC5><AC6> I have known about this ever since FICO put out a press release earlier this month.</AC6><AC7> What I found out today on \"CBS This Morning\" is that Discover is going to allow their cardholders to see their FICO score for free on their monthly billing statement.</AC7><AC8> I don't think this is appropriate for Discover or any other business to put a consumer\"s FICO score on a billing statement or any other materials that can be turned over to debt collectors.</AC8><AC9> Right now, debt collectors do not have access to any consumers FICO score.</AC9><AC10> They do, however, have access to something called a \"collection score\"</AC10><AC11> which is nothing at all related to FICO or a consumers creditworthiness.</AC11><AC12> This action by Discover is a HUGE privacy concern</AC12><AC13> and the CFPB should not allow creditors or anyone else to have access to a consumer\"s FICO score.</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [12, 11]]", "output": "{\"relation_types\": [\"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Give Consumers Fair Notice and A Chance to Bid on Their Own Debts When Banks Sell Defaulted Obligations to Debt Buyers</AC1><AC2> When a consumer falls behind on loan or credit card payments, the bank often \"sells\" the account to a debt buying company for a few pennies on the dollar.</AC2><AC3> Debt buyers contribute nothing to society.</AC3><AC4> Yet, they are allowed to obtain windfall profits by pursuing impoverished consumers for the full face value of such debts.</AC4><AC5> This is unfair.</AC5><AC6> If a bank is going to sell a consumer\"s debt for pennies on the dollar, the bank should be required to notify that consumer, and allow that consumer a fair chance to bid on and purchase his/her own debt, on terms just as favorable as the terms offered to any other debt buyer.</AC6><AC7> I hope the CFPB will consider new rules in this regard.</AC7><AC8> Please note there is currently a petition on the White House website for this issue at:</AC8><AC11><AC9> __</AC11>URL__</AC9><AC10> It was initiated here:</AC10><AC11><AC9> __</AC11>URL__</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 2], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree with josephusmyer.</AC1><AC2> Our son ran up small debts at several stores and banks around eight years ago.</AC2><AC3> Debt-collectors (debt-buyers) have contacted him and threatened him with legal action on time-barred debts (without notifying him of the status).</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Since the UCC and to the best of my knowledge, State laws do not define reasonable period of time,</AC1><AC2> this is a problem and has been a problem for most lenders and third party collectors based on me experience of over 40 years.</AC2><AC3> Consumers should be able to seek assistance from an attorney</AC3><AC4> and be required to provide the attorney contact information to a collector, unless the attorney has not already.</AC4><AC5> The attorney should be required to notify all creditors of representation within 20 business days of the consumer's signed agreement of that representation.</AC5><AC6> While most attorneys do notify lenders and/or third party agencies some do not and some do not respond to inquiries concerning representation.</AC6><AC7> After the first lender/third party inquiry the attorney should be required to notify the lender and/or agency within 10 business days in writing of representation.</AC7><AC8> The attorney should be required to notify a lender and/or third party within 7 business days that representation of the debtor has been terminated.</AC8><AC9> It should not be a violation for a lender or third party to contact the debtor after 30 days to only determine if the debtor has continued representation of an attorney if there has been no communication provided by the attorney after 30 days of the initial notification in writing of representation.</AC9><AC10> I have experienced no communication after the initial notice by the debtor and/or attorney received over 60-90 days and even six months.</AC10><AC11> If non profit credit counseling agencies can send notification to lenders and third party collectors for representation of a consumer to reduce payments after an initial meeting I believe attorneys should be able to notify in the time periods specified.</AC11><AC12> Setting rules of notification time frames would benefit all parties.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[6, 5], [7, 5], [10, 11]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I used to have a lot of debt and told every single company that called to send me something in the mail.</AC1><AC2> I paid every single debt that I received mail for.</AC2><AC3> Years later someone went after me </AC3><AC4> and me, not knowing the rules, got stuck with it.</AC4><AC5> I still have not seen anything in writing to even verify what the debt is for </AC5><AC6> - and the court wasn't any better - </AC6><AC7> I didn't even have a chance to talk to the judge.</AC7><AC8> How is this right?</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>They need to include the name of the original creditor as well as the account number and the brand name the consumer would recognize. Date and amount of last payment, copy of the last billing statement (supposedly) sent to the consumer.</AC1><AC2> However I also think they need to send a copy of the original debt document with the consumer's signature.</AC2><AC3> Someone can send me bills for something I don't owe,</AC3><AC4> but they can't send me a signed paper I never signed.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do not communicate with anyone I owe money to by phone.</AC1><AC2> I want a written trail.</AC2><AC3> It's too easy for them to say I agreed to something or to give me misleading information by phone.</AC3><AC4> I want it IN THE MAIL.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 3], [1, 2], [3, 1], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The burden of proof should be on the creditor.</AC1><AC2> If you make the debtor responsible for following up with a request, it gives the creditor an opportunity to say they never received anything from the debtor...</AC2><AC3> If they had to send the documents to start with, there would not be any question.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 1], [0, 2], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The burden of proof cannot be placed anywhere else, JClark53.</AC1><AC2> But, a disputed account is rare.</AC2><AC3> Most people are aware of their obligations, but just cannot pay them now.</AC3><AC4> Starting the process should be simple and clear to each party, not talk about judgments or disputes where it is unlikely that either apply.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Enlisting the help of an attorney or other intermediary should also be considered a dispute.</AC1><AC2> I had both my attorney and my financial advisor contact my lender.</AC2><AC3> Emails, phone calls and letters all constitute disputes.</AC3><AC4> I think somehow it should be taken into account that a consumer may not know the specific cause of the dispute but they may know that the end result is wrong.</AC4><AC5> I knew I had made \"x\" number of principal payments on my loan </AC5><AC6> and my lender claimed I had made \"y\" number of principal payments.</AC6><AC7> I had emails and cancelled checks supporting the \"x\" number of payments </AC7><AC8> and the history from my issuing bank also supported my case and dates.</AC8><AC9> My lender refused to investigate, saying they had done everything just as I asked and I had instructed them to apply \"y\" number of payments to principal.</AC9><AC10> They had no documentation to back up this assertion </AC10><AC11> (their documentation was just a statement of how they processed my payments, not any of my direction).</AC11><AC12> In order to get my situation fixed, I had to find the specific payment the lender misapplied from their own records, which were a mess due to the amount of errors they had made.</AC12><AC13> This was not an easy task,</AC13><AC14> as it was time consuming and the lenders records were not exactly layperson friendly reading.</AC14><AC15> A couple of things... the average joe may not be able to read an institution's financial recordkeeping.</AC15><AC16> In my case, my bank's history, cancelled checks and emails were all sufficient proof to my mind and the extent of consumer responsibility.</AC16><AC17> At that point, the institution needed to justify their claim beyond \"we did what you told us to do\" and to provide proof of exactly that.</AC17>\n### Here is the list of pairs of related argument components in this paragraph: [[12, 13]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This so-called \"validation notice\" might better be called a 'justification notice.'</AC1><AC2> After all, the notification should supply the justification underlying the demand for payment; (\"Why am I being asked to pay this money?\").</AC2><AC3> This justification, obviously, should clearly specify the original transaction; i.e., specific product or service purchased, prior efforts to collect, (the history of the collection efforts) and present status.</AC3><AC4> It's not so much 'additional information' which is required,</AC4><AC5> it's more the clarity of the information provided.</AC5><AC6> That said, I'm convinced that communications between creditor and debtor should avoid words like 'creditor' and 'debtor,' along with words like, 'charge-off', 'default' (already mentioned by myself and emmacollector in this thread) and any and all words that belong in an accounting 101 book.</AC6><AC7> I understand what these words signify </AC7><AC8> and sometimes I get confused by who's the creditor and who's the debtor.</AC8><AC9> Again, simplicity, which entails clarity, ought to be the guiding principle.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [8, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Our office throws a wide net around \"disputes\".</AC1><AC2> This is largely a hard one to define </AC2><AC3> because it can take very specific and individual forms.</AC3><AC4> Generally, however, the type of disputes we see center around when a debt buyer has purchased the debt and the consumer does not recognize the name of the debt buyer,</AC4><AC5> they may generally state they don't owe the debt (with no further reasoning as to why not) or they don't owe as much as is being sought.</AC5><AC6> Additionally, there may be claims of fraud or payment.</AC6><AC7> Our office conservatively accepts verbal disputes as well as written.</AC7><AC8> I think the greater issue is not what is considered a dispute,</AC8><AC9> but how does a collector validate the debt?</AC9><AC10> Many consumers ask for incredibly specific items.</AC10><AC11> There is a poor form letter that floats around the internet that many consumers find and use, in which the consumer requests verification not validation, whatever the difference in that may be, then demands specific information be provided.</AC11><AC12> I say this because then I believe many consumers feel each of those requested items must then be provided,</AC12><AC13> when in fact the FDCPA is silent to the issue as to what proper verification is.</AC13><AC14> I will leave that for another post, though my thought there will be defining what is verification will prove to be a difficult task </AC14><AC15> as you can't be so defined that the various types of creditors cannot possibly provide the information sought or so loosely defined that there is load of litigation needed to define it.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [10, 11], [10, 12], [13, 14]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Many disputes are difficult to investigate </AC1><AC2>because it is unclear what the consumer's dispute actually is.</AC2><AC3>If the consumer is specific enough so that there is a clear item to research, we will do so.</AC3><AC4>However, its a vague dispute such as \"I dispute this debt\" or \"I don't owe this debt\" (which is incredibly common), then we will provide statements or a contract to attempt to address it.</AC4><AC5>The amount of the investigation is largely lead by the amount of detail the consumer relays,</AC5><AC6>and most of it results in us relying on the documentation the creditor provides to resolve the dispute.</AC6><AC7>Sometimes we may need to ask the creditor to research their records for indication of X, Y, or Z,</AC7><AC8>but most the time the dispute isn't that specific.</AC8><AC9>I find in my practice that we will often ask a consumer to provide information to support their dispute (such as proof of payment), but then the consumer does not provide it, and we are stuck in our efforts to investigate further.</AC9><AC10>Requiring only a \"reasonable\" investigation without further definition sounds like a punt to the courts to decide the defintion after a lot of litigation.</AC10><AC11>I think at least a broad definition of obtaining documentation to support the position that consumer owes the debt/amount/and creditor is a good place to start.</AC11><AC12>I would love to see consumers use a form letter prepared by the CFPB which spells out a variety of disputes and helps them articulate the dispute better.</AC12><AC13>I do think one of the toughest hurdles for a collector (and one of the biggest complaints from persons against whom collection efforts are made) is when they get a person that states the debt is not theirs (but someone else's ) with the same name.</AC13><AC14>We do our homework on our end to investigate </AC14><AC15>(we'll attempt to compare the last 4 digits of the social, </AC15><AC16>we may run a skip trace to see if party we contacted lived at the address on the statements, etc</AC16><AC17>and we will provide verification,</AC17><AC18>but in a mobile world investigating that the John Smith you contacted is the same John Smith you are attempting to resolve a debt with can prove tricky.</AC18><AC19>This is especially tricky if there is NEVER indication that we have reached the wrong person.</AC19><AC20>We never wish to contact the wrong party regarding a debt,</AC20><AC21>but it unfortunately happens </AC21><AC22>because consumers don't always relay updated contacted information to creditors and a collector then has to rely upon the best information available to them.</AC22><AC23>Unfortunately, I don't know what the fix is here.</AC23><AC24>Despite the stories to the contrary, it simply is not the intent of any professional and responsible collection agency or firm to attempt collections from a party that does not owe the debt,</AC24><AC25>but this is a hard one to address without good communication from the wrongly contacted party and the collector.</AC25>\n### Here is the list of pairs of related argument components in this paragraph: [[13, 14], [13, 15], [0, 1], [10, 9], [11, 10], [20, 21]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>While Demand Letters can be ineffective for the purpose of collecting a debt, </AC1><AC2>\"notice is the hallmark of fairness.\"</AC2><AC3>It's more important that people are held to standards, </AC3><AC4>which, in turn, help to eliminate abusive practices.</AC4><AC5>Procedural safeguards, like demand letters, are an important standard regardless of their effectiveness.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would like to have some protection from the calls I have received over several years from debt collection services looking for a woman who does not live at this address and has never lived at this address.</AC1><AC2> I keep getting reassurances that my number will be removed, but the calls continue.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If a bank or loan company makes the installment loan and does collections itself, and the debt is not sold or turned over to a collection agency, then there is no reason for a notice to the consumers to recognize the debt.</AC1><AC2> They have been making payments to the debt collector for months and already know about the debt.</AC2><AC3> Besides, the lender has already sent several past due statements and a certified letter about the debt.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have the same exact problem.</AC1><AC2> I have had this problem for 20+ years.</AC2><AC3> I can't tell you how many times I've told the person on the other end that the person they are looking for has NEVER lived here and not a relative.</AC3><AC4> It sure is disgusting.</AC4><AC5> I can't figure out what to do.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It is mind-boggling that this has even been allowed to continue for so long.</AC1><AC2> This should have been addressed years ago!</AC2><AC3> Stop allowing the company to change names to continue poor practices.</AC3><AC4> Stop allowing the companies to use hundreds of phone numbers to try to trick someone.</AC4><AC5> Stop letting them block numbers so caller ID only shows \"unknown\" or even 000-0000.</AC5><AC6> Stop putting the burden of stopping this entire industry on the consumer (who has no teeth or way to be sure the judgment is being enforced</AC6><AC7> THAT IS THE JOB OF CONSUMER PROTECTION!</AC7><AC8> It's in your name!</AC8><AC9> You are there to PROTECT the CONSUMER.</AC9><AC10> Force these companies to properly identify themselves when asked!</AC10><AC11> Debt collectors have been calling my cell phone for 5 years trying to collect a debt from someone I have never heard of.</AC11><AC12> This random person put down my phone number as a contact on a loan, defaulted on that loan, </AC12><AC13> and now i am the one being harassed because of a stranger!</AC13><AC14> When called and they identify who they are looking for, i used to say that i did not know the person then try to ask for the name of the company, but they had already hung up on me and would then call again later.</AC14><AC15> So then, after they ask for the person, I immediately ask for the name and address for the company.</AC15><AC16><AC17> They would ask again for \"name,\" </AC17>I would ask again for the name and address for the company.</AC16><AC17> They would ask again for \"n<AC18>ame,\" </AC17> I would ask again for the name and address for</AC18><AC19> the company. It becomes a shouting match, they say \"I'll just call back later when you are in a more 'information giving' mood,\" and h</AC19><AC20>ang up on me. There was/is no recourse, protection, or help for pe</AC20><AC21>ople like me. The company won't give me their name and I don't have a phone number (because it is \"unknown\") to give to the regulating bodies to report harass</AC21><AC22>ing behavior. I have no way to stop these people from calling m</AC22><AC23>y cell phone! It</AC23><AC24> is my phone! I pay the bi</AC24><AC25>ll, not them! They should have no \"RIGHT\" as they put it to call </AC25>a cell phone!\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6], [5, 8], [8, 6], [12, 11], [23, 22], [24, 22], [24, 23]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>You are a liar!</AC1><AC2> I have been harassed for over 5 years by companies looking for someone I have never heard of </AC2><AC3> because this person put a random string of our area code, local exchange and 4 numbers together (that turned out to be my number) on a loan that he then defaulted on.</AC3><AC4> I have told them to stop calling, they have a wrong number, and guess what\"</AC4><AC5> 5 Years later, they are still calling!</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Because it it the consumer's phone </AC1><AC2>and that is their right!</AC2><AC3>Why should the consumer pay to be harassed?!</AC3><AC4>Put the cost of doing this business where it belongs, which is on the companies not the consumers!</AC4><AC5>I pay for my cell phone,</AC5><AC6>I pay for the minutes,</AC6><AC7>I am the person that will decide how they are used and who will call me, not these shady, nasty companies!</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [3, 2], [6, 4], [6, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have seen the \"moderator\" in the caller ID forum ask if it would be okay to put the company's name on the caller ID because this could show to others around that the person has a debt and would then compromise the consumer's privacy and security.</AC1><AC2> Yet, there is a discussion to allow these calls at a consumer's work?</AC2><AC3> many people do not work in an office,</AC3><AC4> so a message would have to be left with a secretary.</AC4><AC5> This is letting someone else know of a debt who should not be privy to that information.</AC5><AC6> The ONLY reason these companies have to calling someone at work is to publicly shame the person into paying.</AC6><AC7> It is the modern version of putting someone in stockades and throwing fruit at them, or a modern scarlet letter.</AC7><AC8> If there is another phone number on an application, that is the one that needs to be used.</AC8><AC9> If there is an address on the application, that is what needs to be used.</AC9><AC10> Calls to someone's work are off limits PERIOD!</AC10><AC11> There is not way for the collection agency or the government regulation body to GUARANTEE that no one besides the consumer gets the information when someone's work is called.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2], [9, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Most companies have a strict \"NO PERSONAL CALLS\" policy;</AC1><AC2> hence the act should include a clause that \"...unless specifically allowed, in writing, by the debtor, a collector is barred from attempting to contact a debtor at his/her place of employment.\"</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>While not specifically addressed in this website, the current punishment for violations of the FDCPA are practically teethless.</AC1><AC2> 100 is of little consequence to most companies.</AC2><AC3> The law show be changed to all ow a 7 year statute of limitations (it is currently one year) and a maximum penalty, payable to the plaintiff, of either $10,000 or $100,000 for each violation.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 0]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I too, do not answer calls with no name, no number or 800 numbers.</AC1><AC2> After over a year of unemployment and only able to get part time work, I had to give up my landline.</AC2><AC3> I get repeated unknown calls on my cell, </AC3><AC4> even though all creditors were sent written notices not to contact my cell number.</AC4><AC5> I'm almost at a point that I cannot afford my cell,</AC5><AC6> but if it give it up I have no way to get contact from a potential employer.</AC6><AC7> When I get a full time job I will gladly pay my debts,</AC7><AC8> but constant calls will not get the debt paid any faster.</AC8><AC9> Not one company called me to give the the credit,</AC9><AC10> so they should not call my cell and cost me more money that will prolong them getting paid.</AC10><AC11> Besides, most of the calls are robo-calls with no message ever being left </AC11><AC12> so I never know who the call is for.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[9, 8], [11, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Dan says that the \"Telephone Consumer Protection Act (TCPA) prohibits creditors from using automated dialing systems to call cell phone numbers without consent from the customer\"</AC1><AC2> and that sounds reasonable if that were true.</AC2><AC3> I receive countless ro-bo calls on my cell, to which most never leave a message </AC3><AC4> so there is no way to report it.</AC4><AC5> To add to that, I have sent written notice to all creditors not to call my cell because of the charges, </AC5><AC6> yet someone is calling.</AC6><AC7> I do not answer those unknown calls </AC7><AC8> because I have nothing more to add to any previous calls about the debt.</AC8><AC9> The only call that has ever left a message is about a debt for someone else, too which I called and told them ithey have the wrong number and not to call, but they still call.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Calls at work are too instrusive.</AC1><AC2> Most companies, like mine, do not allow personal calls.</AC2><AC3> Not all people have M-F 9-5 office jobs.</AC3><AC4> If you work in a warehouse, a production line or as a cashier, you cannot take calls and it can cause issues with a supervisor.</AC4><AC5> As someone who has answered a company phone, you can tell a caller that the employee cannot take calls or that they don't work there, but that caller will repeatedly call back.</AC5><AC6> My position on this is simple, </AC6><AC7> if the creditor does not call to confirm employment before credit is issued, they should not call after the debt is in collection.</AC7><AC8> If they confirm employment then they could also inquire about the communication policy.</AC8><AC9> Personally, I am in a position of constant public contact with no available phone with me and it would be hard to immpossible to have a phone conversation without leaving my work area which would cause issues with management for my job.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The collection agency is not required to actually validate the debt and provide information to the consumer.</AC1><AC2> Example, I disputed a debt as valid.</AC2><AC3> The return validation consisted of a one line sentence: \"The consumer owes the debt.\"</AC3><AC4> This is not to me or to any reasonable person validation.</AC4><AC5> The collection agency should be required to at least furnish enough information to allow the consumer to recognize or dispute the debt.</AC5><AC6> That information ideally would be a copy of the original application and a copy of the final billing statement.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Failure to properly validate the debt as described by furnishing final billing statement and original application would invoke the consumer's rights to have all further collection activity immediately barred and the ability of the consumer to have the debt IMMEDIATELY removed from their credit report.</AC1><AC2> All too often it takes years to have false or misleading information removed from a consumer's credit report.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A credit reporting agency should be required to immediately comply with information regarding disputed debt and completely remove any reference to the debt.</AC1><AC2> As an example, I am attempting to have a time barred paid lien removed from my Credit Report.</AC2><AC3> 2 of the 3 bureaus immediately removed, 1 refuses to remove.</AC3><AC4> I have sent documentation from the court, the original creditor, from the office of probate judge all to no avail.</AC4><AC5> Without a remedy, I am left with a false item on my credit report.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have one debt in the court.</AC1><AC2> Here is my issue, I never received any paperwork saying there was a court date.</AC2><AC3> I did receive a letter from my bank a month after the court hearing saying they received a garnishment notice.</AC3><AC4> They could've saved the court costs since I already had told them I was unemployed.</AC4><AC5> Secondly, after I received the bank letter, I then received three (that's right three) garnishment hearing notices from three different companies for the same debt.</AC5><AC6> Since I was unemployed I could not afford to get an attorney.</AC6><AC7> It would've been nice if I could have provided the court (telephonically or by pre-trial documents) with documentation to explain why I was unable to pay the debt, </AC7><AC8> but the paperwork said to only respond if you did not owe the debt.</AC8><AC9> I believe court documents and debt companies should have easier and clearer paperwork for the lay person to understand their rights.</AC9><AC10> And yes, debt collectors should have to provide documentation that the debt is owed and they have the right to collect.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>About a month after my husband left the military and before we even moved into a new place, a creditor called his parents and told them he was in the military with my husband and had papers that hadn't been signed so he had to get in touch with him.</AC1><AC2> My mother-in-law knew we didn't have a phone yet, so because she thought it was something urgent she gave him our friends number.</AC2><AC3> That collector called the friends number told the friend he was collecting a debt and my husband (not knowing what was told or how he got the number) let the collector know we had just moved and the payment was an oversight.</AC3><AC4> Of course, the collector was trying very hard to get new address, phone, employer, etc but we did not have that yet.</AC4><AC5> The bill was paid, yet they continued to call his parents and the friend after they had new contact info for him.</AC5><AC6> Keep in mind, this was over a late $10 payment.</AC6><AC7> I understand they are trying to collect a debt </AC7><AC8> but doing so by false statements and telling others of the debt should never be allowed.</AC8><AC9> Shouldn't they just be allowed to leave a name and contact number?</AC9>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Additionally, collectors should not be allow, under ANY circumstance, to use any method which would cost the conusmer money.</AC1><AC2> For example, cellphones and texting should be banned completely from calls from collectors.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Many states currently have laws that make it illegal to engage in debt collection without being licensed to do so in the state.</AC1><AC2> However, this does not stop debt collectors from violating these state laws and threatening to sue individuals,</AC2><AC3> even though they legally cannot </AC3><AC4> because they are unlicensed in the state.</AC4><AC5> This is unlawful and menacing behavior.</AC5><AC6> It would be easier to bring claims under the FDCPA if the act were more clear that threats to sue when a debt collector is unlicensed to collect on a debt in a state is a false, deceptive, or misleading representation.</AC6><AC7> This clarity combined with stronger penalties might serve to better dissuade debt collectors from continuing to violate the law in attempts to collect on debts in state where they have no right to.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I recommend that the option to bring a suit in the jurisdiction where the consumer signed the contract should be removed.</AC1><AC2> In many situations, consumers may not actually sign a contract (e.g. credit cards),</AC2><AC3> they may sign an agreement in a distant location (for medical payment at a hospital on vacation), </AC3><AC4> or they may have moved in the years since opening the account.</AC4><AC5> I believe the most consumer-friendly option is to file suit where the consumer resides at time of commencement (unless it concerns real property and then it should be where the property is located).</AC5><AC6> With respect to geographic size concerns, it is important to note that many states are facing budget crises that affect the civil divisions of state courts.</AC6><AC7> In one of our largest districts, our options for filing suit was reduced from 32 courts down to 2.</AC7><AC8> If there is a concern for protecting consumers in this particular area, I recommend a section of the rule that prohibits collections from choosing a court venue with the intention of interfering with the consumer's ability to participate in the action.</AC8><AC9> To prove a violation, the consumer (or regulatory agency) would need to demonstrate that the collector had no reason to file suit in that court other than burdening the consumer (thus demonstrating intent).</AC9>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Attorneys are not exempted from the FDCPA, </AC1><AC2>and most State Bars take reports of unethical conduct by attorneys very seriously.</AC2><AC3>There is no need for additional regulation of attorneys.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It sounds like you believe the creditor/debt collector's attorney should be responsible for giving legal advice to the consumer (i.e. the opposing party).</AC1><AC2> This is a serious conflict of interest and a violation of his duties to his client.</AC2><AC3> Even worse, it sounds like you also want debt collectors who are NOT attorneys or employed by attorneys to also give legal advice to consumers.</AC3><AC4> This is a violation of the prohibition on the unauthorized practice of law.</AC4><AC5> I understand that the ignorance and lack of sophistication exhibited by defendant debtors is a concern.</AC5><AC6> I recommend that the CFPB develop a model notice of rights under the FDCPA.</AC6><AC7> If it so chooses, it can also maintain on its website an area for state-specific resources related to State laws, and reference this website on the form notice.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't understand, Mr. Bartmann</AC1><AC2> you believe creditors should just wait until consumers feel like they can afford to pay?</AC2><AC3> What if that takes years?</AC3><AC4> Litigation preserves the creditor's right to recover the money owed and allows it to be collected later, when the consumer is able to do so.</AC4><AC5> If litigation cannot be used to enforce creditors' rights, the debt could become uncollectable in as little as three years.</AC5><AC6> As noted by another commentator, this will most certainly have a negative impact on the economy and the cost of credit </AC6><AC7> because it will drive up prices to cover that risk.</AC7><AC8> It will also make obtaining credit next to impossible for high-risk individuals.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Unfortunately, a few of the suggestions you made would actually violate the FDCPA.</AC1><AC2> Debt collectors are not permitted to \"overshadow\" the validation notice by giving consumers deadlines, making demands for payments, or giving settlement offers.</AC2><AC3> Further, I don't believe consumers need a \"sample\" dispute notice.</AC3><AC4> If the consumer truly has a disagreement or dispute with the debt being collected, he or she should be able to articulate that dispute.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>But private arrangement between these entities doesn't change the fact that the money is still owed.</AC1><AC2> Just because the original creditor took a loss on it, doesn't change what is really due.</AC2><AC3> Is it ethical for someone to rack up tens of thousands of dollars of debt and never pay it back?</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think the requirement for a debt collector to send a validation notice 5 days after the initial contact is backwards.</AC1><AC2> I believe communication between the debtor and debt collector would be improved if the debtor has the validation notice before the initial telephone contact.</AC2><AC3> The debt collector should be required to mail the debtor a validation notice 5 days before any phone contact, not 5 days after.</AC3><AC4> Otherwise, the debtor is speaking with an unknown caller, who has surprised them with a demand for money.</AC4><AC5> The debtor has not been provided with any time to prepare their thoughts, or to formulate important questions about the alleged debt.</AC5><AC6> They may be caught \"off guard\", increasing the fear and anxiety of the debtor, which would necessarily lead to impaired verbal communication.</AC6><AC7> The debtor has no written factual statement to refer to during the phone call, while the debt collector has all of the factual details in from of them on their computer screen, and can cite facts and figures.</AC7><AC8> This situation creates an imbalance of power not conducive to good communication.</AC8><AC9> This proposal to require debt collectors to send a validation notice 5 days before the first telephone contact would impose no financial burden on the debt collector, </AC9><AC10> because validation notices are already required to be sent to the debtor.</AC10><AC11> It is simply a change in the timing of an already existing requirement.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[8, 9]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think the issue you have identified here in this post is key - lack of financial literacy.</AC1><AC2> So many people borrow money without reading contracts, without understanding the law, without considering the risks.</AC2><AC3> We live in a society centered on immediate gratification, </AC3><AC4> where people who can't afford things just charge them, thinking they'll pay it back later.</AC4><AC5> But then something happens - a job loss, medical issues, unexpected expenses.</AC5><AC6> So few people even maintain sufficient savings accounts these days, or put money away for retirement.</AC6><AC7> If we really want to get to the heart of this issue, it has to start with education, and financial literacy.</AC7><AC8> Now, I'm not saying the banks and lenders are innocent participants</AC8><AC9> they have certainly taken advantage of the \"instant gratification\" mindset by extending credit with high interest rates and fees, knowing that someone somewhere will sign up for it.</AC9><AC10> But they can't bear the brunt of the blame for societal ignorance.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [6, 2], [6, 3], [6, 4], [6, 5], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The reason they can sell it for a fraction of what is owed is because the debt buyer is purchasing entire portfolios of bad debt.</AC1><AC2> It spreads out the risk.</AC2><AC3> If you can get a million other delinquent consumers to go in with you on a 10% offer, you could probably get them to take it.</AC3><AC4> But it doesn't make financial sense for them to offer the same transaction to you as the debt buyer.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This option doesn't make economic sense.</AC1><AC2> Debt buyers do serve a practical purpose </AC2><AC3> because they allow the creditor to unload a massive amount of debt at one time.</AC3><AC4> The cost of negotiating individual deals with each of those 1 million delinquent consumers would negate the benefit they get from the consolidated offload.</AC4><AC5> Debt buyers allow the creditors to clear their books, which enables the cycle of lending to continue.</AC5><AC6> The transaction between those two entities doesn't change what is actually owed on the account.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree that it benefits everyone when notice of sale or assignment is given to the consumer.</AC1><AC2> I am not aware of any part of the industry other than mortgage servicers who presently give notice.</AC2><AC3> The benefit is clear</AC3><AC4> it reduces confusion, reduces the risk of misapplied/lost payments, and produces a clear chain of ownership.</AC4><AC5> It would be costly to the creditors selling the debt, but not so much as to be prohibitive.</AC5><AC6> Creditors have to send notices under a variety of other laws.</AC6><AC7> I don't think this addition would make that much of a difference.</AC7><AC8> I think the notice should state the account number, the entity to who it is being sold (including contact information) and the amount currently owed.</AC8><AC9> It should be sent by the seller, who has the most current information for the consumer, and a copy should be provided to the debt buyer as part of the sale package.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>From a collection standpoint, I can tell you that many creditors would LOVE to check with the DMV to get current address information.</AC1><AC2> Unfortunately, many privacy laws make that impossible.</AC2><AC3> It's also extremely common for people to fail to update their addresses either with their creditors or with the post office.</AC3><AC4> Any legitimate collector wants to find the right person.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The FICO impact on sold debts appearing twice needs to be addressed with the credit reporting agencies and the companies that create credit scores.</AC1><AC2> Creditors have a right to report the status of a debt, and shouldn't be precluded just because it already appears by the previous creditor.</AC2><AC3> However, the double penalty against the consumer is certainly unfair.</AC3><AC4> But it's not the collectors' fault.</AC4><AC5> It should be addressed in enforcement of the FCRA.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When debt collectors send that Validation Notice, they are required to state the creditor to whom the debt is owed.</AC1><AC2> I think that is sufficient notice that the debt is being assigned for collection.</AC2><AC3> I commented on the other thread that I DO believe notice should be given when the debt is sold.</AC3><AC4> But if the current creditor is retaining ownership but just assigning it to a collection agency or law firm, they will be notified when that agency contacts them and sends a Validation Notice.</AC4><AC5> Besides, the collection agency or law firm may end up refusing to accept the account due to a conflict or a variety of other reasons.</AC5><AC6> Giving notice that ends up being false would certainly cause confusion.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is entirely too much information to require.</AC1><AC2> It's not the job of creditors or collectors to send notices about \"best practices\" or personnel information.</AC2><AC3> This thread is about notice that a debt is assigned to collection.</AC3><AC4> NOT sold, but simply outsourced to someone who specializes in collecting past due debts.</AC4><AC5> Notices is given when the validation notice is sent.</AC5><AC6> The company who sends it is the collector;</AC6><AC7> the letter itself will state the name of the creditor to whom the debt is owed.</AC7><AC8> That's enough.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Breaking a promise to pay isn't the same as breaking the law.</AC1><AC2> We can't keep comparing criminal law to civil law </AC2><AC3> because it's just not the same.</AC3><AC4> But the item that's missing here is the legitimacy of interest.</AC4><AC5> Forget about big banks for a minute, </AC5><AC6> and think about borrowing money from a friend or neighbor.</AC6><AC7> When you keep money that is rightfully owed to someone else, you damage him,</AC7><AC8> because he doesn't have that money, which he could be investing (to increase it) or spending (to improve his quality of life).</AC8><AC9> That's one of the reasons that interest exists</AC9><AC10> to compensate someone for the loss of their money for a portion of time until it gets repaid.</AC10><AC11> I'm not saying interest rates aren't excessive</AC11><AC12> they certainly are</AC12><AC13> unfortunately, that's a separate issue.</AC13><AC14> But suspending interest all together and allowing a debtor to freeze the amount of his debt indefinitely, because he borrowed more than he could pay back and didn't plan for unexpected expenses.... I don't know anyone who would loan money under those terms, except for maybe Mom and Dad.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [6, 7], [10, 11]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It's important to understand that a Validation Notice (sent within 5 days pursuant to 1692g) is NOT a validation of debt.</AC1><AC2> It's a NOTICE of your right to validation, if you choose to invoke it.</AC2><AC3> I do agree that there should be additional regulation around this issue.</AC3><AC4> But part of the problem is the way the statute is written.</AC4><AC5> Most collectors cite 1692g verbatim to avoid liability for misleading consumers.</AC5><AC6> But it's kind of a big convoluted sentence that the average person can't understand.</AC6><AC7> I'd like to see a plain language amendment to that section of the FDCPA,</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5], [6, 3], [6, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Where in the adhesion contract does it state that the credit card agreement, an allegedly \"unsecured\" form of debt, takes priority over every single other occurrence that might happen in a person's life?</AC1><AC2> Are the Philippine hurricane victims or even more recent Tornado victims in the midwest who lost their homes and their streets soon to become \"defaulters\" who are then subject to ongoing penalties, fees and interest rate charges while also having their credit scores damaged?</AC2><AC3> The point of involuntary default is that an event occurred beyond one's control that has prevented them from making monthly payments of the amount they are required to make.</AC3><AC4> Involuntary Default simply means the defaulter promises to pay back what they owed at the time of the default, and nothing more.</AC4><AC5> I would suggest that the \"promise to pay\" tenet is constitutional violation of cruel and inhuman punishment </AC5><AC6> because credit card companies literally lord over their customers without clearly mentioning their Godlike status at the time of the agreement.</AC6><AC7> The correlation between cigarettes and credit cards are astounding.</AC7><AC8> Isn't it time for a clear warning on credit card products that state the truth?</AC8><AC9> Warning: Your promise to pay your credit card bill on a monthly basis is more important than any natural disaster or personal tragedy that may occur in your life.</AC9><AC10> By allowing credit card companies to not place the warning from above in a viewable context to all sign-ups, they gain monetarily while not revealing a basic contract tenet that should be revealed.</AC10><AC11> Therefore the \"promise to pay\" has been arranged under a false pretense.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5], [10, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>What I mean is I have had my credit report cleared three times they were never on either of them.</AC1><AC2> And when i think I have cleared all of my crediters they get a judgement and freeze my account.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I just want to add that I am not advocating getting out of the debt because of a life changing event.</AC1><AC2> I am advocating that the debt be frozen at the amount it was at the time of the involuntary default and then paid back even if it takes ten years.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe lawsuits should be initiated in the jurisdiction in which the consumer resides,</AC1><AC2> and that the case should be subject to the laws of that jurisdiction, especially concerning the statute of limitations.</AC2><AC3> Yes, I realize that a SOL defense is an affirmative one).</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree that this is about Financial Literacy,</AC1><AC2> However, this is also about the court's enforcing completely one sided credit card adhesion agreements that don't give the debtor/defaulter, rights of any kind, even in the most humanitarian of situations, thereby calling into question the legality of these one sided credit card adhesion agreements.</AC2><AC3> Lets not forget that it was the comptroller of the currency back in 2002 that prevented the Insurance industry from competing in the credit card debt suspension insurance arena with the credit card companies.</AC3><AC4> This allowed the credit card companies to then have an obscene monopoly on overpriced credit card debt suspension insurance premiums they charged their own customers who otherwise could have carried insurance policies that would have frozen interest rate charges for a certain period of time when a life changing emergency occurred.</AC4><AC5> Financial literacy is in play when it comes to the 2% monthly minimum payment addiction scam perpetrated on first time credit card borrowers.</AC5><AC6> 2% monthly minimum payments are literally no different than a crack dealer giving out a few free hits of crack to get people hooked on their product.</AC6><AC7> A person can be buy a $1,000 top of the line television set and only have a 20 or 25 dollar payment due the next month.</AC7><AC8> That's credit card crack in my opinion.</AC8><AC9> Financial Literacy could be a warning printed in bold letters on every credit card agreement warning how credit cards purposely have low monthly minimum payments to lure one into more and more debt, how credit card companies have no compassion for life changing events, and that credit card companies are overcharging for credit card debt suspension insurance by a factor of up to 2,000%.</AC9><AC10> Put those three warnings on every agreement in bold letters, </AC10><AC11> and two things happen,</AC11><AC12> customers have a better chance of becoming financially literate, </AC12><AC13> and it also is an admission of fraud by the credit card companies for all the prior agreements already in place.</AC13><AC14> So the irony is the credit card companies can't change even if they wanted to.</AC14><AC15> But where is the outside force to come from to make the obvious happen in regards to those three credit card wanrings?</AC15><AC16> Apparently it can't come from the CFPB, </AC16><AC17> which is unfortunate </AC17><AC18> because it turn this ties the courts hands that much more.</AC18>\n### Here is the list of pairs of related argument components in this paragraph: [[9, 11], [9, 12], [16, 17]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe the most significant problem is due to financial institutions having two systems that are not fully integrated.</AC1><AC2> One is the system of record that contains account level information </AC2><AC3> and the second is a charge off system that is used to track events that occur after the account is charged off.</AC3><AC4> Events that occur on the charge off system are normally not reported to the system of record.</AC4><AC5> Also, charged off system does not or is not used for credit reporting.</AC5><AC6> The second problem is a result of mergers and/or acquisitions where the financial institution only converts the system of record and not the acquired charge off system.</AC6><AC7> This leaves a void as to the particular status after the account was charged off.</AC7><AC8> As accounts are outsourced or purchased </AC8><AC9> the reliance of information resides on the system of record and NOT the charge off system.</AC9><AC10> The third problem involves a consumer who has more than one account with the original lender so the risk of one account going to a different agency or debt buyer is highly likely.</AC10><AC11> Even if access by the debt buyer and collector is available, the events that took place on the account are normally not recorded in the system of record and the charge off system may have been decommissioned.</AC11><AC12> As to the issue of credit reporting of disputes depends upon whether an agency or debt buyer furnish data to a credit reporting agency.</AC12><AC13> The amount of consumer data currently and in the past reported to credit reporting agencies may not be accurate specific to charged off accounts</AC13><AC14> and to require a chain of title would be expensive </AC14><AC15> and the likely hood of accuracy would still not be achieved.</AC15><AC16> Going forward I think the first focus must be on credit reporting accuracy.</AC16>\n### Here is the list of pairs of related argument components in this paragraph: [[8, 7], [15, 12], [15, 13], [15, 14]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Though I do not agree with \"someone to rack up tens of thousands of dollars of debt and never pay it back\".</AC1><AC2> My current standing is that the laws of each and every state allow for higher interest rates to be charged for non-secured debt.</AC2><AC3> This is because the lenders take more losses </AC3><AC4> \"the risk should be in alignment with the award\".</AC4><AC5> In many cases the principal has been paid back in full or the majority of the debt has been paid back.</AC5><AC6> To allow a \"third party\" to buy it at a significantly reduced price, after the debt has been charged off by the original \"lender/creditor\" AND allow the third party to collect the full alleged balance and interest is not just.</AC6><AC7> This is the way I am leaning at this time.</AC7><AC8> Explain to me why you or I feel differently?</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Your point about the overshadowing is well taken.</AC1><AC2> My comments are based upon suggested changes to the debt collection process.</AC2><AC3> You are correct,</AC3><AC4> if the FDCPA remained the way it is currently it may be considered a violation.</AC4><AC5> The FDCPA allegedly is geared to the \"least sophisticated individual\".</AC5><AC6> However, I currently speak to many people that are not able to properly respond to a debt validation (even when they have a credible dispute).</AC6><AC7> I am currently dealing with a 72-year old woman whose son \"stole\" her identity.</AC7><AC8> He was convicted of fraud and deported for other credit cards that he took out in her name.</AC8><AC9> She received a dunning notice and now is being sued on another card that she was not even aware of.</AC9><AC10> Our experiences are just different.</AC10><AC11> I once felt the same way as you when I was in commercial debt collection.</AC11><AC12> I truly appreciate your response</AC12><AC13> but you and I will have to disagree that \"he or she should be able to articulate that dispute\".</AC13><AC14> I enjoyed reading your well thought out response and look forward to the continued debate.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My client needs to see a particular doctor.</AC1><AC2> When she called his office she was informed that she needed to pay on her account of $278.</AC2><AC3> She was not even aware that she had a balance there</AC3><AC4> she had never received a bill from this office </AC4><AC5> and when she asked when this bill was from, the gal told her 1986.</AC5><AC6> They claim they never turned it over to a collection agency </AC6><AC7> but the client filed bankruptcy in 2005.</AC7><AC8> It is listed in her bankruptcy </AC8><AC9> but the doctors office won't forgive the bill.</AC9><AC10> If a debt owners want to collect on debts they need to send out bills </AC10><AC11> so families know they have bills due, </AC11><AC12> that only makes sense.</AC12><AC13> My client is disputing the bill, but with no luck so far.</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[10, 9]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In order to get a default judgment through a State Court, a collector's pleadings have to spell out the theory of their case (usually contract) with sufficient specificity that a reasonable person can understand the basis for the claim.</AC1><AC2> Without some form of affidavit from the actual creditor, very few courts will award a default judgment.</AC2><AC3> Also, most state court approved forms are already written for the \"least sophisticated debtor.\"</AC3><AC4> I don't see any reason to impose a more stringent standard on collection lawsuits than are imposed on any other lawsuit.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [3, 0], [3, 1], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Either State or Federal law should provide some penalty for passing an NSF or \"closed account\" check that includes a presumption of guilt.</AC1><AC2> The check either bounced or it did not.</AC2><AC3> There's not a lot of grey area here.</AC3><AC4> That said, either State or Federal law should also allow the drafter of the check a \"safe harbor\" wherein they can pay the face value of the check and some nominal compensation for the hardship suffered by the recipient of that check in order to avoid this penalty.</AC4><AC5> Michigan has such a procedure </AC5><AC6> and it seems relatively equitable.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [2, 1], [3, 4], [3, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was receiving 4 or 5 calls a day from Midland Debt Collection daily for two weeks on my cellphone.</AC1><AC2> As I'm unemployed and scraping by I was ignoring - or rather trying to ignore - the calls.</AC2><AC3> They were always hang-ups.</AC3><AC4> Never any message.</AC4><AC5> As I live in Indiana - a \"business-oriented\" state, </AC5><AC6> it seems the laws favor the debt collectors over the debtors.</AC6><AC7> Limits on calls? Please, do.</AC7><AC8> When I finally did have the gumption to answer when they called at 8:10am on a Sunday morning, I made a strong case about being harrassed and informed him I didn't want to be contacted on my cell phone.</AC8><AC9> It's only a few days but I'll see.</AC9><AC10> I still don't know if it was any legit debt that they were calling about.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think the 9-8 is a typo.</AC1><AC2> I have seen other typos on this site too, </AC2><AC3> and they provide to FDCPA link that shows it is 8-9, </AC3><AC4> so no big deal.</AC4><AC5> On this topic though, I would like to see the 8-9 changed to 9-8.</AC5><AC6> 8 is too early and 9 is too late at night to get phone calls.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [3, 2], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I also don't think that they should be able to call on Sundays.</AC1><AC2> I understand that weekends are probably a good time to call people,</AC2><AC3> but I think that weekend calling should be restricted to less hours (like maybe noon - 5pm) and only on Saturdays.</AC3><AC4> No Sunday phone calls.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>These so-called \"Blue Laws\" that prohibit cars lots being opened on Sundays and liquor being sold on Sundays, requiring the debt collection industry from closing down on Sundays (no calls, no letters, no contact) would not create any undo burden </AC1><AC2>as many other regulated industries (car, liquor, gambling, etc) already abide to such \"blue laws\" and they operate just fine and make plenty of profits.</AC2><AC3>The debt collection industry should be required to close down completely on Sundays.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 0]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have a fairly common last name,</AC1><AC2> and my listing in the phone book uses two initials rather than a first name.</AC2><AC3> I get calls from credit collectors several times a week looking for various people with my last name and one or the other of my two initials.</AC3><AC4> They are just taking a stab in the dark.</AC4><AC5> When I tell them that I don't live with any other family members and that I have an excellent credit rating, they take me off of their list to of numbers for today's person of interest.</AC5><AC6> When I ask them not to call me at all because I have no other people living with me that they would be looking for, they say that they only had me listed for their person of the day.</AC6><AC7> Tomorrow my number might pop up as a possibility for tomorrow's person of the day, but they \"can't do anything about tomorrow.\"</AC7><AC8> I actually had a credit collection rep (in India) say that to me.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I'm in the same situation--get calls about numerous people with my last name and one or the other of my two initials.</AC1><AC2> None of the people being sought are even related to me, as far as I know, much less living with me.</AC2><AC3> I would like to be able to make an official declaration that I have no delinquent debt and that I do not live with anyone who does.</AC3><AC4> I'd be willing to renew the declaration once a year in order to stop receiving these calls that are nothing more than fishing expeditions.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 8, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would like to see a rule prohibiting debt collectors, debt owners/debt buyers, and other related affiliates from being able to pull a debtor\"s credit report once the debt is officially time-barred and out of SOL.</AC1><AC2> I would also like there to be a rule that specifically distinguishes between a \"hard pull\" and a \"soft pull\" credit inquiry.</AC2><AC3> I have been opted out of promotional marketing via the __URL__ website for years.</AC3><AC4> I do not have debt and have never had debt.</AC4><AC5> What I do have is a common name, </AC5><AC6> and so from time to time I will have various debt collectors and debt buyers \"soft pulling\" my credit reports while they are trying to locate whomever they are trying to locate.</AC6><AC7> This should not be allowed even if the debt is still collectable and within the SOL.</AC7><AC8> No debt collector has a \"permissible purpose\" to just randomly \"soft pull\" my credit reports just because I have a common name.</AC8><AC9> As far as being outside the SOL and time-barred debts: no debt collector and debt owners/debt buyers should be allowed to pull someone\"s credit report </AC9><AC10> since they can't legally sue the debtor outside of the SOL.</AC10><AC11> So there is no need to continue pulling someone\"s credit report.</AC11><AC12> As far as the \"hard pull\" \"soft pull\" is concerned: There needs to be specific language that prohibits any debt collectors, debt owners/debt buyers, and other related affiliates from performing \"hard pull\" credit report inquiries.</AC12><AC13> The FCRA makes it clear what \"permissible purposes\" are </AC13><AC14> but it does not specifically state or distinguish between a \"hard pull\" and a \"soft pull\" credit inquiry.</AC14><AC15> A \"hard pull\" is a consumer-initiated request for an extension of credit.</AC15><AC16> Anything other than a consumer-initiated request is a \"soft pull.\"</AC16><AC17> But time and time again, I have friends, family members, and online forum members, tell me and show me that a debt collector or a debt owner/debt buyer has \"hard pulled\" their credit report.</AC17><AC18> And some of these times are when the debt is time-barred from being outside the SOL and also from the Credit Reporting Time Period.</AC18><AC19> This is unacceptable.</AC19><AC20> A \"hard pull\" will decrease a consumers credit score and will be visible for up to 25 months to anyone who does have a legitimate permissible purpose to view that consumer\"s credit report</AC20><AC21> Making a \"hard pull\" on a debtor\"s credit report could be a violation of the FDCPA in the privacy of the debtor.</AC21><AC22> Any debt collectors, debt owners/debt buyers, and other related affiliates should be prohibited from doing \"hard pulls\" </AC22><AC23> and the CFPB should make it absolutely clear.</AC23><AC24> www.optoutprescreen.com __URL__</AC24>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 4], [6, 7], [8, 10], [8, 9], [10, 9], [11, 12], [21, 19], [21, 20]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Filing suit in the state that the consumer lives in is the most practical.</AC1><AC2> If a state has a large district there is nothing that can be done unless judges want to allow tele-conferencing,, or phone conferencing.</AC2><AC3> However, if that is allowed it should be allowed for both sides provided the evidence of the debt is supplied to the court in advance.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Let's remember that most debtors have had the original creditor from 2 to 4 collection agencies and the creditors attorneys office before a suit is ever filed.</AC1><AC2> That process usually takes as much a 2 years or more.</AC2><AC3> So it is difficult to think that the courts should make special accommodations for these individuals.</AC3><AC4> Every person called into court has had many opportunities to have the debt validated or payment arrangements made prior to a default judgment.</AC4><AC5> I do believe basic evidence should be supplied.</AC5><AC6> This would be a statement or bill copy with a matching name of the consumer and proof of address at the time the debt was incurred.</AC6><AC7> This proof of address could be provided by other confirming data available through skip tracing companies.</AC7><AC8> There were significant problems with how debt buyers were allowed to file suit and receive default judgments with virtually no evidence.</AC8><AC9> So improvements and consistency is needed in evidence but it should also not be expected to show every single bill copy.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [3, 0], [3, 1], [8, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It is my companies practice to send a validation of debt notice to nearly all accounts placed.</AC1><AC2> This is not required but a best practice.</AC2><AC3> I also believe in most cases the original creditor provides notices to the consumer on their bill if they are going to be referred to collections.</AC3><AC4> Also it is time to be realistic.</AC4><AC5> Is it possible that a consumer is not notified of a transfer to collections? </AC5><AC6> Yes.</AC6><AC7> But that being said most if not all consumers know they have not paid their bill beyond 30 days and they could be sent to collections.</AC7><AC8> It is time personal responsibility plaid a part in rule making and that the rules apply to the vast majority of circumstances instead of trying to account for the rare occurrences where the process does not work fully.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A simple solution to all of the hype about calling cells which is by far the most common means of contacting a consumer these days.</AC1><AC2> Direct that all telecommunication companies offer a site that allows the agencies to register their phone numbers.</AC2><AC3> If a call is placed to a consumer that does not have unlimited calling or testing then the charges are reversed to the registered phone agency.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think the current limits are fine.</AC1><AC2> The MA rules are too restrictive and frankly could be a disservice to the consumer who wants to try to resolve the debt.</AC2><AC3> I do not believe in robo calling but do believe that preview dialing on an automated dialer system should not be prohibited </AC3><AC4> as the agent still has to review the information on the account and push a button to allow the dial.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Someone keeps calling for a person named Sean, who does not live here and I don't know anyone by that name.</AC1><AC2> I tell them they have the wrong number, but they continue to call.</AC2><AC3> They sometimes leave canned messages on my answering machine.</AC3><AC4> I realize some debtors pretend not to be at the number being called, </AC4><AC5> but these collectors need to verify the information </AC5><AC6> so they don't keep calling the wrong number.</AC6><AC7> I don't know if the debtor gave the wrong number intentionally, or this number was used by someone else before I got it.</AC7><AC8> It is extremely irritating.</AC8><AC9> And even though the callers do not say they are debt collectors, it is obvious.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Collectors are not calling me repeatedly </AC1><AC2>because they don't believe me.</AC2><AC3>They are calling me repeatedly </AC3><AC4>because there are so many people with the same last name as me and one of my initials.</AC4><AC5>It is just as annoying to get frequent calls about different individuals as it is to get frequent calls about the same individual.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I live in Georgia which seems to have laws that are very biased toward the debt owner.</AC1><AC2> An example is the statutes of limitations for Mortgage debt.</AC2><AC3> For instance, if the 1st lienholder forecloses, and you have a 2nd mortgage also, the 2nd remains in effect</AC3><AC4> The OCGA states that the statute of limitations for any \" debt instrument under seal\", is 20 years from the date of foreclosure.</AC4><AC5> The 2nd lien can be sold over and over </AC5><AC6> and the last one holding it can come after you for up to 20 years.</AC6><AC7> In these times when houses are lost due to catastrophic illness, job loss and other situations that not due to the irresponsibility of the homeowner, legislation should be drafted to protect the consumer from financial ruin.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>State regulations should preempt them from collecting exorbitant returns on such minimal investment (usury!!!).</AC1><AC2> Other items to consider pertaining to this issue are : The bad debt</AC2><AC3> buyer does not disclose what he/she purchased the bad debt for.</AC3><AC4> This should be disclosed and transparent</AC4><AC5> as they have the original debt information, including SSN, phone and financial information.</AC5><AC6> I don't begrudge them making a profit ,</AC6><AC7> but their predatory practices need to be regulated.</AC7><AC8> A superior court judge should be able to examine the original transaction,</AC8><AC9> all the documents concerning the purchase of this debt by a third party and determine a fair and equitable payment to resolve the problem, avoiding bankruptcy .</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would like to see the CFPB address the issue of their \"phishing\" expeditions , i.e., trolling the phone listings and calling anyone with a similar name.</AC1><AC2> I was listed by my initials, </AC2><AC3> but with a common last name, I was getting daily calls from debt collectors until I switched my listing to a nickname.</AC3><AC4> There are many comments on this site from people having the same problem,</AC4><AC5> so it's obviously a common practice.</AC5><AC6> For some strange reason, the folks in the phone centers, react badly when I ask them to explain how my phone number ended up being programmed into their robo dialer.</AC6><AC7> The usual response has been to hang up on me.</AC7><AC8> I would also like to see the CFPB address the issue of repeated calls to the wrong person.</AC8><AC9> If I'm not the person of interest on the first call, then I won't be on any subsequent calls.</AC9><AC10> In my experience with debt collectors, I have reached the conclusion that their are two reasons for repeatedly calling me:</AC10><AC11> The people in the call centers are trained not to take No for an answer.</AC11><AC12> By calling me repeatedly the debt collector is trying to wear me down and get me to pay a debt that isn't mine just to get them to stop calling.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do think a \"free to end user\" would work </AC1><AC2>and I don't see any problems with using such a practice or service.</AC2><AC3>It creates some fairness for the collection companies and will not charge the cell owner if they do not have unlimited calling.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Just to make my comment clear: I implied that the Free-to-end-user alternatives (if allowed to be used) need to be regulated </AC1><AC2>so that they are not selling phone numbers and compromising the privacy of the consumers.</AC2><AC3>My comment made it appear as though I think that the free texting apps (which allow people to text for free) and the free-to-end-user alternatives are the same thing.</AC3><AC4>They are not.</AC4><AC5>I don't want the free-to-end-user alternatives to behave the same as free texting apps -- selling phone numbers to Spammers.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The Michigan program for handling NSF checks is outlined in Michigan statute (MCL 600.2952).</AC1><AC2> The statute provides the exact language to be used in the demand notice to the debtor but does not include the FDCPA Miranda language- which we add to the notice.</AC2><AC3> We also send a copy of the dishonored check with the notice.</AC3><AC4> The statute allows the debtor to pay the value of the check plus $25 is paid within 30 days of the notice, or $35 if paid thereafter.</AC4><AC5> IF the creditor brings suit (after the first 30 days) they can sue for the value of the check, PLUS damages of 2 times the amount of the dishonored check PLUS $250 in costs.</AC5><AC6> This may even be used in small claims court.</AC6><AC7> It seems that the idea is to penalize those who pass bad checks such that merchants will be willing to accept checks from customers.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The current validation notice is already too long--bordering on \"boilerplate\".</AC1><AC2> To add more language to this would confuse or intimidate the least sophisticated debtor and/or lead them to immediately ask that the creditor cease communication.</AC2><AC3> The problem with that strategy is that it forces the creditor to file suit, thereby incurring court costs that will be added to the debt.</AC3><AC4> Instead, debtors should be encouraged to communicate their questions & concerns to the collector who can then (after right-party verification) openly discuss the account & quite possibly answer the debtor's question(s).</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As for medical collections, I very, very rarely see a legitimate dispute.</AC1><AC2> Most often people are just trying to get the item removed from their credit or scare the collector with threats of FDCPA action.</AC2><AC3> Many of the disputes we receive are copied directly from the internet and contain all kinds of demands for proof that are not required by any state or federal law OR even the rules of evidence during trial.</AC3><AC4> CFPB really needs to address this issue and set a clear standard for what is (or is not) a legitimate dispute and how the collector should respond.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [3, 0], [3, 1], [3, 2]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>We instruct our collectors to treat EVERY dispute the same--whether received in writing or over the phone and without regard to when it was received.</AC1><AC2> Therefore, I agree that debtors should provide the information referenced in FCRA.</AC2><AC3> The problem with FCRA disputes is the E-Oscar system that only affords the collector a couple options like \"account information is accurate as of date reported\"\"</AC3><AC4> this doesn't even make sense as a response to the info provided by the debtor.</AC4><AC5> If E-Oscar is going to be a valid \"dispute\" under FDCPA, that website needs some serious updating including making sure that disputes actually contain the information listed in CFR 1022.43(d) and allowing collectors to transmit the actual contract/itemized statements/etc back to the debtor.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Any FTC rule regarding verification should absolutely include an exception for frivolous and irrelevant disputes</AC1><AC2> because there are way too many websites out there providing sample dispute letters and the advice to keep using them that the process is abused by enough debtors that we now have a standard letter to address this issue.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If our client(s) can't provide any verification of the debt, we close the account and send the debtor a letter that we are doing so.</AC1><AC2> Note: this has only happened once or twice in 20 years.</AC2><AC3> an unresolved dispute account should NOT be sold.</AC3><AC4> If so, seller should be liable.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The problem is not with a form letter of dispute.</AC1><AC2> The problem is that these websites and unreasonable letters lead unsophisticated debtors to believe that a creditor has to provide extraordinary proof that simply is not required.</AC2><AC3> 'stopwithspoofedcallerID' (if that IS your real name) is correct that no legitimate dispute should be ignored, regardless of the form, but nor should debtors be allowed to abuse the system by repeatedly asking for proofs that are not required.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think the \"unless\" part of the rule about contacting a person more than once should be scrapped.</AC1><AC2> They should not be allowed to contact anyone (other than the debtor him/herself) more than once.</AC2><AC3> If the person (usually the innocent family member) they contact to try to locate the debtor is willing to give out contact info, fine.</AC3><AC4> If not, whether they have it or not is beside the point.</AC4><AC5> They should not be forced in the middle.</AC5><AC6> It is not their debt, or in any way their responsibility.</AC6><AC7> And when collectors claim they can't give their name or a return phone number to be passed on because of privacy reasons, how can they expect someone else to share personal contact info with a stranger?</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I'm not sure a registration system for debt collectors really addresses the issue.</AC1><AC2> I'm not exactly sure how the registration system would operate.</AC2><AC3> In MA, consumers can check online to see whether a debt collector is licensed to practice in the state,</AC3><AC4> many just don't know about the website or on a more basic level don't know that the debt collector has no right to try to collect from them.</AC4><AC5> Is the registration system meant to displace state laws requiring licensing of debt collectors in the individual states?</AC5><AC6> I hope that's not the case</AC6><AC7> since states have a strong interest in regulating debt collectors for the protection of its consumers.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [5, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There are still too often abuses by debt collectors in regard to time-barred debts.</AC1><AC2> Zombie debt collectors who use partial payments, acknowledgement of the debt in writing, or other tactics are effectively hard-wiring around the laws having to do with the statute of limitations.</AC2><AC3> I have witnessed situations where consumers were effectively tricked into setting up a series of payments on a long time-barred debt.</AC3><AC4> Collectors continue to take advantage of consumers for whom ESL and also those who are unsophisticated and possibly naive.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [0, 1]]", "output": "{\"relation_types\": [\"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Given the highly coercive consequences of having negative information reported to or by CRAs on consumer credit reports, I think it is reasonable that a debt not be deemed \"verified\" or \"substantiated\" unless and until there's a final non-appealable order, but only in circumstances where the consumer has timely disputed the existence or the amount of the debt.</AC1><AC2> Currently, if you dispute a debt, the debt collector reports you to the CRAs </AC2><AC3> and your credit standing is adversely impacted; i.e., the damage is already done at that point.</AC3><AC4> In other words, the notation on the credit report that the debt is disputed by the consumer is largely ignored by potential lenders, employers, landlords, etc.</AC4><AC5> Thus, disputing the debt does nothing to prevent harm to the consumer.</AC5><AC6> The debt collector and creditor threaten to report you to the CRAs as a coercive tactic to force you to pay a debt</AC6><AC7> even though you might legitimately not owe the debt or the amount claimed to be owed.</AC7><AC8> As for my proposal, I do not think this will lead to more litigation. Just the opposite.</AC8><AC9> If a consumer doesn't timely dispute the debt, then the debt can be deemed verified or substantiated.</AC9><AC10> If, however, the debt is timely disputed, creditors and debt collectors will have to evaluate whether to initiate litigation and weigh the likelihood of prevailing at trial </AC10><AC11> and this may cause creditors and debt collectors to be more judicious about which debts to take to trial.</AC11><AC12> This proposal would also protect consumers from having their credit standing negatively impacted until after it is conclusively determined that a purported debt that is disputed is in fact owed and the amount of such debt is conclusively determined.</AC12><AC13> As an alternative to my initial proposal, a rule could be adopted that would impose significant statutory penalties, treble damanages and recovery of attorney's fees against creditors, debt collectors and CRAs in the event the consumer can prove either the disputed debt doesn't exist or the amount of the debt is less than that claimed to be owed.</AC13><AC14> This approach, however, places the burden of proof on the consumer</AC14><AC15> and I feel strongly that the burden of proof should be on the creditors and debt collectors to affirmatively prove the existence and amount of any disputed debt before a consumer's credit report is adversely impacted.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 7], [4, 1], [4, 3], [7, 8], [7, 9], [7, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Once the consumer is located then nearbys, neighbors, relatives, prior used phone numbers may be abused by collectors to harass and embarrass consumers, or even to compel a relative or other third party to pay the debt.</AC1><AC2> Violations of the FDCPA should be treated as serious breaches of law.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Minors are not normally eligible to enter contracts or take on the obligation of credit arrangements,</AC1><AC2> so this would seem necessarily rare.</AC2><AC3> Regardless, every effort should be made and maintained to protect consumers from mistaken disclosure of personal business.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 8, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would like to see strict regulation of the so-called \"skip-trace\" vendors.</AC1><AC2> These are the companies that debt collectors and others hire to provide them with contact information.</AC2><AC3> From my own personal experience (common last name, many debt collectors after me), I can say that I believe that I'm at the mercy of these vendors.</AC3><AC4> They gather all sorts of information about people without verifying any of it, as far as I can tell.</AC4><AC5> One debt collector told my state's Attorney General that they hired one of these vendors who provided my phone number as a valid contact for someone with my last name and first initial.</AC5><AC6> This person was a stranger to me,</AC6><AC7> but the debt collector wanted me to pay the debt.</AC7><AC8> I think that these vendors should be strictly regulated and use a research tool other then the phone book to gather their information.</AC8><AC9> They should not be able to provide \"valid\" information unless it really is valid.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5], [3, 6], [0, 2], [0, 3], [2, 3], [7, 2], [7, 8]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"evidence\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Unless and until debt collection practices have greater transparency for consumers there will be abuses and misunderstandings regarding legal liability.</AC1><AC2> It's too much a pat answer to say consumers should seek legal advice.</AC2><AC3> Collectors should be required to say with a certain level of supported certainty whether the debt is valid or not.</AC3><AC4> Collectors should not be allowed to rely merely on a borrower's \"moral obligation\" to repay the debt.</AC4><AC5> Financially disadvantaged, naive, and gullible consumers, and specifically those individuals on fixed, limited incomes, i.e., older Americans, ESL citizens, etc. are especially vulnerable.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [2, 3], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In the case of medical debt, the statement should inform the consumer of the date and location of the service provided, including the name of the doctor who was in charge of the case (rather than a consultant or firm that never contacted the consumer) or the commonly used name of the location (such as a hospital or clinic) where the service was performed.</AC1><AC2> In my experience, cost-conscious consumers who are wary of scams have declined to pay legitimate medical debt </AC2><AC3> because they did not recognize the debt and could not get an answer to the basic question, \"Why do I owe this money?\"</AC3><AC4> When the debt is unexplained, it is prudent to refuse to send money,</AC4><AC5> yet when the debt is in fact legitimate, the consumer may suffer severe penalties for failure to pay.</AC5><AC6> A validation notice for medical debt should not simply repeat numerical codes or obscure abbreviations.</AC6><AC7> It should state, \"You were billed on (DATE) when you went to (PLACE).\"</AC7><AC8> If other debts related to the same visit have been paid, the letter should say so, e.g., \"You already paid for other services during this visit, but you still owe...\" Or, \"Your insurance paid for some of the costs of this visit, but you still owe....\"</AC8><AC9> This issue is related to the absurd complexities of medical billing,</AC9><AC10> but those complexities should not be used to conceal the origin of a debt from a consumer.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [6, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Information about the source of the debt (such as the date of the service) can be provided without infringing on the patient's privacy.</AC1><AC2> No one should be asked to pay a debt without first being told why they owe the money.</AC2><AC3> This is esp. true of medical debts, </AC3><AC4> which are notoriously complex and apparently redundant, with many charges occurring on the same occasion.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If this is an area that the CFPB is interested in regulating, I believe it will be necessary to initiate cooperative actions with local State judiciaries.</AC1><AC2> Because the CFPB is a federal agency,</AC2><AC3> it doesn't have authority to tell State governments (including the judicial branch) how to operate or how to interpret its own law.</AC3><AC4> Since some states are already taking steps in this direction ( like New York),</AC4><AC5> it is likely that the CFPB would find positive reception toward this effort.</AC5><AC6> But trying to accomplish change through federal rulemaking is not an option in this particular area.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [2, 1], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have never applied for credit in any way other by paper application,</AC1><AC2> and everyone I have ever owed money to has tons of paperwork.</AC2><AC3> I don't know how it works when you apply electronically,</AC3><AC4> but what's to prevent someone from saying they are owed money?</AC4><AC5> The burden of proof is going to have to be on the creditor,</AC5><AC6> and if they aren't getting paper signatures, they'd better have some pretty good proof otherwise.</AC6><AC7> Meanwhile, if you say they wouldn't lie about it, I would love to sell you my ocean front property in Nebraska.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [2, 1], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 8, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>While Alternative 1 seems simplest,</AC1><AC2> there are hidden complications.</AC2><AC3> Who defines what \"principal\" means?</AC3><AC4> With revolving credit accounts, interest accrues (as finance charges) and is rolled into the balance.</AC4><AC5> So does \"principal\" mean only the part of the balance that was charged by the cardholder (very difficult, if not impossible, for a collector to calculate) or the total charged off amount?</AC5><AC6> I understand that it can be difficult when dealing with different kinds of debts.</AC6><AC7> But I don't think this option will work for a large portion of consumer debt.</AC7><AC8> Alternative 2 doesn't work</AC8><AC9> because who defines when a consumer \"defaults\" on an account?</AC9><AC10> Many of us have missed a payment here or there,</AC10><AC11> but we get back on track.</AC11><AC12> So it's too ambiguous.</AC12><AC13> That leaves Alternative 3 as the most feasible,</AC13><AC14> but what about accounts that never had a periodic statement or billing statement?</AC14><AC15> I propose breaking down the total amount by stating the amount owed on the last statement issued by the original creditor, or, if no statement was ever issued, the original amount of the debt when incurred, and then an itemization of all debits and credits applied since that balance.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 3], [4, 3], [7, 11], [7, 8], [11, 9], [11, 10], [12, 6], [12, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The case law related to this portion of the FDCPA has made it risky for collectors to include anything other than exactly what the FDCPA says.</AC1><AC2> However, I don't think the law, as written, is easy to understand.</AC2><AC3> For example - the first sentence says unless you dispute the debt, it will be considered valid (\"dispute\" and \"valid\" aren't defined), but then goes on to say what the creditor will do if you notify them in writing.</AC3><AC4> So if the consumer only disputes verbally, what rights do they have, if any?</AC4><AC5> I think the law should be clarified,</AC5><AC6> and then I think the CFPB should create a uniform \"Summary of Consumer Rights\" that can be required to be included with all initial letters from collectors.</AC6><AC7> That way, debt collectors don't have to worry about overshadowing and trying to fit everything onto one page, or with the tricky area of providing legal advice by interpreting the FDCPA for the consumer.</AC7><AC8> Also, consumers can get a consistent message from all collectors.</AC8><AC9> If there is a concern about it being separate from the initial letter from the collector, there can be a mandatory one-line disclosure providing a link to a CFPB website with that Summary of Consumer Rights.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [3, 2], [4, 1], [5, 6], [5, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This proposed rulemaking is not about credit reporting.</AC1><AC2> I understand that people have significant concerns about their credit reports.</AC2><AC3> But that belongs in a reform of the Fair Credit Reporting Act, not the FDCPA.</AC3><AC4> Inserting credit reporting rules into the FDCPA would make things difficult for debt collectors who don't report to credit reporting agencies at all.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think it would.</AC1><AC2> I work for an attorney at a debt collection law firm</AC2><AC3> and I think this would make things a lot easier and simpler.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Credit bureaus are responsible for 95% of identity theft and inaccurate consumer credit files.</AC1><AC2> It's because their revenue comes from businesses who pay for access to their databases including phony ones.</AC2><AC3> I have a letter from a credit bureau that says the only thing they do to investigate/verify accuracy is ask the entity that initially reported the information if it's true.</AC3><AC4> New rules have to put tighter restrictions and procedures on credit bureaus</AC4><AC5> because they are the root of the actual problem.</AC5><AC6> Secondly, because they are private companies who should not be able to collect or retain any financial information without consumers permission.</AC6><AC7> Submission of proof of debt or other evidence/documents should be required.</AC7><AC8> Retention of the identity of the actual [business] persons reporting the account information should be required.</AC8><AC9> Credit bureaus and debt collectors should not be allowed to sell lists of accounts especially after the accounts are disputed. One creditor, one debt collector.</AC9><AC10> All debt collectors should be required to register on a national database, including phone numbers, that's publicly available online which they must update within 5 business days regarding any changes.</AC10><AC11> All lawyers should not be banned from becoming debt collectors.</AC11><AC12> Here is a a group of people that are trained, licensed in their State, </AC12><AC13> but they lie to circumvent the law and the courts.</AC13><AC14> At the heart of the mortgage fiasco were unethical lawyers who acted strictly for greed.</AC14><AC15> None of them were prosecuted or disbarred</AC15><AC16> because they hid themselves as representing lenders.</AC16>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [3, 4], [3, 5], [14, 15]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I meant to say, \"all lawyers should be banned from being debt collectors.\"</AC1><AC2> They are unethical and work strictly out of greed to circumvent the laws that are supposed to protect consumers.</AC2><AC3> Verification of debts should require the creditor to provide written proof of the initial debt instrument with the consumers' signature.</AC3><AC4> There should be a notarized statement of authenticity along with it.</AC4><AC5> This gives a consumer the documents to file a civil suit for fraud, if needed.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 1], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>just the phone number should show up on the called ID.</AC1><AC2> The consumer can google the number and figure out if they want to talk or call back the number.</AC2><AC3> More importantly, it gives attorneys the ability to make fdcpa claims against collection agencies</AC3><AC4> since we know who is calling.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A central system has privacy concerns</AC1><AC2> and it would be useful only if it included verification of who picked up the document and when.</AC2><AC3> Instead creditors and debt buyers should be mandated to allow secure document uploading to their own website with official notification that the document has been reviewed.</AC3><AC4> I have a pending case of a company misapplying my payments,</AC4><AC5> I had to send many registered letters and faxes with proof of payment which cost some money and time.</AC5><AC6> With this company anything you send them \"doesn't exist\" unless you have verifiable proof they have been forced to accept it.</AC6><AC7> It would be a lot easier for the consumers to just upload the documentation and get verification the company reviewed it which can be used for a complaint.</AC7><AC8> There should be penalties of fines for not marking an uploaded document as \"reviewed\" after a period of time.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The Consumer Finance Protection Bureau needs to have a large core of undercover agents that get jobs at collection agencies, credit agencies and servicers.</AC1><AC2> These agents need full federal law enforcement powers with guns and badges</AC2><AC3> so they can perp-walk suspects out of their offices and take them to federal holding facilities for trial when they have proof of criminal activity.</AC3><AC4> Currently it seems many creditors, servicers and debt collectors consider themselves above the law.</AC4><AC5> There's only two ways to discourage that thinking and that's jail time and/or fines.</AC5><AC6> After conviction, victims should receive a framed and signed (first name or nickname of the agent) photograph of the perp-walk.</AC6><AC7> They usually don't get their money back</AC7><AC8> but that's something they will treasure.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When a debt collection company (Bayview) took over servicing of my mortgage, I began receiving phone calls at work and on my cell phone about my mortgage payments</AC1><AC2> even thought they were not late.</AC2><AC3> This included robo-calls.</AC3><AC4> I was told this was 'standard' and to ignore these phone calls,</AC4><AC5> but I really got angry and filed a BBB complaint in the state of one office.</AC5><AC6> I was never late with one payment,</AC6><AC7> and our mortgage was not in debt collection.</AC7><AC8> Bayview may be a debt collector,</AC8><AC9> but they need to keep those services separate from their mortgage services.</AC9><AC10> Calling people at work, robo-calls, and harassing them when they do not have delinquent debts should be against the law.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am dealing with a debt collection company who is also a mortgage company.</AC1><AC2> They are having issues separating the two types of services.</AC2><AC3> They are also having an incredible amount of IT (web) problems.</AC3><AC4> Their website is down, or only their staff can see it, or they cannot upload my account information, etc.</AC4><AC5> Other IT issues include their System, which \"tells them\" it has mailed me documents, but apparently does not really do it.</AC5><AC6> My point is, I am able to capture a lot of this using ScreenShots and electronic communication, providing a very detailed log.</AC6><AC7> I have sent my screenshots of the errors I saw on my account screen to their IT staff,</AC7><AC8> and it may have helped resolve their website issues a few weeks later.</AC8><AC9> I would highly recommend the use of electronic media as a formal way to communicate on both ends.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [2, 4]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The agency I work for is small and follows FDCPA to the letter of the law.</AC1><AC2> And yet we are still sued constantly by attorneys representing debtors.</AC2><AC3> These attorneys count on the fact that it's less costly to settle than to go to court to prove that we have not violated the law.</AC3><AC4> Our retail division is in trouble</AC4><AC5> because we've recently lost our two largest clients -- for this reason.</AC5><AC6> They're now getting slapped with bogus lawsuits as well.</AC6><AC7> People don't even have to pay their bills any more;</AC7><AC8> they just send a \"cease and desist\" letter, hire an attorney, and wait for a settlement to roll in.</AC8><AC9> All this will lead to are more stringent rules around extending credit, which is not a good thing for the economy.</AC9><AC10> If we keep going down this slope, the only people who will be able to get credit will be those who don't need it.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is a fantastic idea.</AC1><AC2> Right now, debt buyers buy debt for an average price of 4 cents on the dollar.</AC2><AC3> Many debts are bought for 2-4 cents on the dollar</AC3><AC4> and many other debts are given away for free.</AC4><AC5> If I were an original creditor, would like to get the most money I could for a debt owed to me.</AC5><AC6> And so if I could get 10 cents on the dollar directly from the debtor, rather than 4 cents on the dollar from a debt buyer, then I would see no reason not to offer a significantly reduced debt settlement rate to the debtor (or as you call it, letting consumers bid on their own debt).</AC6><AC7> Right now, original creditors offer no significant reduced rate to debtor before selling for 4 cents on the dollar.</AC7><AC8> Most creditors barely even offer debtors 10% off the debt as a settlement offer.</AC8><AC9> Sure, a creditor could more quickly offload portfolios to debt buyers by selling them at 4 cents on the dollar.</AC9><AC10> But creditors could also make way more money offering a onetime chance at 10 cents on the dollar (or something really attractive but still more than 4 cents on the dollar).</AC10><AC11> Perhaps the CFPB should make a rule that allows consumers/debtors the chance to receive a onetime offer that is valid for only X amount of days (maybe 45 days) from the date of the letter sent from their creditors of a significantly reduced rate.</AC11><AC12> The offer would only be valid for a short amount of time and would also inform the consumer that, should the consumer not accept the offer, the creditor would then turn it over to a debt buyer.</AC12><AC13> This letter would only be sent if the creditor\"s intentions are to sell the debt and not just another attempt to collect.</AC13><AC14> So that this way it gives the consumer one final chance to clear the debt owed</AC14><AC15> and the creditors also have less loss and more profits and would be able to lend to more consumers, give better rates to consumers, and stimulate the economy.</AC15><AC16> Because more money that is changing hands at higher values (10 cents on the dollar vs. 4 cents on the dollar) instead of sitting in the accounts receivable section waiting to be collected (one day, if ever) stimulates the economy.</AC16><AC17> This rule would not negatively impact anything (or anyone) and only positively impacts everyone.</AC17><AC18> One minor impact might be on the debt collection industry possibly receiving less debt in their portfolios that they buy,</AC18><AC19> but this minor impact is offset by the large positive impacts on the economy.</AC19>\n### Here is the list of pairs of related argument components in this paragraph: [[12, 13], [12, 14]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yes, I do think your restrictions on workplace calls per week would be helpful,</AC1><AC2> but I do not see any information requiring details on the content of Robo-Calls. </AC2><AC3> For example, the calls I referred to earlier included robo-calls telling me that I had \"messages\" waiting for me in my Bayview Account, and to access these messages, I needed to call a special phone number.</AC3><AC4> Well, this was a bunch of baloney</AC4><AC5> it was just a recording wanting to know where I had sent my mortgage payment</AC5><AC6> I had not set up an electronic deposit yet, like they wanted,</AC6><AC7> so they assumed I was skipping a payment).</AC7><AC8> I believe those robo-calls were fraudulent and misleading,</AC8><AC9> particularly since I was never late on any payments, </AC9><AC10> and I never had any \"message\" waiting for me. Just a robotic collection message.</AC10><AC11> I received three of these messages</AC11><AC12> and they are still saved in my cell phone voice mail.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[7, 8], [7, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was flat out lied to by the attorney for a credit card company who brought a small claims suit against me. </AC1><AC2>I disputed the debt (and still do even after they garnished my wages</AC2><AC3>but they intimidated me into a payment arrangement then lied to me and said there was no court date anymore since I \"settled\".</AC3><AC4>I was skeptical and called the clerk of court's office only to find out they lied</AC4><AC5>and I did need to show up.</AC5><AC6>I showed up for the court date, even as I argued that this court had no jurisdiction over me because I never lived in that county</AC6><AC7>but no-one even the clerk's office would listen to me</AC7><AC8>and I was denied the right to go before a judge.</AC8><AC9>I was only given an opportunity to talk to the attorney for the credit card company and sign papers saying we had a payment arrangement.</AC9><AC10>Long story short, I made 1 of 2 payments then lost my job.</AC10><AC11>I called them immediately to tell them I would make the 2nd and final payment 2-3 weeks late because I had to wait for a final check.</AC11><AC12>They told me okay,</AC12><AC13>but unbeknownst to me,they went back to court without me and got a default judgement for $1600 on what would have been a $709 payment.</AC13><AC14>iI never got notice of the court hearing </AC14><AC15>nor did I ever get a copy of the judgement.</AC15><AC16>I didn't find out about it until I got a wage garnishment notice from my new employer 2 1/2 years later....VERY humiliating!</AC16><AC17>My employer got the wage garnishment notice a week before I did</AC17><AC18>so I couldn't even dispute it before my employer was involved.</AC18><AC19>Second, I called the clerk of court's office in that county (3 hours from my home) and argued that you can't go to court without giving me a chance to defend myself and I shouldn't be forced to drive 3 hours each way to a county I never lived in.</AC19><AC20>I was told by the clerk's office that they can file it wherever they want and I have to show up.</AC20><AC21>I asked \"So if they wanted to file this in California to be jerks you're telling me I'd have to get on a plane and fly to California to defend a $709 lawsuit\"\"</AC21><AC22>She said \"Yes.\"</AC22><AC23>THAT HAS TO CHANGE.</AC23>\n### Here is the list of pairs of related argument components in this paragraph: [[17, 16]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I support these restrictions on robo-calling and any calls during the work hours.</AC1><AC2> With respect to robo-calls, any robo-calls that are misleading should be restricted.</AC2><AC3> That is, a robo-call that tells you that you have a message or an account update, and the only way to get it is to call a special number with an extension, but when you call, it is just the same message asking where your payment is, is a waste of the consumer's time and the consumer's cellular resources (two phone calls, one received, one sent).</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [1, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Please consider robo-calls when developing rules for this section.</AC1><AC2> See my comments about robo-callers leaving messages on cell phones under robo-calling.</AC2><AC3> I understand the need to protect privacy,</AC3><AC4> but this is not the answer.</AC4><AC5> The messages left for me on my cell phone could have been returned by anyone with access to the cell phone (family members, snoopy friends) and information on a supposedly late payment would be disclosed by the robo-caller.</AC5><AC6> Robo-calling does not have the consumer's privacy in mind.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [0, 3], [3, 5], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yes. I fell onto hard times during a divorce and found out a few years ago that my dad (whom I haven't lived with for 20+ years) receives so many debt collection calls for me every day he quit answering his home phone.</AC1><AC2> This is unacceptable.</AC2><AC3> We cannot even figure out how they got his phone number</AC3><AC4> because I never lived at that address at any point while I had those credit cards and he never co-signed any loans or credit cards with me.</AC4><AC5> The only connection we can come up with is that my stepmom co-signed a short term furniture loan for me 20 years ago when I was just out of college and that maybe somehow her name is tied to my credit report in some way</AC5><AC6> although I've never seen it on my credit reports.</AC6><AC7> This is now 6 years after I went through my divorce </AC7><AC8> and he told me a few months ago he still gets several calls per week for me from debt collectors.</AC8><AC9> Personally, I don't think they should be allowed to call ANY number for more than 3 months without successful contact with the debtor.</AC9><AC10> Clearly, they don't have proof they've got the right number </AC10><AC11> and all they're doing by calling the same unverified number for 6 years is harrassing an innocent party.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I guess I should also have clarified in my previous comment that I have made attempts to deal with creditors directly if I know who they are and who they claim to be representing</AC1><AC2> but my personal perception is they PREFER to continue contacting 3rd parties</AC2><AC3> because they hope I'll just pay them to avoid the public humiliation.</AC3><AC4> And in regards to a comment I read here that creditors can call a 3rd party again if they have a reasonable belief that the person knows how to contact the debtor, I disagree with that entirely.</AC4><AC5> First of all, I'm not aware of any law that compels a 3rd party to provide current contact information for a debtor,</AC5><AC6> so even if they do know where that debtor is, they don't deserve to be harassed daily for months or years as punishment for not offering up that information.</AC6><AC7> Many people don't want to be involved</AC7><AC8> and no law that I know of says they have to if they aren't a party to the debt.</AC8><AC9> Secondly, there is no clear and concise way I know of that a creditor can prove what was a reasonable belief.</AC9><AC10> My in-laws have no idea how to reach my sister-in-law</AC10><AC11> because she wants it that way.</AC11><AC12> They haven't spoken in 3 years</AC12><AC13> and I don't see that changing.</AC13><AC14> You can't assume that certain relatives MUST know where a debtor is.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [3, 4], [3, 8], [5, 4], [9, 10], [11, 9], [13, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have had several doctor/laboratory debts placed on my credit report.</AC1><AC2> These are debts that I never rec'd a bill for or even a phone call from the hospital or facility.</AC2><AC3> I have very good health insurance that paid over $14k when I had my baby...</AC3><AC4> 3 months go by and I start getting notified by my credit monitoring agency that my credit score is going down.</AC4><AC5> things such as a (pediatric audiology test $83) when my baby was 1 day old.</AC5><AC6> apparently the audiologist doesnt bill through the hospital....</AC6><AC7> subsequently, they also dont bill the patients..</AC7><AC8> they outsource their billing to a 3rd party collection agency who immediately reports it to all 3 credit bureaus.</AC8><AC9> Maybe i missed that forumn on this sight,</AC9><AC10> A company can send a $100 bill to Transunion and say I owe it, </AC10><AC11> and BAM...my credit score takes a 10 point dive.</AC11><AC12> Agencies should not be able to put something on your credit report without first having not only validated the debt and provided any and all documents that prove you owe the debt, but they must be required to have attempted to collect the debt.</AC12><AC13> I have had businesses tell em that its cheaper to put the bill directly on your credit report than it is to hire a 3rd party to collect the debt.</AC13><AC14> This is a horrible injustice to the people who pay their bills, maintain health iunsurance and who will pay their outstanding debts.</AC14><AC15> The system is set up to force the consumer to prove their innocence (if you will) verus the creditor proving they are owed a debt.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[11, 9], [11, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Currently, CRA's deny responsibility for \"reporting\" inaccurate information given to them.</AC1><AC2> CRA's should be liable for both actual and punitive damages caused by \"reporting\" inaccurate information.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a college grad since 1979 and a first-time homebuyer, I have found widespread violations of the FDCPA among the creditors and their outsourced private collections agencies.</AC1><AC2> I've also found and been a victim of deception in the debt collection practice observing poor record keeping on the part of all parties.</AC2><AC3> We must first examine debt collection from a derivative and forensic viewpoint; corporate finance, federally/state funded institutions and their debt obligations.</AC3><AC4> GAAP allows for the write-off of old debts.</AC4><AC5> Yet and still the creditors outsource collection agencies to collect debts the creditor has written off of their balance sheet.</AC5><AC6> The debtor is always subject to the debt</AC6><AC7> because the collection agency takes a percentage</AC7><AC8> Then comes the finance charge (interest) and late payment charges.</AC8><AC9> In essence, the original debt remains the same</AC9><AC10> because the debtor is only paying commission, interest and late charges.</AC10><AC11> I attended a Texas private college (state funded) that lost its accreditation for mismanagement of funds.</AC11><AC12> My financial aid consisted of the BEOG, NDSL, Stafford Loan and the Merit Scholarship.</AC12><AC13> The school policy was to clear the balance of my bill before my grades were released.</AC13><AC14> Each grade period, whatever the balance was, my Mom used the funds she had left from our Social Security Income (father deceased 1972) after paying monthly expenses to send to me for my grades to be released.</AC14><AC15> After my marriage, the Dept of Ed (Higher Ed) offset two years of joint tax returns, private collection agencies constantly called.</AC15><AC16> When I was employed, I voluntarily paid $50/mo. for two years on this debt of which the principle was $4,650.</AC16><AC17> Even after over 30 yrs., the debt was recorded as a Federal Abstract of Judgement at the county registrar (filed by private attorneys) as if I still owe the debt.</AC17><AC18> I wasn't properly served.</AC18><AC19> The process server (whomever it was) left a large manila envelope.</AC19><AC20> Now the debt has been turned over to the Dept. of Justice in the State of Michigan.</AC20><AC21> My point is that there is a widespread conflict of interest among the creditor and those outsourced by the creditor for debt collection.</AC21><AC22> Most, if not all of these organizations are operated by taxpayer funding.</AC22><AC23> The taxpayers are the ultimate creditors.</AC23>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6], [8, 9], [17, 16]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Technology does not allow debtors or alleged debtors to distinguish land lines from cellphones of debt collectors; whether private or federal.</AC1><AC2> There appears to be a double standard between the debtor and collector.</AC2><AC3> I have received calls after business hours and sometimes even on a Sunday from a mortgage servicer, whom I will not disclose.</AC3><AC4> This particular servicer has even left an anonymous type of flyer (one that can be hung on a doorknob) with instructions to call the specific servicer's customer service phone number; without disclosing the name of the servicer, although I was already familiar with the phone number.</AC4><AC5> I would classify this as mail fraud</AC5><AC6> because it bypassed the mail system.</AC6><AC7> The same scenario with the service of process regarding my old school loan.</AC7><AC8> The service of process bypassed the mail system</AC8><AC9> These are both issues that should be resolved collectively by and among the FCC, FTC and DOJ (not all inclusive).</AC9><AC10> A debt collector can call the debtor from a phone number outside of the collector's company</AC10><AC11> so it won't be included in the company's phone log.</AC11><AC12> If the debtor attempts to return the phone call, the number is either inoperable or not able to receive incoming calls.</AC12><AC13> Collectors may even call a debtor in order to attempt them to give personal information about lowering the interest rate on their credit card (even if the debtor doesn't have a credit card).</AC13><AC14> It is obvious or apparent that there may be a credit card floating around in the debtor's name unknowingly.</AC14><AC15> These are all scenarios I have experienced.</AC15><AC16> We haven't gotten to the subject of sharing a debtor's information among the debtor's financial institution and the financial institution's correspondent institutions and investment advisor affiliates and other business combinations of the debtor (public utilities companies, mortgage servicers, insurance companies, pension fund mgrs, etc...</AC16>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I had surgery at a hospital in 2006.</AC1><AC2> I have 2 forms of insurance, both excellent.</AC2><AC3> Therefore I rarely have a medical bill to pay, or it is for a very small amount.</AC3><AC4> Sometime after the surgery (I do not recall how long after the procedure), there were repeated calls to my phone by an actual person who said, \" This is (first name), give me a call at (phone number)\".</AC4><AC5> Since we did not know the person,</AC5><AC6> no one called back.</AC6><AC7> We thought we should report it to the DONOTCALL list,</AC7><AC8> but we had no company name to report.</AC8><AC9> Finally I happened to answer the phone when that number appeared and the male voice said, \"you know what this is about, right?\"</AC9><AC10> and I said, \"no\".</AC10><AC11> He said, \" you have an overdue charge with (hospital name). You haven't paid your bill. I work with a bill collection company\".</AC11><AC12> I said \"I have never received a bill.\"</AC12><AC13> He said \"really?\"</AC13><AC14> I said , \"yes\"</AC14><AC15> He said, \"Call accounting at the hospital\".</AC15><AC16> I called the hospital and they said to talk to my insurance company.</AC16><AC17> I called my 2nd insurance company and they said both the first and the second insurance company had paid the hospital.</AC17><AC18> The 2nd insurance company said I did owe money on the bill, something like $1.08.</AC18><AC19> A bill collection company had been hired to collect $1.08 for which I had never received a bill!</AC19><AC20> I asked both insurance companies to send me additional copies of the Explanation of Benefits.</AC20><AC21> When I received the copies, I sent them to the billing department of the hospital with a check for the amount that the 2nd insurance company said I owed.</AC21><AC22> I never did receive a bill.</AC22><AC23> Nor was i warned it might go to a collection agency.</AC23><AC24> A collection agency was hired for an amount just slightly over $1.00.</AC24><AC25> Because of this experience, I do not plan ever to use this hospital again if I can help it.</AC25><AC26> My family has had referrals to doctors associated with this hospital,</AC26><AC27> but I always try to get a doctor who is not associated with it.</AC27>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [5, 4], [6, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This particular bill collector has in the past said that I owe $20.00 more as I had a non sufficient funds. [which I would not do].</AC1><AC2> I disputed it with my bank statements </AC2><AC3> and still they insisted that I have.</AC3><AC4> I refused to pay that.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I always pay my debts on time,</AC1><AC2> and this bill collector posts on my account late - which always has a 'late fee'.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Recently I received an \"offer\" from a firm indicating it would approve a new Visa or MasterCard account if I agreed to assume responsibility for a debt allegedly owed to another credit card firm.</AC1><AC2> The first firm, which apparently was the original creditor, apparently sold the alleged debt to a third party.</AC2><AC3> It was this third party that was making the \"offer\" to open a new credit account.</AC3><AC4> Of course, there was a \"hook.\"</AC4><AC5> If I agreed to assume financial responsibility for the alleged debt and if the third party opened the new account, the credit limit would be for the alleged debt plus a significant \"service charge\" for the transaction.</AC5><AC6> The finance charge was listed at 29%.</AC6><AC7> Another questionable aspect of the matter was no guarantee a credit line would remain open as the account was paid down.</AC7><AC8> Thus, if the initial \"credit line\" was $500 to cover the outstanding debt and service fee, as the balance were paid down and/or off, the credit limit could be decreased</AC8><AC9> so as to prevent it from being used for new purchases.</AC9><AC10> Obviously, I shredded the \"offer\" package</AC10><AC11> as I did not owe the initial debt.</AC11><AC12> I wonder how many people will consider this a relief of some type and agree to the \"offer.\"</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[7, 8], [9, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>One issue I am experiencing is that since I allegedly received an overpayment of wages from a former employer,</AC1><AC2> I have NONE of the consumer protections that I should.</AC2><AC3> I fall into the gray space of being a consumer</AC3><AC4> and my alleged (and incorrectly so) debt is considered \"commercial\"</AC4><AC5> and therefore there are absolutely NO regulations on the activities of the debt collector.</AC5><AC6> The individual assigned to my account has repeatedly revealed to a third party that he is trying to collect a debt from me.</AC6><AC7> The alleged debt has never been substantiated,</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [4, 2], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Some years ago, a debt collector was trying to collect a debt for an emergency room visit that included foot/leg xrays.</AC1><AC2> The problem was that the only time I had ever been to the hospital in question was a worker's compensation covered workplace injury and it involved only my hand (sliced open, six stitches).</AC2><AC3> I had contacted the collection agency and informed them that I did not owe anything and the circumstances of the visit.</AC3><AC4> Although that did not work, once I contacted all three credit bureaus with the same information, the debt collector was unable to verify the debt</AC4><AC5> and they removed it from my credit report - and stopped contacting me.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I'm concerned that the proposed rules are just a back door to allow Director Cordray to find out about my special toy collection.</AC1><AC2> He has sent me writings demanding my special toy collection,</AC2><AC3> and I'm afraid that now that he's Director of the CFPB, he's using his power to come after my favorite toy, Mr. Longblack.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Validation should be obtained from the Creditor by the Collection Agency prior to any Collection attempt is made by the Collection Agency at the very least.</AC1><AC2> It would be even better if the Collection Agency would give notice of validation at least 5 days before any attempt is made to Collect.</AC2><AC3> This notice would give the Consumer a narrow window to contact the Creditor directly to satisfy a debt that may be outstanding or to inquire about the details of the alleged debt before making a good faith payment to the Collection Agency.</AC3><AC4> The rules of Evidence Judicial Procedure should be horned during the validation process.</AC4><AC5> With out meeting some measure of the burden of proof all functions of Debt Collection is simply a burden to the Tax Payer,</AC5><AC6> any proceedings with out court worthy documentation would be frivolous.</AC6><AC7> If Custody of the debt is transfered form a Creditor to and Collection Agency the Contract must be available for the Consumer or Custody of the debt by the Collection Agency should be invalidated.</AC7><AC8> Privacy should be respected.</AC8><AC9> When it come to mortgage debt; Upon the issuance of a mortgage form a bank the bottom line banks holding do not decrease.</AC9><AC10> In essence The bank has written new currency (guaranteed by the future payment of the Property taxes, and other Taxes placed on the individual Citizens of the United States of America backed by there Social Security numbers and property deeds) in to existence.</AC10><AC11> Essentially the Borrower is giving the full amount of the mortgage plus interest to the mortgage lender.</AC11><AC12> If the FDIC truly backs Lenders, The lender should maintain the documentation of the agreed debt and a Default should be handled by the FDIC.</AC12><AC13> Outsourcing to a Collection Agency can compromises the custody of the debt and encourages harassment of the consumer by a 3rd party.</AC13><AC14> May Fraud be Minimal and Prosperity be Abundant.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [3, 4], [9, 8], [10, 9], [11, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>States Rights versus Federal Rights are the biggest issues with the rule making process.</AC1><AC2> There is a vast divergence of state law requirements that create areas that confuse consumers, regulators, and those in the industry as to what laws apply in what settings.</AC2><AC3> A universal rule that would apply in all settings would assist all parties to remove the ambiguity and conflict that currently exists with state multiple levels of regulation at the municipal, state, and two regulators at the federal level</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Although I don't think that it is necessary for the CFPB to have undercover agents, I do think that the CFPB should create a new class of examiners.</AC1><AC2> Currently the CFPB examiners only do examinations of the financial lenders and nonbank lenders.</AC2><AC3> But since the CFPB is now taking on the collection industry,</AC3><AC4> the CFPB should create a new classification of examiners to do onsite examinations of the debt collection companies.</AC4><AC5> This would not create any harm to the CFPB </AC5><AC6> nor would it impact the CFPB\"s budget or operations.</AC6><AC7> The CFPB\"s budget is not allocated through congressional legislation \"</AC7><AC8> it is allocated through monetary transfers from the Federal Reserve.</AC8><AC9> All the CFPB would need to do is ask for additional transfers from the Federal Reserve to create this new classification of examiners.</AC9><AC10> These new examiners would help the CFPB monitor the debt collection industry and would help stimulate the economy by adding more jobs.</AC10><AC11> This is a win-win solution.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [3, 2], [3, 4], [3, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have a charged off loan which I have been trying to get a repay plan on</AC1><AC2> but the debt is listed as one amount on my CBR and the debt collector had the balance increased by $12K more when discussing it over the phone.</AC2><AC3> That is outrageous that they do not have an accurate amount of what is owed to the original lender.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have a charged off debt I want to pay off.</AC1><AC2> I cannot afford a lump sum and asked the debt collector and original lender in writing mutiple times to work with me on a settlement.</AC2><AC3> They refuse to answer my letters</AC3><AC4> and I keep writing every month.</AC4><AC5> I think they should be made to at least respond to a customer requests for repayment.</AC5><AC6> They keep asking for my employer name and bank account number</AC6><AC7> because I know they want to use it to garnish my wages and bank account.</AC7><AC8> Of course I do not have $32k to settle.</AC8><AC9> It was a 2nd mtg,</AC9><AC10> I lost home due to loss of job,</AC10><AC11> they refused to modify</AC11><AC12> because they said investor wanted to foreclose instead.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2], [5, 6], [10, 11]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There is no need for these so-called examiners</AC1><AC2> but there is definitely a need for courageous and dedicated attorneys determined to enforce the laws that the CFPB should pass, laws that protect the ordinary folk, the innocent, those who're unable to protect themselves, even those who may have actually failed to pay their bills</AC2><AC3> because our constitution guarantees the right to our innocence unless proven guilty.</AC3><AC4> We cannot allow expediency to deny us such fundamental rights.</AC4><AC5> I believe there is such a thing as the Gideon Decision by the Supreme Court that provides for any accused to an adequate defence,</AC5><AC6> so if any debt-collector or creditor for that matter denies the alleged debtor the right to have his day in court or to a proper defence, then the CFPB attorneys should come down hard on such violators.</AC6><AC7> The principle behind any rules promulgated by the CFPB must ensure that no alleged debtor get bullied into paying up or blind-sided by the court into doing so.</AC7><AC8> Sometimes, there are reasons why the outstanding bills are not paid </AC8><AC9> and the consumer should be allowed to confront the creditor to resolve any complaints by the consumer before the bills are paid.</AC9><AC10> It's a very straight-forward and simple situation actually.</AC10><AC11> All the CFB needs to do is to enact basic regulations that protects the consumer and stipulates very clearly that the burden of proof must be borne by the creditor before any debt-collector can be engaged to pursue such debts.</AC11><AC12> The debt-collector must only be allowed to follow specific guidelines when doing so</AC12><AC13> and the matter should be referred to a small claims court to have both sides plead their case before the court issues a ruling, rather than to allow the claim to be reported to a credit reporting agency </AC13><AC14> that will destroy the credit score or rating of the consumer without his knowledge, which is absolutely wrong.</AC14><AC15> Only lawful and valid debts, i.e. when a judgment order has been made, should be allowed to be reported to any credit reporting agency, to avoid creditors and debt-collectors from using such agencies to damage the interests of alleged debtors with unfounded or unproven debts.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [5, 4], [12, 13]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It could be treated just like any document you fax or snail mail,</AC1><AC2> uploading is just an easier way to get it there.</AC2><AC3> As to fine time, I would say 48 hours.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I still stand by what I said;</AC1><AC2> CFPB should have a large core of undercover agents with arresting powers.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was a reference for an ex-boyfriend on a student loan application.</AC1><AC2> One of the FDCPA rules is that the reference can only be contacted once by a creditor.</AC2><AC3> Well, each time the account is sold to a new collection agency, they call me again,</AC3><AC4> even though I tell them I have no idea where he is.</AC4><AC5> I think creditors skirt the FDCPA regulations in a manner that harasses consumers.</AC5><AC6> For any given account, the reference should only be able to be called a set amount of times--such as the first three collection agencies to purchase the debt from the original creditor.</AC6><AC7> Here it is, almost 9 years later, and I am still getting calls for a person who is now a stranger to me.</AC7><AC8> Since it is a student loan,</AC8><AC9> it could go on forever.</AC9><AC10> There is no statute of limitations for government guraranteed debt that I am aware of...</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[8, 7], [8, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Items 1 through 10 should all be provided on the validation notice.</AC1><AC2> Number 10 specifically should include the Date-of-service or DOS for the medical debt.</AC2><AC3> Many consumers do not realize that medical debt goes to collections just like any other consumer debt.</AC3><AC4> They mistakenly believe that their insurance company will resolve the issue.</AC4><AC5> Also with extensive medical bills ( inpatient surgical stay) consumers have professional bills from each physician ( radiology, pathology, etc) in addition to technical component bills for the facility.</AC5><AC6> Many times the consumer never sees these medical providers and either mistakes the bill for another aspect of the service rendered or, again, just assumes the bill/debt will \"be taken care of\".</AC6><AC7> additionally the name of the consumer's insurance Co./plan on the validation notice would be quite helpful.</AC7><AC8> This may seem to be a great deal of extra information</AC8><AC9> but the originating physician and/or facility obtain this information at the time of or prior to service.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [1, 4], [1, 5], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When calling about a debt, debt collectors MUST verify that they are speaking to the debtor(s) or other adult within the household.</AC1><AC2> I know that is stated within the FDCPA</AC2><AC3> but from experience I know it doesn't always happen.</AC3><AC4> My situation goes back to the 1970's</AC4><AC5> but it was done then </AC5><AC6> and it's probably still being done today.</AC6><AC7> Calling repeatedly, threatening, screaming, cursing at children gets collectors absolutely nowhere.</AC7><AC8> It is a most disgusting form of abuse that should never be tolerated.</AC8><AC9> New language in the FDCPA should specifically and clearly state this.</AC9><AC10> Additionally, there should be some form of penalty for collectors who engage in this demeaning and useless practice.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [9, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My husband called a creditor about payments to an old account and wanted to make the account current after missed payments, due to job loss.</AC1><AC2> The account was reopened under a new account number.</AC2><AC3> Now I have 2 accounts on my credit report with the same amount.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In Michigan a company had its Collection Agency Revoked due to unethical practices 2008.</AC1><AC2> But this did not stop them.</AC2><AC3> Now they practice as attorneys and continue the unethical practices.</AC3><AC4> Yes states must figure out how to close this loophole.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 0], [3, 1], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yes, that just happened to me today,</AC1><AC2> someone called trying to locate a friend saying they were a \"courier service.\"</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It might help to take a look at how debt collectors are compensated.</AC1><AC2> I think, based upon people I know who have held such work, that collectors who receive their pay based on a commission are incentivized to abuse the consumer.</AC2><AC3> I do not think the CFPB's mission is to provide job security for the debt collection industry.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Marian makes an excellent point about how Debt Collectors are paid.</AC1><AC2> They try to get as much money upfront as possible.</AC2><AC3> Ironically, if they get too much money upfront, the credit card company might snatch the account back from the debt collector.</AC3><AC4> If the amount is \"too low\" that the debt collector receives, they are not interested.</AC4><AC5> This goes against many sales principles that it is easier to interact at a later date with a paying customer versus trying to make a big score all at once.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I had an issue where an attorney,acting on my behalf,requested verification of the loan debt and never heard back from the collector.</AC1><AC2> Therefore can not move ahead with settlement until they respond.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I too have received calls from collectors who are on fishing expeditions, looking for a person who owes money.</AC1><AC2> THE PROBLEM IS, EVEN AFTER BEING INFORMED THAT THE PERSON THEY ARE LOOKING FOR CANNOT BE REACHED AT MY PHONE NUMER AND TO PUT ME ON THEIR DO NOT CALL LIST - THEY STILL CALL.</AC2><AC3> I have contacted local law enforcement, state attorney general and federal levels and been informed that if I owed money, I can have the debt collector contact me in writing only, but if I don't owe money, I have no protection because the debt collector has a right to do business.</AC3><AC4> Unless the debt collector has more than a last name that matches the person's who owes the debt, they should be allowed to attempt to contact that phone number ONLY until they are told that that person cannot be reached at that phone number.</AC4><AC5> They should need to have more than a last name for any further phone calls.</AC5><AC6> They should also have to tell the person they insist on calling why they believe they can find the person who owes the money there.</AC6><AC7> Additionally, they should also be required to inform the consumer of how to file a complaint if the calls continue.</AC7><AC8> There should be a penalty for harassing people who don't owe money.</AC8><AC9> When you don't owe money, getting phone calls early in the morning or late at night twice a week is harassment</AC9><AC10> the more abusive ones robo call several times a day and hang up when an answering machine picks up).</AC10><AC11> Additionally, the means of protecting yourself from harassment should not require any financial burden to the consumer.</AC11><AC12> I was told I could file a lawsuit in the case of one extremely abusive collector</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 0], [3, 1], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It seems to me that the system must provide a series of 'handshakes': When a dispute is initiated; when the dispue is resolved; or when a dispute is withdrawn.</AC1><AC2> In each case the consumer must know with certainty that the collector acknowledges the consumer's position and that the CRA has been properly notified.</AC2><AC3> The CRA must be party to the handshake,</AC3><AC4> It is unacceptable that consumer's complaints can laguish for months with the consumer having no way to determine whether the CRA has received updated information from the collector or whether the CRA is taking unduly long to process the update.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have never been deliquent on my State taxes.</AC1><AC2> Due to an error made by the company I worked for in 2008, which didn't take out taxes, I am now faced with dealing with the State Collection agency.</AC2><AC3> I have never heard of the State threating the residents to try to collect taxes.</AC3><AC4> I called and coopertaed,</AC4><AC5> however, the callers are harassing me from morning to night.</AC5><AC6> I have excellent credit and have worked for many years to maintain my credit standing.</AC6><AC7> I have never owed Federal taxes that I have not agreed to pay.</AC7><AC8> And never in my life owed State taxes</AC8><AC9> and I am shocked that they can hound the residents like private collectors do.</AC9><AC10> I am retired and and on a fixed income.</AC10><AC11> For the State to be able to threaten the residents who are making attempts to pay the taxes, (one year) seems like a violation of rights.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[8, 5], [8, 6], [8, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In 2010 I was sued by a debt collector for a debt.</AC1><AC2> At the time I was in my final year of law school and was surprised at the amount of misinformation used by the plaintiff's attorney (e.g. claiming that no proof of assignment was necessary).</AC2><AC3> I informed the attorney that I would need proof that this was my debt as well as proof that his client had proper assignment of the debt.</AC3><AC4> He responded by threatening (via e-mail) to interfere with my Bar admission process.</AC4><AC5> I did not believe that an unsubstantiated debt would affect my ability to sit for the bar</AC5><AC6> and so I stood my ground.</AC6><AC7> He dropped the case (without prejudice) in Magistrate Court and then re-filed in State Court five months later while I was going through my Certification for Fitness process.</AC7><AC8> As a result of his second lawsuit, the State Bar did not allow me to sit for the Bar</AC8><AC9> due to \"a pending lawsuit\" about debt.</AC9><AC10> He eventually also dropped the lawsuit in State Court.</AC10><AC11> He never shared proof of this purported debt nor did he ever produce proof of assignment</AC11><AC12> presumably because he never had valid proof of either).</AC12><AC13> Nonetheless he was effective in \"punishing\" me by interfering with my ability to sit for the Bar after graduating from law school.</AC13><AC14> this occurred in Georgia.</AC14><AC15> Their rules for Bar Admission are available online at</AC15><AC16> __URL__</AC16>\n### Here is the list of pairs of related argument components in this paragraph: [[13, 14], [13, 15], [5, 4], [7, 6], [10, 11]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree that expanding the scope of the validation notice would benefit consumers.</AC1><AC2> Especially important is a means for the consumer to contact the original creditor and identify the account in question.</AC2><AC3> When debts are sold multiple times it becomes impossible for consumers to: (1) determine if the account is theirs; (2) validate proper assignment; and (3) determine if the statute of limitations has expired.</AC3><AC4> The current requirements facilitate \"zombie debt\" accounts which - although already paid by the consumer - come back to life again and again.</AC4><AC5> Absent a means for consumers to identify an account there is no way for them to verify that they have previously paid that debt.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [4, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As an \"authorized user\" who has no access to the actual credit card, my credit rating is suffering </AC1><AC2>because the \"account holder\" presently, is only able to make the minimum monthly payments.</AC2><AC3>I don't think this is fair and have not been able to get a direct response from anyone to see if card companies can legally do this when they collected no information from me but my name!</AC3><AC4>There was NO FULL DISCLOSURE stating that as only being an \"authorized user\" said card company would report on my credit report.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I live in Florida where proof of the debt is getting difficult for debt buyers to prove without them falsifying documents.</AC1><AC2> I currently have a case where the Debt bill of sale was whited out in three places,</AC2><AC3> sadly these documents were filed by an attorney at law registered with the Florida Bar Association.</AC3><AC4> Debt buyers have no scruples</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree with MER.</AC1><AC2> I have experience as a debtor, pro-bono attorney and debt collector.</AC2><AC3> You can't expect collectors to be judge or jury.</AC3><AC4> The cease communication right is meant to to force the collector to sue or go away.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Dear CFPB: I hope you will separate the comments about debt buyers from those about debt collection in general.</AC1><AC2> This is another area where you should throw the book at collectors telling deliberate lies or misrepresentations.</AC2><AC3> On the other hand, there are too many federal suits brought by consumers who were not misled but who allege that the least sophisticated consumer might have been misled by a letter written in good faith.</AC3><AC4> The only ones who benefit are attorneys.</AC4><AC5> The CFPB has power under UDAAP in addition to the FDCPA to punish liars.</AC5><AC6> They should use it.</AC6><AC7> Collectors, who are just lay people in most cases should not be held to a strict liability standard.</AC7><AC8> Punish bad actors but </AC8><AC9> restore reasonableness to the act.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Honest, respectful and open communication between consumers and collectors should be the goal.</AC1><AC2> If there are too many roadblocks to making contact with a debtor, more consumers will find negative information on their credit reports and have more lawsuits filed against them.</AC2><AC3> Rule number 1 strikes the right balance.</AC3><AC4> If the consumer responds, the consumer will receive the mini-miranda disclosure and information about the debt.</AC4><AC5> If the named person is not at the number, is it really so awful to call the collector and let them know?</AC5><AC6> If calls contiue after that point from the same collector, then there should be penalties.</AC6><AC7> Professional collectors do not want to waste time calling a wrong number.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do not think collectors would mind reimbursing consumers who are charged per call or per message.</AC1><AC2> Add $5 for the hassle of getting the refund.</AC2><AC3> Collectors should have a way to make contact with consumers who choose not to have a flat-rate telephone service.</AC3><AC4> Honest, respectful and open communication by all parties is the key to giving consumers enough information to identify and understand debts and come to workable resolutions for legitimate debts.</AC4><AC5> It is also the key to stopping calls to wrong numbers.</AC5><AC6> Collectors who are not honest and respectful should be fined or lose their right to be licensed.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [2, 3], [5, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My experience has been that people younger than I (a boomer) prefer to communicate electronically (emails, texts & chats).</AC1><AC2> I know that when I was deeply in debt, I would have preferred not to have to speak to a real person.</AC2><AC3> There is a legitimate concern about unencrypted email or the potential for consumers not to consider that others may have access to their email.</AC3><AC4> However, in general, we should encourage communication, however that happens - especially if it is in a form preferred by a particular consumer.</AC4><AC5> I believe that emails, chats & texts should all be considered writings.</AC5><AC6> I don't know how you include all disclosures unless you direct someone to a place where they can read them in plain english.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The Telephone Consumer Protection Act of 1991 (TCPA) was passed by the United States Congress in 1991 and signed into law by President George H. W. Bush as Public Law 102-243.</AC1><AC2> It amended the Communications Act of 1934.</AC2><AC3> The TCPA is codified as 47 U.S.C. 227.</AC3><AC4> The TCPA restricts telephone solicitations (i.e., telemarketing) and the use of automated telephone equipment.</AC4><AC5> The TCPA limits the use of automatic dialing systems, artificial or prerecorded voice messages, SMS text messages, and fax machines.</AC5><AC6> It also specifies several technical requirements for fax machines, autodialers, and voice messaging systems\"principally with provisions requiring identification and contact information of the entity using the device to be contained in the message.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe that some collection agencies attempt to coerce payment in order to reset the clock on debts that would otherwise be time-barred.</AC1><AC2> The real issue here however is one of proper record keeping.</AC2><AC3> The collection agencies may not be fully sure if the debt is time barred or not </AC3><AC4> simply because it has passed hands several times.</AC4><AC5> A transcript or log should be available to consumers upon request (at a minimum) showing when, where and who held the collection.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [2, 3], [4, 1], [4, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Partial payments should NOT revive the debt.</AC1><AC2> The original lender or the agencies working on their behalf have more than reasonable time to collect on an outstanding amount owed.</AC2><AC3> We have rules in place on both collecting debts and on reporting them</AC3><AC4> and partial payment on a debt should not circumvent those rules.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe Amex handles this the best.</AC1><AC2> The account holder is liable for all charges made by themselves and any authorized users added to the account.</AC2><AC3> Authorized Users however are given a unique card number and can be held accountable for any charges they make.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Email: Yes so long as it is not a \"blind\" email attempt at reaching an individual </AC1><AC2>as it may reach the incorrect party (first.lastname@company.com when it should be first.lastname1@company.com</AC2><AC3>The down side to this is the inevitable fishing attacks by scammers.</AC3><AC4>Email should therefore be limited to times when the consumer initiates it or formally lists their email with the 3 major reporting agencies as a method of initial contact.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Texts: No, text messaging and cell phones should be prohibited </AC1><AC2>as there is not a viable means for the consumer to record the text and bring it into court as documentation if needed.</AC2><AC3>All the issues raised about collectors calling the wrong individual or family members would be 100x worse with texting.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Social Media: While the courts have made the rare exception for use of social media as a means of giving notice, </AC1><AC2>not everyone is on every social media platform.</AC2><AC3>I am very internet savy yet I am not on foursquare, pinterest and several others.</AC3><AC4>On FB, Twitter and others there are several thousand people with my name who may get incorrectly notified.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2]]", "output": "{\"relation_types\": [\"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Collection email should not be sent to a consumers work place email address.</AC1><AC2> As I stated earlier, email communication should be consumer initiated at this time unless the consumer specifically opts to list an email address of record with the 3 major credit reporting agencies.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Email correspondences from a company or collection agency should list the state they are registered in and the registration number for consumer validation purposes.</AC1><AC2> There is way to many scam emails to possibly think an email from a collector would be valid.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Off the top, I believe NYC has similar laws where business are not allowed to charge extra for the use of credit cards</AC1><AC2> however it seems online payments to the city (taxes, water bill, traffic ticket, etc) using a credit card are still assessed a processing fee.</AC2><AC3> It seems NYC itself is confused about this.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Collectors should be barred from stating that payment of a debt will definitively improve a consumers credit score </AC1><AC2>as FICO (the industry standard) uses proprietary algorithm that the collection agent cannot possibly guess at.</AC2><AC3>Yes, a collection agent, in good faith negotiation for resolution of the alleged debt should be able to remove the collection trade line from the consumers credit reports which should be stipulated in a binding settlement agreement signed by both parties.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As there can be a substantial monetary impact from incorrect entries on a credit report in the form of higher interest rates or being unable to secure a loan,</AC1><AC2> bonafide disputes should NOT be allowed on a credit report.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Collection agencies should abide by the rules and regulations surrounding HIPPA (medical), Customer Proprietary Network Information (FCC) and other statutes already in place.</AC1><AC2> While the CRPB cannot change those statutes, </AC2><AC3> agencies must still abide by it.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Collection Calls and Dunning notices (via letter or email) should include a unique Collection ID.</AC1><AC2> This would be listed in credit reports for the purposes of tracking </AC2><AC3> and consumers would be able to enter into a online database provided by the CRPB with the type of violation or issue.</AC3><AC4> This would also make it easier for the CRPB to look up disputes and determine if there's an actual issue.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There needs to be rules around how disputes are handled for people with the same or similar names.</AC1><AC2> There needs to be a process for disputing incorrect information on a credit report as well as for handling mistaken identity with the courts.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe reasonable will depend on the circumstance of the dispute and the type of debt.</AC1><AC2> A formal checklist should be created for various scenarios </AC2><AC3> and the analyst reviewing the dispute should be able to enter comments against the checklist which would be part of the eoscar transcript.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe all of the possibilities listed are necessary.</AC1><AC2> I never did business with Joe's Collection Agency and would never recognize any debt they allege is owed.</AC2><AC3> Interest and other fees would make the amounts unrecognizable either even in the event I could miraculously determine that $757.24 is an old utility bill.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am currently going through a miserable experience with a creditor and debt collector.</AC1><AC2> In 2004 I completed my college education and consolidated all of my student loans through Nelnet.</AC2><AC3> In 2005 (or so) I started to get calls from debt collectors stating that I was delinquent on my loan repayment.</AC3><AC4> I explained the situation, that I had made all of my timely payments through Nelnet and, before I would pay anything else, I would need to see some proof of the debt.</AC4><AC5> I never received any proof of the debt </AC5><AC6> and this conversation reoccurred several times for the next five years.</AC6><AC7> In 2011 I wanted to buy my (wife\"s) dream home.</AC7><AC8> It was a significant purchase </AC8><AC9> and the bankers I talked with indicated I needed to clear up the student loan issue to be approved.</AC9><AC10> I reached out to the original creditor and the debt collector and begged for some proof of the loan.</AC10><AC11> They then provided me with a loan application (nothing to indicate that the application was approved or that any funds were ever dispersed to me).</AC11><AC12> While I was not comfortable with the proof, </AC12><AC13> I knew that fighting it out in court would take longer than I was willing to take.</AC13><AC14> So, I was very purposeful in my conversations with the original creditor and the debt collector to make sure that the issue would be cleared on my credit report if I paid the full value of the (alleged) loan.</AC14><AC15> I also recorded the conversations I had with the original creditor and the debt collector.</AC15><AC16> I paid the original loan amount </AC16><AC17> and (if you didn't see this coming) the original creditor refused to update my credit report.</AC17><AC18> And, even after providing the credit reporting agencies with proof that the debt was paid, they also refused to update my credit report.</AC18><AC19> To make matters worse, after the debt was paid, I received a notice from the debt collector that several thousands of dollars had been excused.</AC19><AC20> I immediately contacted the debt collector and requested documentation that would support their amount due, including documentation where I agreed to a specific interest rate.</AC20><AC21> No response from the debt collector.</AC21><AC22> So, I am now arguing it out with the IRS regarding any additional taxes that may be due.</AC22><AC23> And, even though I paid the debt two years ago, my credit report has not yet been updated.</AC23><AC24> It is simply ridiculous than any business would have this much power to have such a negative impact on an individual without any documentation to back it up.</AC24><AC25> Any creditor should be required to provide certain documentation prior to making a negative credit reporting and there should be significant consequences for any creditor/debt collector that pursues a debt without having the required documentation.</AC25>\n### Here is the list of pairs of related argument components in this paragraph: [[13, 12], [21, 19], [21, 20], [24, 23]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It apprears that the debt collectors of the debt collection industry are conducting a money laundry and racketing operation by explointing and obtaining monetary from comsumers for products that they don't sell to them or services that they don't provide to consumers with no inital purchase contract with consumers.</AC1><AC2> It appears that debt collectors are obtaining monetary from consumers where they don't have licenses to sell products to consumers or provide services to consumers.</AC2><AC3> It appears that debt collectors are costing companies money when companies are trying to recover their loses when they miss payments from their customers for the products that they sell to their customers or the services that they provide to their customers with alegal purchase contracts.</AC3><AC4> It seems that debt collector are relying on companies' money and on consumers' money for an income when they are not initially involved in the a company sale of products to consumers or in the distributing of a company of services to a consumers.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A question that I'd ask surrounds dialects.</AC1><AC2> There are numerous dialects for Spanish, French, etc.</AC2><AC3> and it would be very expensive for agencies to translate every letter into every dialect of a certain language, Spanish being the most common for this type of occurrence.</AC3><AC4> I'd greatly appreciate feedback, commentary and also recommendations on everyone's view on how to address differing language formalities.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If a bank is going to sell a consumer's debt, the bank should be required to notify that consumer IN ADVANCE, and allow that consumer a fair chance to bid on and purchase his/her own debt, on terms just as favorable as the terms offered to any other debt buyer (which at present is usually pennies on the dollar).</AC1><AC2> Debt buyers contribute nothing to society.</AC2><AC3> Yet, they are allowed to obtain windfall profits by pursuing impoverished consumers for the full face value of such debts.</AC3><AC4> This proposal would entail changes more extensive that just \"notice\" </AC4><AC5> as it would require a change from bulk loan sales, to requiring an opportunity to purchase individual loan in certain circumstances.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would take a hard look at 'credit reporting' from what is being reported by a creditor and then what is reported by a debt collection or debt buying company.</AC1><AC2> For example, if a creditor obtains a judgment amount greater than the account balance, that amount is likely not reported </AC2><AC3> because creditors seldom have system capabilities to make adjustments to accounts.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>One theme we see throughout comments is that debt sold adds confusion as to whom is the creditor, and also triggers a new credit entry, making the debt appear as incremental (additional), when it is simply transferred, and fresh.</AC1><AC2> The solution to this is simple; </AC2><AC3> do not allow credit bureaus to ever list more than one entry for the same debt.</AC3><AC4> Put the burden of accurate recordkeeping on the bureaus, </AC4><AC5> because they are the only entities who have a responsibility for accurate recordkeeping </AC5><AC6> and they are paid to keep accurate records.</AC6><AC7> Currently the cost of sloppy systems is externalized to both creditors and borrowers, both of whom tend to re-externalize it to other creditors and borrowers in the form of higher costs.</AC7><AC8> It is irrelevant whether these dual entries are caused by negligence, incompetence, or malice on the part of the creditor or collector </AC8><AC9> because it is the responsibility of the credit reporting agency to make this practice impossible.</AC9><AC10> Adding steep fines for double reporting would incentivize CRA's to police their systems so each debt only garners one entry.</AC10><AC11> Since CRA's are immune from libel suits in most of the country </AC11><AC12> regulatory oversight is especially important.</AC12><AC13> Conversely, clarifying that reporting agencies are not immune from state libel laws -- that regulatory authority is in addition to state defamation law -- would also quickly incentivize more accurate reporting.</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5], [7, 8], [11, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was harassed for months by a collector who used robo-calls 5 and 6 times a day and blocked its caller ID, for what turned out to be five different debts, none of which were mine.</AC1><AC2> Robo-calls were not answered;</AC2><AC3> if I picked up, nobody was there, </AC3><AC4> and no messages were ever left.</AC4><AC5> The blocked caller ID was \"1 Unavailable,\" which is designed to outfox call-blocking from the recipient's end, and makes it impossible to identify the caller using reverse number lookups and the like.</AC5><AC6> One day I picked up </AC6><AC7> and finally there was someone on the other end, </AC7><AC8> so I was able to figure out who was calling, </AC8><AC9> although they were very reluctant to say who they were.</AC9><AC10> I then looked them up on the internet and got a phone number for them.</AC10><AC11> I repeatedly stated I was not the person they were looking for, </AC11><AC12> but they refused to stop calling.</AC12><AC13> I finally got an attorney </AC13><AC14> and after months of the attorney bickering with them, I did get a small money settlement.</AC14><AC15> This was occurring when I was getting chemotherapy treatment for cancer and was very ill.</AC15><AC16> My life was hell for months because of these practices.</AC16><AC17> Collectors should be prohibited from concealing either their identity or their call-back numbers.</AC17><AC18> This happened </AC18><AC19> because I had moved and was assigned a new number that evidently had belonged to a number of individuals who had outstanding debts.</AC19><AC20> I was afraid to change my number again </AC20><AC21> because it would just usher in a new batch of collectors.</AC21><AC22> There should also be much, much, much stiffer monetary penalties for violations.</AC22><AC23> The guilty party in the above scenario was a national collection agency with huge annual revenues; </AC23><AC24> the piddly amount I was eventually paid was to them a tiny fraction of one cent compared to their annual revenues.</AC24><AC25> I just happen to be an attorney myself, and ran their name on Pacer--</AC25><AC26> they had been sued over and over in state and federal court and had actually paid million dollar fines to state attorneys general--also just a small cost of doing business for them compared to their enormous annual revenues.</AC26><AC27> We need much, much stiffer penalties.</AC27><AC28> These people are cyber bullies with absolutely no scruples.</AC28><AC29> At the very least they should be required to identify themselves on caller i.d. with a legitimate callback number, </AC29><AC30> and robo-calls should be made illegal.</AC30>\n### Here is the list of pairs of related argument components in this paragraph: [[7, 6], [16, 15], [17, 18], [19, 20], [21, 23], [26, 23], [26, 25]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I left a long comment about one particular collector, but recently was harassed by yet another one who was trying to collect from someone else who was not me.</AC1><AC2> Their caller ID was not a phone number;</AC2><AC3> it was just the names of different states, but turned out to be the same company.</AC3><AC4> These people are bottom-feeders with no scruples.</AC4><AC5> Accurate caller ID should be required </AC5><AC6> so the victim can at least identify the collector and have a call-back number for them.</AC6><AC7> And monetary penalties should be much, much stiffer to discourage their outrageous, predatory and harassing practices.</AC7><AC8> Harrassment is part of their business models.</AC8><AC9> These people are scum and should be required at the very least to identify themselves accurately.</AC9><AC10> Robo-calls and ID spoofing should be illegal with stiff fines.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>They will just continue to call.</AC1><AC2> Not answering does not stop the constant calls.</AC2><AC3> They need to be required to identify themselves accurately </AC3><AC4> so the consumer has at least a fighting chance to speak with them.</AC4><AC5> In my case I have no debts of my own but am constantly harassed for other people's debts </AC5><AC6> because I have a fairly common last name.</AC6><AC7> They just start calling everyone with the same last name as their actual debtor.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It doesn't just \"occasionally\" happen.</AC1><AC2> It happens all the time.</AC2><AC3> Those of us with common names are sitting ducks for these scumbags.</AC3><AC4> I am constantly harassed by collectors looking for someone else.</AC4><AC5> Call blocking programs do not work out of area, </AC5><AC6> so call-blocking is no protection whatever.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [0, 1], [5, 4]]", "output": "{\"relation_types\": [\"evidence\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Right now collectors are legally required to stop phone contact when notified by the consumer.</AC1><AC2> They do not stop.</AC2><AC3> And the law is not enforced.</AC3><AC4> Reporting violations to regulators does nothing except get the complainant into some sort of database, </AC4><AC5> and the regulators are never heard from again.</AC5><AC6> There are decent laws on the books.</AC6><AC7> It's the enforcement that is a failure.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The problem is enforcement.</AC1><AC2> When collectors are notified to stop calling the consumer's workplace, </AC2><AC3> they refuse to obey the law that requires them to stop.</AC3><AC4> Reporting violations to the regulators is futile, </AC4><AC5> because nothing is ever done by way of enforcement and the collectors know this.</AC5><AC6> Put teeth into enforcement.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 2], [3, 4], [5, 0]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Calls to the workplace should not be permitted at all.</AC1><AC2> Harassing the consumer at his her/workplace can come to the attention of the employer and get the consumer fired or limit advancement.</AC2><AC3> The collector then does not get paid because of the collector's own egregious conduct.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Collectors constantly abuse laws concerning phone contacts, </AC1><AC2>and there is no enforcement for violators.</AC2><AC3>Collectors should be limited by law to contacts by mail.</AC3><AC4>These people are bottom-feeders who ignore the law.</AC4><AC5>Cut them off from phone contacts altogether.</AC5><AC6>They have proven again and again over decades that they are scofflaws.</AC6><AC7>No phone contacts.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 0], [2, 1], [2, 3], [4, 3], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Additionally, as loans are set up on varied systems and they fall in to collections for calls to be made </AC1><AC2>a break-out of phone types should be part of the \"Solutions\" .</AC2><AC3>Example Home designated area, work designated area and Mobile-cell as well.</AC3><AC4>Three separate 'Solutions\" therefore giving a increased likelyhood of calls to be within what the statue requires.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As Director I can clearly in good faith state that as we service our potential losses </AC1><AC2>and my Team make collection calls contact is generally made at work place as well.</AC2><AC3>Let me also state that many of the call backs are made from Members at work as well.</AC3><AC4>It all depends on the employer and the work conditions surrounding the consumer.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Let's keep it as simple as possible. </AC1><AC2>Based on 3rd party disclosure statue blocking the ID benifits the consumer.</AC2><AC3>One never knows who is at the other end of the phone.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers normally are unaware that their debt has been sold to a collection agency.</AC1><AC2> They, one day, get a call about the debt from someone unbeknownst to them.</AC2><AC3> The collection agency wants the consumer to remit the payment to them, </AC3><AC4> when actually, principal on the debt never decreases </AC4><AC5> because the collection agency gets their cut (commission) off the top.</AC5><AC6> The debt is there essentially, forever with added late charges, interest and other penalties.</AC6><AC7> I submit to the CFPB to finalize the \"Know Before You Owe\" rule and to outlay the debt validation rules</AC7><AC8> so that consumers can make an informed choice before wasting their money on a debt they may not owe.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt collectors call and cannot verify that the creditor has merged with another company.</AC1><AC2> The debt may have written off the books of the acquired company.</AC2><AC3> I propose that the CFPB implement a rule pertaining to debts written off by an acquired company and any additional stipulations on a timeframe to which an old debt can be collected only if the consumer has been validly notified that the debt has been sold to a debt collection agency; excluding the initial call from the DCA</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 0]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My problem with those debt collection companies employees I have had to deal with is this...</AC1><AC2> they either call themselves agent,investigators,</AC2><AC3> or they are members of a special department investigating a debt alluding to Law Enforcement or DA's office.</AC3><AC4> Most recently, as last week, they have indicated, they are going to contact me at my place of employment and are going to initiate civil action if I don't contact them before the close of business.</AC4><AC5> This is out of order and should be stop</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>One such collection company used the actual phone number of a District Civil Court office in a neighboring county in their phone message for my wife to collect on a debt many years old.</AC1><AC2> This practice is deplorable and should have sever penalties towards any collection company/employee that uses this type of collection action.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have experience collection companies who buys the debt from the 1st 2nd or 3rd party add on its fees along with the other companies fees,then submit a new account number to the original account as though it was a new account.</AC1><AC2> So, a original account for the sake of argument was $500.00 turns out to be listed on your credit report as a $3,000 delinquent account.</AC2><AC3> Government laws should not allow this practice to exist.</AC3><AC4> What ever the original account is that's what should be reported not interest and additional fees a collection company deems it can add to your credit bureau report.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In my opinion,collection companies,credit bureaus, and every one in between should be made to have some type of soft ware that could identify time-barred debt.Plus, regulation that will not allow creditors/buyers to reactivate an old debt.</AC1><AC2> If a given state has its own statue of limitation regarding a legitimate time line to collect a debt, so be it.</AC2><AC3> The Validation Notice,should identify the true facts of the debt in question.</AC3><AC4> After complete due process has been exhausted, the record should be completely removed from the consumer file.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yes...the CFPB should require debt collectors/debt owners to notify consumers in writing, that a payment plan or partial plan will revive the time-barred debt.</AC1><AC2> However, the debt owner or debt collection company should not be allowed to have a second chance to sue you for the old debt.</AC2><AC3> This in itself would be bubble jeopardy in a criminal case of law.</AC3><AC4> If anything a second seven year listing of the agreed balance you are willing to repay will be listed on ones credit bureau report would be allowed.</AC4><AC5> Note: A collection company that purchased the account for pennies on the dollar,should \"ONLY\" be allowed to collect the amount of monies they purchased the account for plus any regulated reasonable fee amount.</AC5><AC6> Because they were not the original lender in the first place.</AC6><AC7> The original debt owners should \"ONLY\" be allowed to list the agreed pay off amount of the time-barred account,the consumer agreed to pay.</AC7><AC8> Example: debt owner original time-barred account $1.000.00 dollars.</AC8><AC9> Debt owner accepts $500.00 and consumer agrees to pay back.</AC9><AC10> The only amount to report is the $500.00 dollars.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Here's what the federal government laws should mandate how the collection companies and CRAs should investigate disputes</AC1><AC2> All collection actions and reporting actions should stop immediately.</AC2><AC3> The time line should be equal on the consumer,collection company,CRAs reporting period.</AC3><AC4> The original debt owner or collection company that purchase the account, should produce the original copy of the signed contract, court documents, and any verifiable records relating to the dispute.</AC4><AC5> Forward those documents to the disputing party within the set aside timeline.</AC5><AC6> Any and all verification letters would have to state and indicate such findings.</AC6><AC7> Once the dispute could not be verified by,name,social,signed document copy of original agreement, it should be immediately deleted.</AC7><AC8> The collections companies and original debt owners are responsible for the validity of information they get,buy,receive,send or share.</AC8><AC9> So, if they buy good or bad debt they should be held responsible.</AC9><AC10> The number,types,unclear,clear,collections disputes should all be investigated the same</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[8, 7]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt was sold to another company.</AC1><AC2> So now debt is listed on my credit twice.</AC2><AC3> So debt will last more than 10 years on report.</AC3><AC4> Plus I've been a victim of identity theft twice.</AC4><AC5> Both times I reported it to the police and to the credit agencies.</AC5><AC6> Unfortunately nothing police can do but write a report for proof.</AC6><AC7> Credit agency was ordered to put a fraud alert on my social but fail to do so.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have had debt collectors call and tell me that I am not cooperating to get the debt resolved, yell at me, tell me I must be lazy or not understand I owe the money.</AC1><AC2> They have called me from 7:00 am to 9:00pm at least 10 times during the day using a different company name, different phone number and location including my city and other cities and states all in the same day.</AC2><AC3> When I tell them I am a senior they tell me to borrow the money from a family member or friend.</AC3><AC4> When I tell them I am not going to do that the harrassment starts all over.</AC4><AC5> Many of them call and act like I am an old friend before they tell me who they are.</AC5><AC6> They threaten to ruin my credit raiting, confiscate my home and belonging and car,</AC6><AC7> The most annoying is when they call and I answer they hang up and call again an hr later and hang up again.</AC7><AC8> I know it is them </AC8><AC9> because I have caller id.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[7, 8]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I had to spend quite a bit of time dealing with their repeated calls.</AC1><AC2> Of course, they weren't looking for me but rather for someone with my very common last name and first initial.</AC2><AC3> I had many calls from them one day.</AC3><AC4> Apparently, their telephone representatives were trained to hang up if they received any response other than, \"How do I pay?\"</AC4><AC5> They'd hang up on me before I could complete a sentence.</AC5><AC6> That particular day, either by accident or through malice (I suspect the latter.),</AC6><AC7> they had their robo dialer programmed to call back immediately.</AC7><AC8> The representative would hang up on me </AC8><AC9> and before I could step away from the phone, the robo dialer would call me back </AC9><AC10> and I'd be speaking with another representative who would hang up on me.</AC10><AC11> After many such calls and hang-ups, I was finally able to get a representative to stay on the line with me long enough for me to explain that they were calling the wrong person.</AC11><AC12> After that the calls stopped.</AC12><AC13> As I think back on this experience, I find it quite comical, </AC13><AC14> but I didn't at the time.</AC14><AC15> I did file complaints with the FTC and my state's Attorney General.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The original comment was suggesting that anytime a debt collector calls they are automatically agreeing to be recorded if the consumer chooses to do so.</AC1><AC2> I think that is a FANTASTIC idea.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers should be able to request calls be limited to one contact per week if they desire.</AC1><AC2> That is a fair and honorable compromise,</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Just like Cable companies may expect their customers to give them a four hour window for service calls,</AC1><AC2> consumers should be allowed to choose a time frame they prefer to be called within.</AC2><AC3> If they never respond within that time frame, then the debt collector could try a different time frame.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am saying that collection agencies cannot be trusted and more often than not go beyond their job scope.</AC1><AC2> Some act as loan sharks and not collection agencies.</AC2><AC3> I also think that their behavior is criminal when it comes to making threats against consumers and harassing people with disabilities and seniors.</AC3><AC4> So, yes i think criminal charges should be pursued for their cover ups and harassment. Also other violations of privacy and fairness.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [3, 1], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yes. I think there is a way to get the debt collectors on board.</AC1><AC2> The CFPB can remind them that debt collection companies may be exposing their own phone reps / employees to unnecessary verbal abuse from customers who have a legitimate justification for being upset because of follow up calls that ignore the updated agreement just reached in the prior call.</AC2><AC3> If the previous communication with the debt collector creates a new timeline for possible repayment, then the debt collector should not step on that timeline by making subsequent calls less than a week later. unless the customers says call back in less than a weeks time.</AC3><AC4> This also gives the debt collection phone rep the ability to say...\"It has been a week or longer since our last communication\"...Which allows the customer a moment to realize they are not being harassed on a daily basis by the same debt collector.</AC4><AC5> Some consumers have situations in which their income grinds to zero </AC5><AC6> and they may default on more than one account.</AC6><AC7> Imagine 5 debt collectors each calling twice a day.</AC7><AC8> Even one call a week can still equal one call a day if a consumer has five simultaneous defaults,</AC8><AC9> but that is certainly preferable to 2 calls a day from each collection account, which would equal 10 calls a day, every day.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This question is most interesting with respect to student loans.</AC1><AC2> Unlike most other debts, student loans have the potential to be greater than $75k, </AC2><AC3> which means a consumer can be sued in Federal Court under supplemental jurisdiction provisions.</AC3><AC4> Additionally, should the current creditor be able to achieve complete diversity, the consumer can be sued in an entirely different state.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [0, 3], [2, 1], [3, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Some problems that debt collectors and buyers have with giving consumers this information arises in the field of Electronic Data Interchange.</AC1><AC2> Here, not all debts, especially with interest are calculated the same way,</AC2><AC3> and since there are fees, such as statutory attorneys fees, and court costs, which can be added to the balance, </AC3><AC4> calculating the balance becomes cumbersome when the data is transferred among Trading Partners on a daily basis </AC4><AC5> because the data gets lost in translation over day-to-day lags.</AC5><AC6> Computers don't think the same way people do</AC6><AC7> and what we think is a simple calculation is muddled when partial payments are added and the data is transmitted between parties.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 3], [3, 2], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Student Loans, Many of the problems that students are facing are with student loans from the private sector.</AC1><AC2> Take for example Sallie Mae, this company has it on file that i dod not graduate from college </AC2><AC3> and i did graduate.</AC3><AC4> Their collections agencies are like loan sharks going to the extreme of making threats and cussing out students who cannot make payments.</AC4><AC5> I know for some people it is easy to make payments on student loans </AC5><AC6> but for many it is a struggle to get by.</AC6><AC7> All students are trying to better themselves </AC7><AC8> and sometimes they simply cannot afford to make payments.</AC8><AC9> Companies like Sallie Mae are in the business of making peoples lives miserable.</AC9><AC10> Their collection practices, customer service and lack of options are usually the reason why students default on their loans.</AC10><AC11> Paying for college is a marathon not a sprint </AC11><AC12> and these companies treat the repayment of student loans like a sprint.</AC12><AC13> I think they need to offer more options to students.</AC13><AC14> I also think private institutions ala the schools that lend money to students need to do a better job at giving students options to prevent default. resolutions and remedy not judgement and default.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [9, 10], [9, 11], [12, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>False of misleading are rearranging paper work to suit their claims, false allegations against the lender, personal harassment, humiliation on credit reports, preventing students from seeking consolidation form other companies.</AC1><AC2> Other false or misleading is the assumption that students dont want to repay their loans.</AC2><AC3> That is not true.</AC3><AC4> They also mix up the paper work so much it is difficult to get to the bottom of why the loans are in default in the first place.</AC4><AC5> They need to streamline their services and offer students option in the private loan sector.</AC5><AC6> The institutions should do the same</AC6><AC7> because they treat student loans like mortgage loans.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Too many collectors call and never report the \"mini-Miranda warning\".</AC1><AC2> They call all times of the day and night, and multiple times of the day.</AC2><AC3> If they don't get you because your have called ID, they will change their ID and try again.</AC3><AC4> It is simply harrassment.</AC4><AC5> Many will challenge the the consumer, threaten, and even harrass them to the point that I saw someone actually contemplate suicide.</AC5><AC6> Also, when a debt is sold, the information for the orginal details need to go with it.</AC6><AC7> many times these collectors will call, </AC7><AC8> and they have no details on debts that are 5 and 6 years old, </AC8><AC9> and the consumer doesn't rememer it.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A certified letter plus a regular letter should be sent.</AC1><AC2> It proves that a consumer is at least aware of the debt and has X time to respond.</AC2><AC3> Should cost any more then the postage of the regular letter.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Having been recently included for free credit checking, after the Target identity theft issue, I checked my credit with Experian and found a $9,924 \"collection\" on my credit report, resulting in a 610 FICO score!</AC1><AC2> I had never heard of Portfolio Recovery, a company located in Virginia.</AC2><AC3> I immediately wrote to the Office of Consumer Affairs in Virginia, detailing what this erroneous addition to my credit report had done to my overall score and my ability to maintain good credit.</AC3><AC4> ALL of my credit cards lowered my limits,</AC4><AC5> but I thought that had been in response to the ongoing bank investigations and the banks way of getting back at consumers.</AC5><AC6> It all made sense when I saw this entry.</AC6><AC7> What shocked, alarmed and enraged me most is that Experian excepted this \"collection\" entry without documentation.</AC7><AC8> I can assure you that none exists.</AC8><AC9> However, I have been a victim of lost wallets and identity theft within the last 20 years and may have seemed a legitimate target to Bottom-feeder agencies like Portfolio Recovery </AC9><AC10> (the Internet is rife with consumer complaints about their tactics and illegal practices attempting to collect \"debts!\"</AC10><AC11> I intend to pursue this matter by informing our Attorney General Kamala Harris and am grateful that you are targeting an otherwise unassailable lobby.</AC11><AC12> Anytime a consumer writes to a credit reporting agency, the letter winds up in Mumbai, is laughed at and never acted upon.</AC12><AC13> Experian, TransUnion and Equifax should undergo a Congressional investigation, during which their anti-consumer orientation and fraudulent reporting will be noted, as well as the impossibility of restoring a former 810 FICO, once scumbags like Portfolio Recovery have been allowed clear access to ruin the credit score and compromise the professional life and earning potential of millions of consumers.</AC13>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The debt collector must be required to submit the original application for credit with the consumer's original signature and the original letter of approval for the credit.</AC1><AC2> The debt collection company should be required to submit full documentation that the debt actually exists.</AC2><AC3> Too many debt collectors rely on falsified affidavits.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>During the past 2 years I have been repeatedly contacted by a variety of collection agencies.</AC1><AC2> It began innocently enough, when one of them called me, asking \"when can we expect your payment,\" when that statement had not yet arrived and was not due until the 20th of the month and the call occurred on the 11th.</AC2><AC3> It was a collection agency hired by Capital One.</AC3><AC4> Coincidentally, I purchased various items at Costco a few days later and received the shock of my little life when my credit card was denied.</AC4><AC5> I called Capital One from a phone at Costco and was told I had not made my payment...</AC5><AC6> this was even stranger</AC6><AC7> because I pay off my balance each month.</AC7><AC8> What I didn't know is that Costco switched from a very nice bank (HSBC) to Capital One, never notified me </AC8><AC9> and Capital One immediately played hardball, albeit unnecessarily.</AC9><AC10> To answer their strong-arm tactics, I wrote a letter to Robert Crawford, the incoming CFO of Capital One, in which I had cut up both credit cards and told him to \"shove it,\" for treating a long-time customer like something you scrape off the shoe!</AC10><AC11> When the collection calls began, I was in a great mood</AC11><AC12> after all, I had initiated this mess.</AC12><AC13> However, they were unfaird from the beginning.</AC13><AC14> They use I.V.R. numbers.</AC14><AC15> Without technical jargon, it means that the number we see on caller i.d. is never the number from which they're calling, </AC15><AC16> so you can't block their call</AC16><AC17> my provider allows me to block 12 numbers </AC17><AC18> and I wondered how these collection agencies were constantly squeaking by).</AC18><AC19> They robodial, </AC19><AC20> so you can and do get several calls per day and before 8:00 AM and after 9:00 PM,</AC20><AC21> since they know there is very little you can do about the early or late calls, besides whine</AC21><AC22> That said, what followed was even worse....</AC22><AC23> the collection agency (Portfolio Recovery) which was able to place a bogus $9,924 \"collection\" on my Experian credit score, which I saw because Target offered me 1-year free credit monitoring, which, by the way, isn't free if you want to see your complete profile...</AC23><AC24> they have no paperwork to substantiate this charge </AC24><AC25> and it has completely ruined my credit, pulling down my FICO from 795 - 810 to 610!</AC25><AC26> To me, having collection agency CEO's boiled in oil seems like an act of mercy!</AC26>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 6], [10, 11], [15, 14], [17, 16], [19, 18], [19, 20]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do not agree, when it come to company call or text all day and night.</AC1><AC2> New federal rule should not do this at all.</AC2><AC3> It sound like somebody is getting pay to put this new federal laws.</AC3><AC4> It all about money as always</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't believe that debt tolling should be legal.</AC1><AC2> For instance, I had a medical crisis while living in Illinois for college.</AC2><AC3> Despite having insurance, I still ended up deeply in debt.</AC3><AC4> I attempted to work with the debt collectors, </AC4><AC5> but I just couldn't keep up due to the massive amounts.</AC5><AC6> I moved back to Wisconsin where I'm from.</AC6><AC7> The debt has since become time-barred in Wisconsin due to the statute of limitations.</AC7><AC8> It's not on my credit report</AC8><AC9> and I can't be sued for it here.</AC9><AC10> However, should I ever wish to return to Illinois again, it's like I never left and I can be raked over the coals by debt collectors all over again, including being sued.</AC10><AC11> This doesn't make any sense.</AC11><AC12> Either I get sued or I don't.</AC12><AC13> It's been over 10 years, </AC13><AC14> and it's not like I skipped the country and \"hid\" from them.</AC14><AC15> I'd like to return to Illinois, </AC15><AC16> but doing so would kill my credit.</AC16><AC17> They had 10 years to sue me.</AC17><AC18> Isn't that enough?</AC18><AC19> This is unfair </AC19><AC20> and I believe the issue of debt tolling should be explored.</AC20><AC21> It's just not right.</AC21>\n### Here is the list of pairs of related argument components in this paragraph: [[19, 18], [19, 20]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There needs to be a universal Statute of Limitations.</AC1><AC2> The current system is an absolute mess.</AC2><AC3> 17 states maintain a SOL of three to four years, while 19 others have the six years SOL time limit.</AC3><AC4> The rest all have diverse SOL limits with some extending for even up to 10 years.</AC4><AC5> Tolling provisions make it even more confusing.</AC5><AC6> Simplify it.</AC6><AC7> Have a single NATIONAL Statute of Limitations.</AC7><AC8> Make it fair for everyone (debt collectors and debtors</AC8><AC9> 5 years seems reasonable.</AC9><AC10> Having a universal Statute of Limitations will eliminate confusion and ambiguity as to when and where a debtor can be sued.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [1, 2], [1, 3], [5, 4], [6, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe that a universal statute of limitations would be an effective way to end debt tolling.</AC1><AC2> If there was a universal statute of limitations, there would be no need for debt tolling.</AC2><AC3> Collectors would be able to file suit no matter where the debtor lived based on a single set of federal laws.</AC3><AC4> It also makes things less confusing for debtors </AC4><AC5> (they know that they can be sued within X amount of years no matter where they go, hence they can't \"run\" from debt</AC5><AC6> and debt collectors don't have to go from state to state, wading through murky laws.</AC6><AC7> Furthermore, debt collectors should not have the privilege of hiding behind tolling laws.</AC7><AC8> Either they sue or they don't within a federally mandated set of time.</AC8><AC9> Tolling simply keeps zombie debt going and going.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [3, 4], [6, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree 100% with this statement.</AC1><AC2> Creditors should not simply be able to pull your credit report at their fancy.</AC2><AC3> I had so many soft pulls (this was before I realized I needed to opt out of marketing) that my credit report from Equifax got \"split.\"</AC3><AC4> Basically, this means that my report got chopped in half and trade lines disappeared.</AC4><AC5> Also, a legitimate creditor attempted to pull my credit and was told by Equifax that I didn't exist.</AC5><AC6> Everything was GONE.</AC6><AC7> After numerous fruitless attempts at reaching someone at Equifax, I finally got a real person.</AC7><AC8> I was informed of the split and told that the burden was on me to provide them with the correct information to \"put my report back together.\"</AC8><AC9> I had to fax them my driver's license, social security card, and a utility bill,</AC9><AC10> all because their software cracked due to too many inquiries that I didn't even authorize.</AC10><AC11> It's still not resolved,</AC11><AC12> and I've filed a report with the CFPB.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [8, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a banker in a small bank, I have been on both sides of the collection business.</AC1><AC2> Bankers have to prove a debt and give consumers a chance of object to the validity.</AC2><AC3> When I have had collection agencys contact us for medical collections, I found these people to be scum.</AC3><AC4> They don't care if the debt is valid, correct, or anything else.</AC4><AC5> They just know that they get 50% of everything they collect.</AC5><AC6> You can request that they not contact you again, but they will.</AC6><AC7> My suggestion is that collection agencies not be allowed to call at all and all correspondence be in writing.</AC7><AC8> If anyone can tell me what I owe and why I owe it, I will pay it.</AC8><AC9> They can't and they don't care.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [2, 5], [5, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>While I do not advocate daily robo-calling, I have to wonder why a consumer finds themselves on the receiving end of these calls?</AC1><AC2> Receiving the daily call would indicate the consumer is also continually ignoring this debt.</AC2><AC3> Sadly, there is a demographic that thinks this way.</AC3><AC4> If the consumer has found themselves in a tough spot I would think they would choose to take the call or contact the debt collecting entity to try to remedy the situation.</AC4><AC5> As far as regulations I do believe that one call a week is sufficient.</AC5><AC6> The idea of the robo-call is to keep the debt on the consumers mind in an effort that when they get the money they will remember to call and pay the debt.</AC6><AC7> Any other purpose I think would be considered an attempt to annoy the consumer into paying.</AC7><AC8> The demographic that allows this is never going to pay anyway </AC8><AC9> so why play the game.</AC9><AC10> Even a robo-call costs money </AC10><AC11> so why continually throw good money after bad.</AC11><AC12> In 30 years of this business I realize there are two types of people, the one's who want to pay their bill and the ones who never intended to pay in the first place.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[8, 7], [10, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Some of us find ourselves on the receiving end of daily (or more frequent) robo calls </AC1><AC2>because we have common last names.</AC2><AC3>And I do think that the debt collectors who have called me would very much like me to pay the debt even though it isn't mine.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The state, county, city make their own laws.</AC1><AC2> That is what I have ran into</AC2><AC3> and if a person does not hire a lawyer, are not a big group, there isn't much hope for the consumer.</AC3><AC4> The law where everyone may hire a lawyer has limits--IE: Will not take a criminal or money cases if a non profit org. or free lawyer takes the case.</AC4><AC5> I darn sure do not understand the laws etc.</AC5><AC6> and I have tried to read about all this for 2 years.</AC6><AC7> Of course I'm old and 100% DAV,</AC7><AC8> that could be it.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The ACA's (debt collectors) positions on the CFPB's proposed rules is disgusting!!</AC1><AC2> It is laughable!</AC2><AC3> See for yourself America,</AC3><AC4> here it is: __URL__</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I've heard multiple stories of summons being dropped off or served to the wrong individual and summons being mailed to old addresses when the new address was clearly available.</AC1><AC2> I don't believe that a summons should ever be served by mail. </AC2><AC3> If the debt collector wants to sue, they should be required to serve the person directly in the city and state in which they currently reside.</AC3><AC4> It's an especially dirty tactic to serve someone by mail.</AC4><AC5> It's unreliable and puts the debtor at a disadvantage.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 3], [2, 1], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree. </AC1><AC2>However, I believe that having a universal or national statute of limitations would alleviate this problem.</AC2><AC3>The current system is too confusing.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Notification that a debt is being sold would be ideal </AC1><AC2>as it would afford the debtor the opportunity to negotiate the amount and possibly assist in thwarting any potential negative reporting on one's credit report.</AC2><AC3>If a debtor is afforded the opportunity to negotiate his or her debt for a reasonable amount, perhaps the selling and reselling of debt may be marginalized.</AC3><AC4>More and more consumers have emails and other modes of communication</AC4><AC5>and therefore, it would be in the best interest of all parties to amicably resolve issues.</AC5><AC6>However, should the dispute not be quelled, reasonable arrangements should be afforded to the debtor.</AC6><AC7>Debts as assets is an outrageous concept </AC7><AC8>and it behooves both the debtor and the creditor to \"work-it-out\".</AC8><AC9>That is in the best interest of all.</AC9><AC10>It begins with information, communication and resolution.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [4, 3], [5, 6], [8, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>i agree. </AC1><AC2>their comments are outrageous and is just more of the same.</AC2><AC3>why should we expect a lobby group of debt collectors to really want enforceable new rules?</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yes, if the account is still open the bank must hold onto the agreement for 20 years.</AC1><AC2> If the account went delinquent 20 years before litigation then the statute of limitations has long passed and the lawsuit is frivolous;</AC2><AC3> it should be dismissed with sanctions.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is the problem.</AC1><AC2> What account would stay open for 20 years after being delinquent.</AC2><AC3> It seems to me this is just a way to prolong as long as possible the ability to harass people for very old debt.</AC3><AC4> There needs to be time limits.</AC4><AC5> This type of thing, re-filing debt, selling the same debt to someone else, and then adding it back AGAIN to the credit report is just an excuse to harass the heck out of people and do it legally.</AC5><AC6> These are not good business practices.</AC6><AC7> This is harassment.</AC7><AC8> Once a debt is placed on a credit report -- or even sooner -- once the debt letter is sent, time should start running and this agency needs to set time limits that are reasonable.</AC8><AC9> Creditors have a right to try to collect true, accurate debt.</AC9><AC10> But what happens is the debt is wildly inflated, then it runs the gamut of various collection agencies until nobody even remembers its genesis.</AC10><AC11> This is all to harass.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>That might work if each state had reasonable, intelligent and realistic collection rules.</AC1><AC2> But just the fact that the cost of getting a report varies wildly shows such disparities from state to state.</AC2><AC3> My opinion is that there desperately needs to be some uniformity.</AC3><AC4> This would help people to know what is expected of them, and what to expect.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>CG I endorse and want to add again at the risk of sounding like a broken record, it is the wild fluctuation in rules across the country.</AC1><AC2> This is not a \"state's rights\" issue as someone wants to make it, but a way to bring some fairness and intelligence to this process.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>What Nancy H said exemplifies the problem: no standards across the board.</AC1> Best of luck to you.<AC2> What happens to you in this situation depends on the collection agency, the creditor (in the first place) and where you live.</AC2><AC3> Where you live should not be a factor.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I got hit with a notice from a doctor's office and his collection agency that I owed and -- get this -- never responded to their notices.</AC1><AC2> First, I never got any notices </AC2><AC3> and second, I called the doctor's office and validated that I have never been a patient there.</AC3><AC4> The office manager even wrote a letter to the collection agency.</AC4><AC5> It was clearly THEIR mistake,</AC5><AC6> The collection agency got all hot and bothered and rude to me</AC6><AC7> because then they had to pay to remove the notice of me \"owing\" a debt from the three credit reporting agencies</AC7><AC8> boy I hope you go after these cowboys next -- </AC8><AC9> and yet it was removed.</AC9><AC10> But while waiting for the letter, I managed to actually get someone on the phone from Equifax,</AC10><AC11> I was so angry, </AC11><AC12> and their attitude was, \"we just report this\" blah blah blah.</AC12><AC13> I say there ought to be sanctions, monetary sanctions, against these credit reporting agencies for making these mistakes and their cavalier attitude.</AC13><AC14> They have this attitude of, so what?</AC14><AC15> This has been more than two years ago and still seethe because of the cavalier and rude attitude when it was clearly their mistake.</AC15><AC16> I even called MY eye doctor and had him write a letter that I was HIS patient.</AC16><AC17> You think things don't get out of hand?</AC17><AC18> YOu don't know how this kind of thing hurts people's ratings, scores whatever and then add insult to injury when you deal with rude inept people.</AC18><AC19> Hit them in the pocketbook and you will see how fast they will make sure they do not make any mistakes.</AC19>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 0], [4, 1], [5, 6], [12, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>You are not living in the real world if you think it is just so easy, RBell.</AC1><AC2> No, most consumers are not lawyers.</AC2><AC3> The people using these debt collection practices are deliberately abusing the law </AC3><AC4> because they know most who are harassed and in debt and working people who probably can't afford a lawyer.</AC4><AC5> And I'll just bet it is worst in the states with the least amount of consumer protection.</AC5><AC6> Take care.</AC6><AC7> You will sing a different tune when it is you on the meat hook.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Good idea debt neutrality.</AC1><AC2> But the sad thing is, being in debt is NOT considered a crime</AC2><AC3> however, the way the laws are now, and the abuses these collection agencies engage in, you might as well be considered a criminal.</AC3><AC4> I agree.</AC4><AC5> Set up a system where the consumer is on equal footing with the debt collectors.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Get a copy of the police report </AC1><AC2>and mail it to all three.</AC2><AC3>They HAVE to put a freeze on your report, </AC3><AC4>and you get a pin, </AC4><AC5>and if you have to lift it you need to have that pin.</AC5><AC6>It is quite a pain.</AC6><AC7>I had a burglary in 2012 -- 14 pages of items stolen, </AC7><AC8>I had to call all my credit cards and get issued new ones.</AC8><AC9>Heartbreaking --not just things like my computer, but items of great value, and great sentimental value.</AC9><AC10>The least you should have is the peace of mind of having a freeze on your report.</AC10><AC11>And they HAVE to do it.</AC11><AC12>Otherwise, go to a lawyer and let them dangle on the end of the meat hook.</AC12><AC13>It is a pain, but worth doing.</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 7], [7, 6], [11, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I agree with you that being in debt is not a crime,</AC1><AC2> however, if a debtor defaults on a debt they basically have no rights if they cannot afford an attorney </AC2><AC3> as one will not be provided for them by the state.</AC3><AC4> Pro Se can easily become a mess </AC4><AC5> as no one will actually help with the paperwork, </AC5><AC6> even state funded pro se agencies are simply paid to show where to get the right papers, not to fill them out.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [3, 4], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Because credit card contracts are adhesion contracts,</AC1><AC2> it is up to educated third party observers to make sure the adhesion contract is fair.</AC2><AC3> If a person experiences a dramatic event beyond their control that reduces their income, it seems questionable to not allow the debtor the right to suspend the interest rate charges, penalties and fees until they have regained their income.</AC3><AC4> They are still promising to pay,</AC4><AC5> but since their life has been turned upside down by an event beyond their control, </AC5><AC6> that should have standing in some cases.</AC6><AC7> It just doesn't seem ethical to punish a consumer </AC7><AC8> because their home washes down the river one day, or is burned to the ground by a wild fire, destroyed in an earthquake, and so on.</AC8><AC9> It especially does not seem ethical that the credit card companies are allowed to hide how they will punish a consumer if the consumer's intent was always to make their payments and it took an act of God to prevent that from happening.</AC9><AC10> Insurance policies do not cover acts of war, </AC10><AC11> yet our own government allowed the owner of the twin towers to collect on their insurance policy </AC11><AC12> even though 911 was clearly an act of war.</AC12><AC13> I believe there have been polls that show a majority of americans are upset because the 2008 bailouts did not give them any respite of any kind.</AC13><AC14> The \"Promise to Pay\" says nothing about making that payment every month above and beyond all other situations and scenarios.</AC14><AC15> I believe judges have misinterpreted Promise to Pay and that lawyers like the way it is set up now </AC15><AC16> so they don't want to challenge the obvious holes in credit card adhesion contracts</AC16><AC17> because it could quash their own future income stream.</AC17>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [5, 4], [6, 7], [15, 14], [15, 16]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>it still bothers me that \"financial literacy\" may be the escape clause that the CFPB uses to avoid the real issue.</AC1><AC2> How about rewarding those of us who have tirelessly blogged about exposing the financial traps set up by the credit card companies, especially those of us who did it all on our own dime and time.</AC2><AC3> Credit Cards are THE BIGGEST PROFIT MAKING scheme in the U.S., much bigger than the mortgage industry.</AC3><AC4> And as the CFPB knows, any type of money making machine gets protected through lobbying.</AC4><AC5> That is exactly why the CFPB was able to fine the credit card companies well over 1/2 billion dollars for aggressively marketing the credit-protector Insurance program.</AC5><AC6> When something makes so much money so easily, people just can't help themselves to try and keep expanding the money making venture.</AC6><AC7> I personally warned about the credit card credit protector programs almost FIVE YEARS BEFORE the CFPB made their over half billion in fines.</AC7><AC8> Credit-Protector __URL__</AC8><AC9> I created my site on my own time and with no funding,</AC9><AC10> and I think my warning almost five years before should matter.</AC10><AC11> I also don't understand why someone like myself who created my warning so early on, with no funding, can't be compensated on any level simply as a way to energize future generations that if they take the time and show they care for something that matters, they may someday be publicly rewarded/acknowledged.</AC11><AC12> I also created blogs about Chase Bank and their credit card shenanigans back in 2009.</AC12><AC13> Once again, the class action lawyers swooped in and took 25 million dollars in legal fees.</AC13><AC14> I didn't see a dime for my blogging</AC14><AC15> even though my 2009 protest blogs probably helped fuel the justified anger by some consumers who then went on a mission to get a class action lawyer involved.</AC15><AC16> Once again, I got nothing.</AC16><AC17> If Government Consumer Organizations are not willing to acknowledge those who care and show it, the system may never truly improve.</AC17><AC18> Daily-Protest __URL__</AC18><AC19> Bloggers Against Chase Bank __URL__</AC19><AC20> Parallel Foreclosure __URL__</AC20><AC21> Swarm The Banks __URL__</AC21><AC22> Wall Street Change __URL__</AC22><AC23> I have gone out of my way to offer financial literacy through the exposure of unfair credit card and banking policies for several years now.</AC23><AC24> The tree fell, people heard it, but no one made a sound.</AC24>\n### Here is the list of pairs of related argument components in this paragraph: [[6, 7]]", "output": "{\"relation_types\": [\"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Even when the right person is hauled into court, everything From_ill_annoy stated is still true.</AC1><AC2> Defaulters should not be forced to complete the same type of court papers that those accused of crimes are required to fill out and file.</AC2><AC3> Since debt collection is not considered a criminal act, </AC3><AC4> filing papers should be much much easier for the defendant, </AC4><AC5> and, a defendant should be allowed to plead Involuntary Default and get a better result. such as the freezing of all interest rate charges, penalties and fees in exchange for the promise to pay, even if it takes ten years.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2], [4, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This Draft Summary of Discussion fails to address the issues of confusion about the statute of limitations and how they vary among states.</AC1><AC2> This is a big source of confusion in terms of collection of a debt and jurisdiction.</AC2><AC3> Creating a more stanadrized set of rules would alleviate these problems.</AC3><AC4> In 2010, the FTC released a report, \"Repairing A Broken System,\" which made mention of the need a universal statute of limitations.</AC4><AC5> Additionally, in 2011 ACA's plan, \"The Path Forward: ACA International\"s Blueprint for Modernizing America\"s Consumer Debt Collection System\" also advocated for a national statute of limitations.</AC5><AC6> This is something that both sides of the industry actually agree upon.</AC6><AC7> 50 different states and 50 different statutes make it too confusing for consumers.</AC7><AC8> I also reiterate that a compromise in terms of years can be reached.</AC8><AC9> Also, debt tolling needs to be done away with.</AC9><AC10> It only adds to the confusion of when a debt becomes time-barred.</AC10><AC11> We live in a transient society.</AC11><AC12> A debt should not legally follow a person for the rest of their life:</AC12><AC13> Repairing A Broken System - Federal Trade Commission: __URL__</AC13><AC14> InsideArm: Statutes of Limitations Frustrate Debt Collectors and Consumers __URL__</AC14><AC15> The Path Forward: ACA International\"s Blueprint for Modernizing America\"s Consumer Debt Collection System: __URL__</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 12], [4, 14], [2, 3], [2, 4], [2, 6], [8, 9], [10, 11]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would disagree that there is confusion among consumers about SOL which would, as you suggest, require the need for a national SOL.</AC1><AC2> The only time I have personally seen SOL straddle a line is when a consumer moves to another state with a different SOL.</AC2><AC3> The clarity needs to be in these such cases.</AC3><AC4> Because once a debtor moves, both parties claim the SOL where it benefits them for their desired outcome.</AC4><AC5> A national SOL only benefits the debt collectors and not the consumers.</AC5><AC6> The focus should remain on creating, as best as possible, a win-win solution that benefits the debt collectors the consumers.</AC6><AC7> Having a national SOL of 7 years as ACA International wants compromises state laws wherein some states of SOL of 3 years (and otherwise less than 7).</AC7><AC8> A SOL is meant to bring resolve.</AC8><AC9> And in reality, if a debt collector/debt owner can not resolve their clients issues within the already established SOL of each state, then extending the SOL or having a national SOL under which to bring suit does nothing but allow debt collectors to continue to harass consumers.</AC9><AC10> Three years really is more than enough time to sue.</AC10><AC11> Just as criminal defendants are entitled to a quick and speedy trail, so should consumers who may/may not be aware they have an outstanding debt.</AC11><AC12> That is to say: having a national SOL is a guise to prolong resolution rather than a more quick a final resolve in when to bring suit.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [11, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I respectfully disagree with your assessment.</AC1><AC2> If anything, I believe that a national statute of limitations would actually stop the process of zombie debt.</AC2><AC3> We live in a transient society.</AC3><AC4> Assume that a national SOL were to be adapted\"</AC4><AC5> Also, you did not address the issue of tolling.</AC5><AC6> Again, we live in a transient society.</AC6><AC7> People move from place to place.</AC7><AC8> For example, I had a medical crisis in Illinois.</AC8><AC9> I was not able to keep up with the debt. </AC9><AC10> I moved back to my home state of Wisconsin in a town 25 miles away from the Illinois border.</AC10><AC11> Now, because I live in Wisconsin, </AC11><AC12> the SOL has passed </AC12><AC13> and I can no longer be sued here.</AC13><AC14> However, should I ever choose to move back to Illinois (which I can't unless I want my credit destroyed and want to get sued) it\"s as though the debt never went away due to their tolling laws and longer SOL.</AC14><AC15> It seems that the rationale behind your argument is to solely protect those people who live in states with short SOLs (3-4 years).</AC15><AC16> That\"s not even 50 %.</AC16><AC17> A reasonable universal statute of limitations would make things more clear.</AC17><AC18> At the very least, tolling provisions should be eliminated should states have their own statute of limitations.</AC18>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [5, 6], [11, 10], [12, 11]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}]