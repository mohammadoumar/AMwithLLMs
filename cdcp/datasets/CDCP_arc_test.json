[{"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Recently, courts have held that debt collectors can escape 1692i's venue provisions entirely by pursuing debt collection through arbitration instead.</AC1><AC2> As the NAF studies reflect, arbitration has not proven a satisfactory alternative.</AC2><AC3> I urge the CFPB to include in a rule language interpreting 1692i as requiring debt collectors to proceed in court, not through largely-unregulated arbitral forums.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When alleged debtors are served with state court summonses, they are not always comprehensible to laypersons.</AC1><AC2> Any requirements to file papers to avoid default judgment</AC2><AC3> The date of any scheduled hearing and procedures for changing the date</AC3><AC4> Local and online sources of information for pro se defendants, and possibly local non-profit advice organizations.</AC4><AC5> That the debtor may wish to consider bankruptcy if they cannot pay their debts.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>To avoid consumers getting sued repeatedly on the same debt, the CFPB should require or encourage states to adopt rules requiring that judgments be preclusive of future consumer-collector litigation on the same debt;</AC1><AC2> instead, if there is a dispute between assignees as to who has title to the debt, they should work it out between themselves instead of risking subjecting the consumer to multiple liability.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The solution to this problem is a mandate that account numbers and names on them not change during their life, no matter how many times transferred.</AC1><AC2> This goes for credit reporting agencies as well.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If the present mortgage repayment debacle is any indication of noticing or added noticing I think it is much simpler to notify the consumer whom to pay and list the original creditor name.</AC1><AC2> Also, I think it would be a good idea for CFPB and the industry to combine this with FCRA issues.</AC2><AC3> For example, if a consumer today reviews their credit reports the normal term is \"sold to another lender\" but no name.</AC3><AC4> I have heard similar stories from attorneys who try to match what a consumer lists as a creditor versus what is listed in a credit report.</AC4><AC5> Seems to me that everyone is trying to close the back door but leaving the front door open.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 2], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I still vividly remember receiving automated calls every Saturday morning in college insisting that I settle a debt under someone else's name.</AC1><AC2> It was a case of mistaken identity, </AC2><AC3> and eventually I sorted it out by tracking down the collection agency and calling them during business hours.</AC3><AC4> This was a tremendous inconvenience, however.</AC4><AC5> I strongly support limitations on robocalls, on total call volumes, and ask that you consider creating a complaint process for harassing or mistargeted calls.</AC5><AC6> Collection agencies should face financial sanctions for misbehavior, payable to the target of their abuse.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 0], [4, 1], [4, 2], [4, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I had a particularly lousy experience with an abusive debt collector called Miracle Financial, working on behalf of Verizon Wireless to collect a debt I wasn't aware I had incurred and didn't believe I owed.</AC1><AC2> The full account -- and dozens more from people leaving comments on my blog over the years -- is available at the supplied link.</AC2><AC3> I had my identity stolen</AC3><AC4> and I didn't even know it.</AC4><AC5> They could not produce a signed credit card receipt to compare my signature.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [1, 4], [0, 3], [0, 4]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"evidence\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt collectors are very knowledgable in what they do.</AC1><AC2> We are professionals.</AC2><AC3> But debtors are not stupid and should be expected to do their own research and educate themselves to participate in their defense.</AC3><AC4> Why should a creditor have to explain to a debtor how to avoid paying their debt.</AC4><AC5> By the time it's reached litigation, those conversations should have already occured</AC5><AC6> and the debtor should be ready to offer his defense without being \"taught\" by the person to whom he owes money.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [3, 2], [5, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My company calls, auto-dials, emails, and snail mails customers many times before they are sent to a collection agency.</AC1><AC2> Many debtors simply refuse to respond to the original debtor.</AC2><AC3> They only make payment after the account is assigned to a collection agency -- akin to seeing just how far they can go before there's a consequence to not making payment.</AC3><AC4> Requiring a validation notice from the owner of the debt should be optional on the creditor's part.</AC4><AC5> The FDCPA requires the collection agency to send their first notice after the debt is assigned.</AC5><AC6> More notices from the creditor are useless and expensive.</AC6><AC7> And the single most frequently used excuse of any debtor is \"I didn't receive the letter/invoice/statement\".</AC7><AC8> A first class letter costs $0.55 minimum (inclusive of postage, paper, and envelope).</AC8><AC9> That cost does not include overhead and employee cost.</AC9><AC10> Multiply that cost by the number of notices and statements already sent (and ignored) and you begin to see the true cost of collection.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5], [5, 7], [5, 8], [5, 9]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Would like to see regulators approve email as a method of delivery for notifications.</AC1><AC2> Most people keep their email even when they change physical addresses.</AC2><AC3> Harder on the post office</AC3><AC4> but probably much more effective, with no-cost proof of attempted contact.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Bank of America, my mortgage holder, does NOT even allow a formal dispute to move forward.</AC1><AC2> The past 12 months have been a continues headache with Bank of America.</AC2><AC3> For example, our mortgage account have always been current, and never were we in Foreclosure status, nor even approaching default.</AC3><AC4> However, every single month Bank of America reported to the three major credit bureaus that we were late.</AC4><AC5> I've worked with their Military Liaison Officer on the resolution through phone calls, email messages, and formal letters but without success.</AC5><AC6> Urgent Help/Assistance is needed for consumers to navigate and to resolve the problems that Bank of America is creating over simple and elementary issues of basic accounting procedures.</AC6><AC7> Bank of America has the undue power of making reports to the credit bureaus which adversely affects the consumer.</AC7><AC8> The Consumer lacks tools to challenge and fight back on Bank of America's abuse of power.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [1, 4], [5, 6], [5, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Most landlines and cell phones have caller ID technology ;</AC1><AC2> if the number comes up showing a toll-free number or an unknown caller, many consumers will let such calls go to voice mail.</AC2><AC3> Voice mail messages need to be discreet.</AC3><AC4> No one needs their kids hearing messages from debt collectors.</AC4><AC5> Anyone returning a call regarding a voice mail message should be informed by a live customer service rep of the mini Miranda warning.</AC5><AC6> This should be done only after the person returning the call to the collector verifies his or her identity as the debtor.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I'm with Massachusetts on this one.</AC1><AC2> Repetitive and robo-calls are annoying and not productive.</AC2><AC3> Another fact about robo-calls is that their messages often start in the middle,</AC3><AC4> or maybe this is done on purpose.</AC4><AC5> When it has happened to me, I just hang up.</AC5><AC6> Policies regulating the number of contacts made within a specific time period should include all modes of technology.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [4, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am not a lawyer,</AC1><AC2> but I have noticed that credit card agreements often contain statements advising consumers that if suit is brought, it will occur in a specified jurisdiction or \"as provided for by law.\"</AC2><AC3> At the point where collectors start suing consumers is where many consumers say enough and hire a bankruptcy attorney.</AC3><AC4> The only winner in that situation is the bankruptcy attorney.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I can't comment on any of this,</AC1><AC2> but it would seem appropriate for Federal law to establish a framework of requirements for states to meet.</AC2><AC3> This would level the playing field for debtors and creditors in all states.</AC3><AC4> and would provide an equal basis for states to proceed with adding or amending their own laws affecting debt collection lawsuits.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I believe the original consumer applicant on an account has the right to know if an authorized user is delinquent on her or his payments</AC1><AC2> as it affects the original applicant's credit standing.</AC2><AC3> As for telling authorized card holders about the original account holder's default, I would say this is not a good idea.</AC3><AC4> Many parents provide their kids with a credit card, but would not want the credit card company contacting their kids about the parents' debt.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There should be a federal rule prohibiting collectors from reporting information to a CRA during the 30-day window.</AC1><AC2> There are automated processes in place with many collectors where they will generate 4 collection letters at one time, including the one where they tell you that they have reported you to a CRA.</AC2><AC3> And then they will mail all those to letters (all dated on the same day) to you at the same time.</AC3><AC4> And this is done without any debt verification whatsoever.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Some useful documents would be the last three collection notices ACTUALLY sent to the consumer.</AC1><AC2> Too many collection agencies have claimed they sent me regular notices regarding the debt when I have not have any contact with them for 2 - 3 years.</AC2><AC3> But they claim they have \"records\" that claim otherwise.</AC3><AC4> Yet, there is no supporting documentation of such efforts. like say, copies of the notices.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If I ever tell a collector that I'm recording the conversation, the call ends rather abruptly or the calls just stop.</AC1><AC2> Yet, I'm expected to be recorded whenever they initiate the call.</AC2><AC3> They expect me to have an expectation to be recorded when they want to attempt to collect a debt, </AC3><AC4> but the minute I want to record them while I dispute a debt, that's out of bounds...</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If a make an offer to repay the creditor and it's refused, then the debt becomes time-barred, why should the creditor still be to sue?</AC1><AC2> If the creditor is offered a repayment plan, turns it down, then sues after an extended period of time, the consumer should not have to pay that debt.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do not believe that it would have mattered.</AC1><AC2> It seemed that the Attorney/debt collector was not looking for the actual debtor</AC2><AC3> I believe that all that they were trying to do was to make a quick buck.</AC3><AC4> They did a couple of shady things with this case.</AC4><AC5> For a solution; the laws should be written so the common lay person can understand.</AC5><AC6> If I had known that a validation request would not be considered I would not have wasted my time and paid even though it was NOT my debt.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [2, 1], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have personally witnessed how judges perceive credit card debt cases,</AC1><AC2> and I believe they have strayed too far towards the debt collectors.</AC2><AC3> Judges simply decide whether a default has occurred,</AC3><AC4> and once a judge declares a debtor in default, the adjudicated debtor has no pleading rights.</AC4><AC5> Alleged credit card and student loan defaulters should have the right to declare their default an Involuntary Default and be allowed to pay back the debt with no more penalties, fees or interest rate charges, called Debt Neutrality.</AC5><AC6> Debt Neutrality is making of a debt neutral so that it does not continue to indenture a defaulter in a never ending cycle of ongoing interest rate charges, penalties and fees.</AC6><AC7> Involuntary defaults should allow the debtor to have the debt reset to where it was at the time of the default minus any payments made.</AC7><AC8> As it stands now, Strategic Defaulters are given much better treatment than Involuntary Defaulters,</AC8><AC9> in large part due to Involuntary Defaulters not being able to plead their default as being Involuntary.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [6, 7], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I disagree with the above assessment.</AC1><AC2> As an alleged defaulter I have asked over and over and over again to have the debt set where it was at the time of alleged default and that no more penalties fees or interest rate charges be tacked on, and that I will commit to a monthly autopay.</AC2><AC3> People who INVOLUNTARILY defaulted because of a life changing event in their lives (such as becoming caregivers for their parents) may want to consider all of their defaults together,</AC3><AC4> so if five defaults occurred, the alleged defaulter has to divide whatever money they may be able to apportion every month, by five.</AC4><AC5> Debt collectors refuse to see this as a reasonable solution</AC5><AC6> and only acknowledge their own debt with the alleged defaulter, making it impossible for the alleged defaulter to do the right thing and begin paying back everybody.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Only one collection call since I changed my phone listing.</AC1><AC2> No debt collector has ever admitted to me that they got my number out of the phone book.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Telephonic pretrial-hearings can be scheduled in support of a consumer having to work;</AC1><AC2> times set and or scheduled with a court representative could passify this issue.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 9, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Having gone through a Chapter 7 bankruptcy I can tell you that debt collector phone calls were the worst part of the bankruptcy experience.</AC1><AC2> Massachusetts has it right limiting the number of calls debt collectors can make.</AC2><AC3> That would remove one of the favorite illegal tactics debt collectors use to harass debtors.</AC3><AC4> Some debt collectors would threaten to put us on robocalls so that our phone rang hourly until we agreed to a repayment loan schedule.</AC4><AC5> Or they would threaten to call my spouse at work to see if he would be \"more cooperative\" and agree to a loan repayment schedule even after being informed that his workplace did not allow debt collection calls.</AC5><AC6> Nothing phased these people </AC6><AC7> and they appeared to enjoy verbally abusing me.</AC7><AC8> Informing them that we wanted all debt collection to be written was also ignored.</AC8><AC9> I could accurately predict who was calling by the day and time of the calls.</AC9><AC10> Chase Bank called every Tuesday morning at 9AM.</AC10><AC11> Bank of America called every Monday morning at 10:30AM.</AC11><AC12> These calls were always professional and appreciated.</AC12><AC13> I followed specific instructions given by our bankruptcy attorney who did not want the debt collectors to know that we were planning on filing bankruptcy in a few months.</AC13><AC14> So I faithfully answered every single debt collector call for almost six months.</AC14><AC15> I politely confirmed my identity.</AC15><AC16> I confirmed I owed the debt </AC16><AC17> and then I politely told each call that I could not start to repay the debt at this time.</AC17><AC18> The banks/credit cards accepted this without a problem and remained professional.</AC18><AC19> Others like GE Capital and the vacation time share debt collectors would then start with the abusive comments.</AC19><AC20> Calling me a \"deadbeat\" and swearing at me was popular.</AC20><AC21> Another popular threat was how they would harass us nonstop until they got their money.</AC21><AC22> What finally put a stop to the unethical tactics was when they would call and inform me that I was being taped I then informed them that I too was now taping their phone calls.</AC22><AC23> Most immediately hung up.</AC23><AC24> A few would clean up their act and then act in a professional manner.</AC24><AC25> The ability to tape debt collection calls is a powerful tool for the debtor to have</AC25><AC26> and I would encourage this agency to grant debtors this right.</AC26><AC27> Nothing cleaned up the bad behavior like knowing they were being taped.</AC27>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [1, 4], [8, 10], [8, 11], [8, 9], [13, 12], [25, 24], [25, 26]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>That's not true in my experience.</AC1><AC2> Unethical debt collectors just ignore requests now.</AC2><AC3> Most consumers also don't know </AC3><AC4> that debt collectors can call you to collect a debt on any phone number you have used to contact the company or provided the company.</AC4><AC5> So calling your credit card company from your best friend's home phone, your neighbor's phone, or your relative's house puts their phone numbers on your contact list.</AC5><AC6> This practice needs to be changed to protect the confidentiality of the debt collection process.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>\"Verify\" needs to be thoroughly defined.</AC1><AC2> It should be no less than documented court admissible evidence that the consumer is responsible for the debt.</AC2><AC3> If the debt collector cannot produce this evidence, he should be barred from reselling the debt or reporting it to the CRAs.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I did the same thing </AC1><AC2>and the response was immediate to stop the abusive behaviors.</AC2><AC3>Like you most debt collectors just hang up.</AC3><AC4>Those who stayed on immediately changed their tone of voice and behavior.</AC4><AC5>I would advise anyone receiving verbally abusive, harassing, or threatening phone calls from debt collection calls buy a cheap telephone recording device and to use it when they call.</AC5><AC6>When they inform you at the mini-Miranda point interrupt them and tell them that you too are now recording all debt collection calls.</AC6><AC7>It's the most powerful tool any debtor can use.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [4, 0], [4, 1], [5, 6], [6, 0], [6, 1]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Hardships are not all the same</AC1><AC2> and some hardships can last for a year or longer.</AC2><AC3> As a consumer advocate I see very few creditors that are willing to do anything more than refer to CCC or reduce rates for a short period of time.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If surviving spouses signed or agreed to a contract or extension of credit then they are obligated to repay in my opinion.</AC1><AC2> Also, certain states that have community property laws may require a spouse to repay a debt even though they did not sign the contract.</AC2><AC3> I believe the executor or administrator should investigate whether any debt was disputed or possibly fraud.</AC3><AC4> To start they should obtain a credit report for starters regardless whether collectors disclose either way.</AC4><AC5> If a collector knows a service member passed away, then the spouse, executor, administrator should not be contacted and the account closed law or no law</AC5><AC6> as I have seen this type of issue arise over the years and have seen and approved accounts closed in the event a service member passed away.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I don't know what constitutes as \"repeatedly or continuously,\"</AC1><AC2> but more than once a day seems to qualify.</AC2><AC3> The system is designed to give collectors complete control, leaving the consumer with none.</AC3><AC4> Letters through the mail is a much more effective approach,</AC4><AC5> but collectors refuse to honor that request.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I had one debt collector in particular who called me a liar when I told him I wasn't the person he was looking for.</AC1><AC2> This was after he violated the FDCPA by calling me at 7:00 on a Saturday morning.</AC2><AC3> I called them back immediately and spoke with a supervisor who said she'd take me off their hit list.</AC3><AC4> I asked her if she got my number out of the phone book.</AC4><AC5> She claimed that they had not.</AC5><AC6> A few months later, they started in on me again.</AC6><AC7> Obviously they still considered me a liar.</AC7><AC8> I sent them a cease-communication letter with a copy to my state's Attorney General, who has been wonderful in all this.</AC8><AC9> At that point, I started sending out letters every time I received a collection call, </AC9><AC10> and, other than the one, none ever called me again.</AC10><AC11> At one point I was receiving daily calls from one collector or another.</AC11><AC12> I can name names, and I have a thick file folder full of copies of my letters and responses to my Attorney General.</AC12><AC13> It has been a wild ride, and I sure hope it's over.</AC13><AC14> I'm approaching the one-year anniversary of my most recent collection call.</AC14><AC15> I just wish they wouldn't use the phone book as their primary research tool.</AC15> Thank you for providing me this forum.\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have worked in collections for 13 years with mostly first parties.</AC1><AC2> All of these institutions have complied with the FDCPA and seek to service their lost members to the best of their abilities.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yes, one of the biggest scams that consumers get put through is the collection agency saying discussions about the debt have to be made with the parent company,</AC1><AC2> and the parent company saying they cannot talk about the debt because it has been assigned to a debt collection agency,</AC2><AC3> Please FIX THIS.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If the consumer requests you do not call someone, do not call.</AC1><AC2> This also leads into collector games, such as calling mother/father. brother, sister with sam elast name saying you thought it was their spouse and you were calling about an account...</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The entire point of collectors calling debtors at work is to intimidate and cause fear of loss of employment to the debtor </AC1><AC2>and the practice should be outlawed unless the debtor opts in to receive calls there.</AC2><AC3>Its well known that companies like Sallie Mae will continue to call debtors at work even after being told not to.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The problem is that cell phone customers have to pay for the minutes that are used.</AC1><AC2> I have pre paid cell service </AC2><AC3> and debt collectors are calling me all the time looking for someone else who I do not know.</AC3><AC4> This is the problem.</AC4><AC5> Harassment to the cell phone owner and harassment that the cell phone owner must pay for.</AC5><AC6> this is why it will always remain illegal for debt collectors to call cell phones.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [3, 4], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>No phone calls at work.</AC1><AC2> I agree!</AC2><AC3> Work is for work, not personal debt business.</AC3><AC4> I personally don't get calls at work,</AC4><AC5> but I can see how embarrassing it would be and how quickly the company would probably fire.</AC5><AC6> No work phone calls period, should be the law.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [0, 3], [0, 4], [5, 2], [5, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If a collector is calling from a different number than the one they are displaying on Called ID, that should be not allowed.</AC1><AC2> Does not allow the consumer to block those calls since the number displayed is not the one actually calling.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Many states have a judgement law where a consumer with over a certain amount of judgements may be terminated from employment.</AC1><AC2> Having a collector call at work just seems to be another way to break down a consumer and put them at a disadvantage.</AC2><AC3> A friend has mentioned to me receiving collection calls at work for one of his employees where the collector identified himself as \"Officer\"</AC3><AC4> My friend told the collector never to call again and that it's illegal to impersonate law enforcement.</AC4><AC5> Too many other stories that went to court for FDCPA violations of collector harassment at work even when the employer has told the collector not to call there again.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was following the advice of our bankruptcy attorney.</AC1><AC2> I was allowed to tell creditors only a limited amount of information.</AC2><AC3> I could confirm- my identify, that yes I owed the debt, and third that I was not able to start repaying my debt.</AC3><AC4> No I was not allowed to tell the debt collectors that we would be filing bankruptcy.</AC4><AC5> It took almost six months to complete tasks prior to notifying creditors about the bankruptcy.</AC5><AC6> During that time I was subjected to verbal abuse, threats, illegal intimidation tactics, and outright lies.</AC6><AC7> The tape recorder completely stopped the bad behavior.</AC7><AC8> It's amazing what debt collectors will say and do when they call debtors.</AC8><AC9> It's a totally different story what they want recorded.</AC9><AC10> The best money you will ever spend is a cheap $20-25 telephone tape recorder.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think that both an English and Spanish letter should be sent.</AC1><AC2> This already happens with most legal and other important things (like voting and letters from school) in my State.</AC2><AC3> But this should be a fed requirement to always include Spanish.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>AT & T is notorious for setting up new accounts that don't have an official phone number attached.</AC1><AC2> I was put in the situation of having an 800 number that AT & T customer service reps could not find in their system.</AC2><AC3> I had no way to cancel it!</AC3><AC4> Eventually the false 100 dollar debt went to a debt collector.</AC4><AC5> I respectfully explained that the debt was not valid, in a letter.</AC5><AC6> A few months later I got a letter from a different debt collector.</AC6><AC7> Again I wrote a letter.</AC7><AC8> A few months later another letter over the same faux debt from a third debt collector.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"evidence\", \"evidence\", \"evidence\", \"evidence\", \"evidence\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Ummm you want to know a annoying way to find out I was in collections... how about 12 voicemails saying they are bill collectors.</AC1><AC2> Finding time to call you is not easy.</AC2><AC3> Many of you work from 9 to 6.</AC3><AC4> Thats when im at work.</AC4><AC5> Some of you are different timezones.</AC5><AC6> Why cant I text or email you and haveyou text or email me back\"</AC6><AC7> So stone age!</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3], [1, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I can understand 1 call. </AC1><AC2>But thats it!</AC2><AC3>And they better not talk a out my debt.</AC3><AC4>But I can see them wanting to make sure they have the right number by verifying with a relative or neighbor.</AC4><AC5>Especially with that ridiculous FOTI thing they say on my voicemail.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Make the authorized user pay.</AC1><AC2> It is so dumb when I tell these collectors \"call my brother he charged it\" and they say \"I cant you are the account holder hes just an authorized user.\"</AC2><AC3> Seriously?!</AC3><AC4> So old fashioned.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Every debt I've ever had go in to collections has supposedly been given notice in advance.</AC1><AC2> In the case of 2 hospital bills many years ago they claimed to have notified me by mail several times but I had never even received the initial bill let alone the follow ups.</AC2><AC3> Since I was insured at the time </AC3><AC4> I only had to pay a reasonable co-pay and would have readily done so had I gotten the bills </AC4><AC5> (as additional information, in both cases I offered to pay at the time of visit and was told they only bill).</AC5><AC6> This particular hospital has an \"in house\" collections department </AC6><AC7> so I get the impression that they often neglect to actually send info to patients so that they can then collect the additional fees and interest as profit.</AC7><AC8> When a debt is turned to collections I feel it might be best if a mandatory 30 day notice outlining what the debt is for, previous contact attempts, amount due, available options such as payment plans and the exact effect of the collections process on the debt is sent to the person in a manner that is trackable and shows the intended recipient had the notice in their possession-perhaps a registered receipt type of delivery.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 2], [6, 5], [7, 1], [7, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>All creditors send out mutiple letters and make numerous phone calls to the consumer to give them a chance to pay their just incurred debt</AC1><AC2> and those letters will include the warning that the account will be turned over to a collection agency - not always SOLD to a collection agency, but they hire an agency to collect the debt on their behalf.</AC2><AC3> And then the collection agency sends out multiple letters and makes calls.</AC3><AC4> If the consumer feels this is not enough notice I am not sure what more can be done.</AC4><AC5> Consumers should talk to their creditors instead of ignoring the calls and letters and try to work out some kind of arrangement.</AC5><AC6> But instead some do not want to take responisibility for their debt and try to push additional costs on the creditors because there were not enough letters sent out.</AC6><AC7> It would be okay if the consumer wants more & more communications if the creditor or agency can bill the consumer for the postage.</AC7><AC8> People wonder why the cost of health care and merchandise goes up</AC8><AC9> it is because consumers that do not pay their debts and requests laws that require the creditor to spend more and more time and money to try to collect</AC9>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I guess I don't exactly understand the response.</AC1><AC2> I suppose getting the credit report on paper is useful,</AC2><AC3> but online one can actually fix multiple errors and then be notified once the changes have been made.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>That is not going to work.</AC1><AC2> The burden of proof in the American Justice System is bore by the one who is making the accusations.</AC2><AC3> Some debtors are going to lie and say that a debt is not theirs when it actually is,</AC3><AC4> but that is the nature of the beast with debt collections.</AC4><AC5> Innocent until proven guilty is the rules of the game.</AC5><AC6> Otherwise I, as a debt collector, can accuse anyone of anything owning any amount and extort money from innocent people.</AC6><AC7> Debt collection is about collecting debt, not about making accusations and extortions.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Old debt that is beyond the statue of limitation should indicate the original creditor in the initial contact letter.</AC1><AC2> I think the collector does not know this information or they deliberately refuse to disclose it because they know that the debt has run it course through the CRA's for seven years.</AC2><AC3> So why is it that a collector can rename themselves as the merchant because they bought an old debt and proceed to collect and to report it to the CRA's.</AC3><AC4> Once your credit has taken a hit the debt collector should not be able to continually harass you for the rest of your existence.</AC4><AC5> Portfolio Recovery is the culprit </AC5><AC6> and they should not be able to look at your credit report and send letters to collect as if you entered into a legal and binding contract with them.</AC6><AC7> Why should you reactivate an old debt that is over 16 years old.</AC7><AC8> Everyone know and remember the hard patches in their lives, such as medical issues, divorces, death etc.</AC8><AC9> Once the fear of being sued is removed, the chances of a collector to collect is very minute.</AC9><AC10> So it becomes time consuming and it cost money to send a certified letter to ask them to validate an alleged debt.</AC10><AC11> If the collector can not validate a debt then they should not continually sell and resell such debt.</AC11><AC12> And there is a problem with the CRA's </AC12><AC13> because it seems to me they are in cahoots with each other.</AC13><AC14> If there si not any active business with a particular account on a credit report, then the CRA's should make the collector prove that a debt is valid.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[9, 8], [11, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I was sent to collection.</AC1><AC2> Collector informed me that it was for and overdue insurance payment.</AC2><AC3> Having everything on Auto-Pay, I overlooked the notice they mailed to me.</AC3><AC4> One call to my agent and the problem was resolved.</AC4><AC5> I'm glad they called and gave me the opportunity to get to root of problem before it jeopardized my good credit rating!</AC5><AC6> I \"know\" the majority of CFPB complaints come from people who simply don't want to pay their bill.</AC6><AC7> I know this </AC7><AC8> because I have worked for a collection agency for the last twenty years, privy to all complaints we receive and very, very few have any merit.</AC8><AC9> I'm by no means stating that some people don't have legitimate complaints.</AC9><AC10> What I am saying is if we compare the number of complaints to the number of accounts being pursued by all collection agencies the percentage of complaints would be a mere fraction of one percent.</AC10><AC11> So, how much more regulation is necessary to address such a tiny percentage?</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[6, 7]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The enforcement mechanism of the FDCPA is laughable from the point of view of the debtor.</AC1><AC2> For example, a debt collector said that since they are out of the country they are not required to adhere to the FDCPA.</AC2><AC3> Luckily, I knew better, </AC3><AC4> but most folk don't.</AC4><AC5> The CFPB's voluntary reporting combined with proxy enforcement power may curb the industry's activities, and may be cheaper and faster than class action lawsuits.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Require debt collectors to send validation notices via certified mail.</AC1><AC2> There must be some way to prove the debt validation notice was at least sent, if not received.</AC2><AC3> I have had the experience of a debt collector not sending me a validation notice.</AC3><AC4> When I made a complaint to the Illinois Department of Professional Regulations, the debt collector did not have to prove that they sent the validation notice.</AC4><AC5> All the debt collector had to do was claim that they had records of sending the validation notice in their computer system.</AC5><AC6> Since I did not receive the validation notice, </AC6><AC7> I did not know what my rights were.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [6, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I can state from personal experience that when our savings ran out I became eligible for in home support services </AC1><AC2>in which I as an unpaid caregiver could be paid a very modest amount (at minimum wage payment) </AC2><AC3>because I was a caregiver.</AC3><AC4>By being an in home CareGiver, I was saving the state a lot more money than it would cost to pay me a small amount every month via in home support services.</AC4><AC5>I told this to all of my creditors, none of them cared.</AC5><AC6>Then reality hit, my state agency that was supposed to help me obtain in home support services instead cast fear into both me and my parent by stating to me on the phone that whatever they paid me, they would file a lien on the home to get back if I outlived my parent.</AC6><AC7>It turns out this application of the law did not apply to me.</AC7><AC8>However the damage was done.</AC8><AC9>I lost 1.75 years of eligibility and probably enough money to pay all of my vendors, </AC9><AC10>and, I would have never had to prolong the default for more than a couple of months if any of my vendors had cared enough to just help me get through the process of applying for in home support services.</AC10><AC11>But because judges have become so vindictive in their approach to credit card defaulters, </AC11><AC12>judges have allowed the credit card companies to become LAZY at solving their own problems internally.</AC12><AC13>Nobody helps, </AC13><AC14>everybody simply self protects their own interests first and foremost.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[7, 8], [1, 2], [11, 10], [13, 12]]", "output": "{\"relation_types\": [\"evidence\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Like most regulatory programs additional cost would be inevitable,</AC1><AC2> it could be paid for by a yearly fee that collectors pay to be a licensed collector.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If a debt is to be sold, the owner of the debt should be required to send an itemized statement to the debtor.</AC1><AC2> The statement should have a large-type header, something like, \"[NAME OF CREDITOR] IS SELLING THIS DEBT TO [NAME OF DEBT BUYER].\"</AC2><AC3> This would give the debtor another chance to pay in the simplest way, before getting tangled up in idiot phone calls, </AC3><AC4> and it would help the debtor identify the debt.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2], [1, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>No robo-calls or automated dialing systems should be allowed for any profit-making or solicitation purpose. Period.</AC1><AC2> You can call me if a tornado is coming,</AC2><AC3> but if you want money, you have to use a person.</AC3><AC4> And I don't see why I should pay for the call.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would like something that addresses the amount of times a debt collector can contact someone other than the debtor.</AC1><AC2> My husband's exwife has several debts</AC2><AC3> and we are sometimes contacted several times a day and often at night to find out if we are in contact with her</AC3><AC4> they have been divorced 36 years</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 9, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do not believe that use of social media should be allowed to initiate or to conduct any legal or other sensitive arrangements or communications to and from debt collectors.</AC1><AC2> There are a couple of things that I've noticed about social media:</AC2><AC3> social media is a fad, and an outlet.</AC3><AC4> People use social media as an outlet for the narcissistic/public/storybook/memorable moments side of their lives.</AC4><AC5> And recent evidence shows that fewer teens and young adults are using facebook and twitter.</AC5><AC6> And I am most certain that no social media user would like for their private life to become public life by dealing with a debt collector on facebook.</AC6><AC7> Nobody likes to be in debt and have bill collectors chasing them,</AC7><AC8> In writing\" to me, means a letter delivered in the mail.</AC8><AC9> I would also accept an interpretation to mean delivered by email but only on official company letterhead documents. And only if first requested by the debtor and not first initiated by the collector.</AC9><AC10> But I can not accept \"in writing\" to mean messages and communication sent via social media.</AC10><AC11> I think that E-Sign consent should only be valid for the original creditor.</AC11><AC12> And any and every collector who then gets involved must get the debtor to consent E-Sign with them.</AC12><AC13> The reason is because there are some things that I, as a consumer, am comfortable with dealing online or through email with my original creditors,</AC13><AC14> but there are things that I know I would not feel comfortable dealing with online/email with a debt collector.</AC14><AC15> So E-Sign should not be blanket consent for anyone and everyone.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 4], [2, 3], [2, 4], [5, 6], [10, 12], [10, 13], [11, 10], [14, 12], [14, 13]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>You know, my only experience is with medical debts,</AC1><AC2> but with those, we have NOT been notified several times, or sometimes, even one time.</AC2><AC3> No one seems to care if the address is right</AC3><AC4> and when you're dealing with an old person, the billing address is often not the same as the physical address);</AC4><AC5> sometimes the bill seems to go to what they claim is a collection agency even before the insurance company finishes with it.</AC5><AC6> We are perfectly happy to pay our bills,</AC6><AC7> but our contract is with the provider,</AC7><AC8> and that's who we pay, not a collection agency.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am an experienced recipient of collection calls.</AC1><AC2> As I have explained in another post here, I live in a fairly large metro area,</AC2><AC3> and whenever anyone with my very common last name and first initial skips town without paying his/her bills, I'm the one who gets the calls from the debt collectors.</AC3><AC4> I know that a call about \"an important business matter,\" is a call about a debt.</AC4><AC5> I have received many of these kinds of calls.</AC5><AC6> Whenever a debt collector calls me and leaves a message without a name, it doesn't take me very long to figure out that the call is from a debt collector.</AC6><AC7> If the debt collector calls and leaves a name, that debt collector is revealing to me, an unrelated third party, that the individual has a debt in collection.</AC7><AC8> I consider this to be a violation of the spirit of the FDCPA if not the letter.</AC8><AC9> Whenever a debt collector calls me, I am burdened with the knowledge that I now know the name of someone else who has a debt in collection.</AC9><AC10> I've gotten any number of the calls described in #4 telling me not to listen if I'm not the named individual.</AC10><AC11> The big problem with that is that, one again, the name of a debtor is being revealed to me,</AC11><AC12> and then there's the added dilemma of the fact that now my phone number has been programmed into a debt collector's robo dialer.</AC12><AC13> When that happens, the calls continue to come.</AC13><AC14> I always disobey the instructions and listen to the message.</AC14><AC15> I then call the debt collector to report a case of mistaken identity.</AC15><AC16> It's the only way to stop the calls.</AC16><AC17> In all the collection calls I have gotten over the years, I have received only one message with the \"mini-Miranda\" warning.</AC17><AC18> When I called the debt collector to report another case of mistaken identity I was connected with an individual in a call center in India.</AC18><AC19> After I told the woman she had the wrong person, I thanked her for the \"mini-Miranda\" and she hung up on me.</AC19><AC20> I don't have any answers, just lots of experience.</AC20><AC21> I hope someone finds this information useful.</AC21>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [3, 4], [7, 8], [11, 12], [14, 15]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There was another debt collector that went after me a second time.</AC1><AC2> First they placed me on their hit list trying to get me to pay the debt of a man with my last name and first initial.</AC2><AC3> I told them that they were contacting the wrong person.</AC3><AC4> Then, several months later, they went after me again, this time looking for a woman with my last name and first initial.</AC4><AC5> After the second round, I send them a cease-communication letter,</AC5><AC6> and they haven't called me again.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 8, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The FDCPA needs to be brought into current times.</AC1><AC2> It is more efficient and effective for collectors for sure.</AC2><AC3> It is the preferred method of communication for consumers without a doubt.</AC3><AC4> Most would certainly rather get an email or text, rather than a phone call.</AC4><AC5> Regular mail is inefficient and becoming more expensive every year and often ignored.</AC5><AC6> It benefits everyone to update to allow using modern technology to communicate with each other.</AC6><AC7> Social networking is can should be used for locating only.</AC7><AC8> I don't believe that communications through social networking is in the best interest for any of the parties involved.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [2, 3], [3, 4], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When the first collection agency can't collect they sell the debt to 2nd tier collectors.</AC1><AC2> They sometimes sell it to 3rd tier collectors.</AC2><AC3> My experience in helping resolve collection disputes is sometimes the first collector and always the third collectors do not provide debt validation letters.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Consumers who ask for validation should receive just that: a validation that the agency has verified the balance due has some basis as alleged.</AC1><AC2> Too often consumers categorize this process as requiring \"proof\" as taxguy does.</AC2><AC3> This is not the function of the validation process.</AC3><AC4> \"Proof\" is something that will occur in court (or not).</AC4><AC5> No document will be enough \"proof\" for many consumers.</AC5><AC6> That is why the court system exists.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>FDCPA 805(a)(1) is routinely violated by at least two large banks--Citicards and Wells Fargo.</AC1><AC2> Both have called before 9 AM and after 8 PM.</AC2><AC3> I live in the Central Time Zone</AC3><AC4> and no matter where these banks are based, they ignore that and call early and late.</AC4><AC5> The mailing address should take priority</AC5><AC6> and it should not matter whether the collector is based in Portland, Oregon or Ft. Lauderdale, Florida,</AC6><AC7> if it's 8 AM in Chicago, they should not be calling.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [5, 6]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Patience is the number one option.</AC1><AC2> Agree to contact the credit card company and have the debt reduced to what it was at the time of default.</AC2><AC3> Agree to even a 5 dollar monthly autopay with the promise that eventually it will be increased.</AC3><AC4> Then report the account in good standing to the credit bureaus as long as those five dollar payments come in.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Bonzarel. while I think your idea is a good one,</AC1><AC2> it could open the floodgates to interest rate padding the debt until it reaches one of the \"floors\" that you are suggesting.</AC2><AC3> 30% interest rate charges, penalties and fees (which in turn also get hit with a 30% interest rate charge), can accelerate even a 500 dollar debt into the thousands in less than 24 months time.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There is now a class of \"consumer representatives\" which obtains from debtors a signed \"Power of Attorney\" and who then claim to be authorized to act as the consumer's attorney for purposes of debt resolution.</AC1><AC2> They routinely seek to avoid the debt, most commonly by not answering their phones.</AC2><AC3> My current practice is to advise the relevant state bar of the unauthorized practice of law by these jokers;</AC3><AC4> perhaps a clarification statement that such persons must be licensed to practice law in the state in which the debt is being collected would cut down on the confusion.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In fact, it is a gross distortion of the law for the CFPB to claim that suit on a debt outside of the statute of limitations period is per se unfair, deceptive or misleading.</AC1><AC2> Under the Federal Rules of Civil Procedure (and most state civil rules), the statute of limitations is an affirmative defense which must be pleaded by the defendant;</AC2><AC3> if it is not, the defense is considered to have been waived.</AC3><AC4> The purpose of the defense is to enable a party to avoid being disadvantaged by the long delay, loss of evidentiary documents, memory fading, etc.;</AC4><AC5> if the debtor doesn't claim that they are disadvantaged by the delay, then the delay clearly isn't so long as to preclude a vigorous defense.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am sure many judges would disagree with you.</AC1><AC2> Courtrooms are not a playground.</AC2><AC3> And judges do not like it when plaintiffs waste their time by filling frivolous lawsuits that do not have proof.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 13, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>what kind of consumer contacts do debt collectors... disputing the debt.</AC1><AC2> That presumes they actually follow the law and do a validation investigation.</AC2><AC3> That is wrong,</AC3><AC4> they do not.</AC4><AC5> I sent a letter to a company claiming I owed a debt</AC5><AC6> and I was clear I was disputing the debt. A clear, declaratory sentence.</AC6><AC7> I mailed it to the address listed.</AC7><AC8> There was NO PERSON who signed this letter to me.</AC8><AC9> I had to send it to To Whom It Concerned.</AC9><AC10> But it was clear I was disputing the debt.</AC10><AC11> I did so within two weeks, well within the 30 days.</AC11><AC12> Yet they did nothing but wait 30 days and send me a letter saying \"here is the info you requested.\"</AC12><AC13> It contained nothing I recognized.</AC13><AC14> You are presuming they are actually validating.</AC14><AC15> This is the biggest mistake.</AC15><AC16> They do none of that.</AC16><AC17> Any rule that defines what qualifies as a dispute would help. The clearer, the better.</AC17><AC18> The vagueness now has led to abuses. Such as \"frivolous and irrelevant\" disputes.</AC18><AC19> That is a license to abuse consumers.</AC19>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [14, 15], [16, 17], [17, 18]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Clear communication helps everyone, not just consumers.</AC1><AC2> I think debt collectors when trying to collect just send bills,</AC2><AC3> and everyone knows what a bill is.</AC3><AC4> But when they devolve into harassment, they blur the lines between trying to collect debt within the law and behaving in misleading and abusive ways toward consumers.</AC4><AC5> TRuly, the robot calling, the letters, they have money enough for this.</AC5><AC6> If they communicated clearly up front, they would save more money.</AC6><AC7> The post office is still a good deal,</AC7><AC8> not an expensive way to communicate.</AC8><AC9> You are missing the boat on the problem, though.</AC9><AC10> It is not the costs or whether they should communicate.</AC10><AC11> Most of these companies hire people who are barely literate, poorly trained and certainly uninformed -- wait, UNINFORMED -- about the laws that already exist regarding debt collection.</AC11><AC12> That is a huge problem when trying to get information from an employee who doesn't know the law requires him/her to provide certain information.</AC12><AC13> This has come about from decades of lack of oversight, in my opinion.</AC13><AC14> Lack of oversight, lack of clear rules and lack of enforcement.</AC14><AC15> So, if they don't have to worry about following the law, they hire whoever they can cheap and don't bother to train them.</AC15><AC16> This is why there are so many of these companies</AC16><AC17> and after some of them do get in trouble, they just change their name and keep on doing the same law-breaking habits.</AC17>\n### Here is the list of pairs of related argument components in this paragraph: [[6, 7], [8, 9], [9, 10], [15, 14]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>No matter how you slice this conversation, phone calls are the biggest abuse.</AC1><AC2> You can have rules and do about the time,</AC2><AC3> but they are ignored.</AC3><AC4> Until you or the FTC creates rules that fine these people -- and not put the burden on the consumer to sue -- this abuse will go on.</AC4><AC5> I have to laugh at these querstions.</AC5><AC6> You have to be putting me on.</AC6><AC7> The most abusive things debt collectors do are with their phones.</AC7><AC8> They block their numbers still.</AC8><AC9> They use various numbers</AC9><AC10> they mislead their identities.</AC10><AC11> THE PROBLEM is the onus is on the hapless consumer to get legal redress.</AC11><AC12> Not good enough.</AC12><AC13> You need to create fines and actually impose them.</AC13><AC14> That will stop this phone abuse.</AC14><AC15> They call at work, always wkill have some excuse.</AC15><AC16> and call after hours.</AC16><AC17> Be honest, this is an outrage what these companies have done, </AC17><AC18> and nobody has minded the store on them.</AC18><AC19> Never should the onus be on the consumer to get this to stop.</AC19><AC20> You have to find a lawyer who thinks a whopping $1,000 is worth suing over.</AC20><AC21> You have rigged this system in favor of the sharks.,</AC21><AC22> and that is why these sleazy companies have proliferated and have grown more and more egregious in their actions.</AC22><AC23> no more recorded calls.</AC23><AC24> call from one number</AC24><AC25> as soon as someone says stop calling, STOP.</AC25><AC26> if there is any call beyond that, they get fined.</AC26><AC27> Agreed, people will have to write a letter </AC27><AC28> because none of these companies will admit they were told to stop calling.</AC28><AC29> But they do receive the letters,</AC29><AC30> which should go to a physical address and to a person, not just a vague company name.</AC30><AC31> Last, stop allowing these bad companies to change their names.</AC31><AC32> They get in trouble, they change their names, and go on doing terrible things under another name.</AC32><AC33> Just look online at some of these companies and how many names they've gone through.</AC33><AC34> The reason this got so bad is nobody has been looking out for the consumer.</AC34>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [12, 13], [19, 18], [21, 20], [26, 27], [30, 31]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Why should the consumer pay a filing fee at all if the collector is at fault?</AC1><AC2> That could be a hardship on many people.</AC2><AC3> The collection agencies need to follow the rules of doing their validation correctly,</AC3><AC4> and this would not be an issue.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [2, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is a violation of the FCRA (Fair Credit Reporting Act) and can be corrected quickly by the credit reporting agency.</AC1><AC2> If the credit reporting agency refuses, there are many Consumer Protection Attorneys that would happily take this case on contingency.</AC2><AC3> This type of violation normally never sees the inside of a court room.</AC3><AC4> A letter from a well known CP Attorney will likely get awards and the prompt correction of the credit report.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 11, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Email communication is a huge advantage for all involved parties.</AC1><AC2> Emails provide consumers with much better tools to control how they are being contacted.</AC2><AC3> First, if treating emails as \"in writing\" (as they should), disputing a debt or demanding that collectors cease communication is much easier.</AC3><AC4> Second, setting rules to hide collection notices is a powerful tool not available in any other communication medium.</AC4><AC5> 3rd party disclosure is therefore a lesser concern.</AC5><AC6> Third, email delivery is fast, and facilitates an efficient process, where less communications can be made to reach a settlement.</AC6><AC7> Everything is in writing.</AC7><AC8> Fourth, email is significantly less confrontational than phone calls </AC8><AC9> and causes much less stress to recipients.</AC9><AC10> Fifth, email is better than recording in keeping record of communication,</AC10><AC11> making it even harder for collectors to hide acts of non compliance.</AC11><AC12> Email should be allowed, while keeping the sensitive parts of the message (disclosures, personal details etc) hidden - as an attachment or as a link that is part of an email.</AC12><AC13> Yes, email is more cost efficient to collectors</AC13><AC14> which is why using email should be conditional on collectors not charging the debtors any fees for their payments.</AC14><AC15> The added profitability should be shares with the consumer.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [1, 12], [1, 2], [1, 3], [1, 5], [1, 8], [1, 9], [4, 3], [8, 7], [10, 9], [13, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Email rules allows hiding emails and routing them in ways that surpass any other communication method.</AC1><AC2> In addition, since email \"sender ID\" is easier to demand and maintain,</AC2><AC3> debtors will have an easier time managing what communication they receive, and when.</AC3><AC4> As a result, there is no necessity for forcing specific times of email delivery.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have a creditor who begins calling withing a few days of becoming past due.</AC1><AC2> They are relentless calling up to 10+ times a day.</AC2><AC3> I don't call them back </AC3><AC4> because once on the phone with them, they hound you until you agree to make a payment or post-date a payment.</AC4><AC5> If I don't call them within about 15 days of becoming past due, they start calling my relatives and neighbors and say \"we're trying to locate xxx - do you know them?\".</AC5><AC6> When they answer yes, they ask them to deliver a message to me (phone number and name).</AC6><AC7> I've been told this is not illegal since they are using public information and not revealing who they are or what the call is in relation to, </AC7><AC8> but this tactic is shameful.</AC8><AC9> We are making an honest effort to get current and stay current, </AC9><AC10> but when my neighbor hands me a piece of paper with a note on it, I feel pretty powerless.</AC10><AC11> This is both harassment and abuse in my opinion</AC11><AC12> and it should be addressed.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [11, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A dialer does none of the things to which you refer.</AC1><AC2> A human takes a lists of calls that are deemed restricted to any of the criteria that you listed,</AC2><AC3> and loads that list into the computer software that also holds a lists of all calls to be made.</AC3><AC4> Then the list of restricted calls are \"scrubbed\" out of the automated dialer.</AC4><AC5> This scrubbing process is akin to a human scratching out a phone number with a pen on a paper list.</AC5><AC6> There are no measurable gains in consumer protection to which you refer.</AC6><AC7> Calls are not recorded through the dialer.</AC7><AC8> Dialers work in unison with the recording software.</AC8><AC9> This recording software records manual phone calls just the same.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Work email can be handled in a foti-compliant manner, where the email body doesn't disclose the debt but includes content in a link, that is part of the email but isn't available for viewing by the administrator.</AC1><AC2> Social media and text messages can be handled the same way.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think they should have to have a license to be debt collectors</AC1><AC2> and at the time they did not.</AC2><AC3> Additionally there should be harassment laws regarding just this matter about landlords</AC3><AC4> as if someone sues you 3Xs for the same thing, they should lose their collections license.</AC4><AC5> I even responded from the very beginning with a certified letter stating that I did not owe any part of the debt!</AC5><AC6> Additionally what did help after almost 20 years was reporting the landlords real estate license for violating business practices in NYS for overcharging rent statements.</AC6><AC7> This certainly got their attention </AC7><AC8> however I still had to retain an attorney for a lawsuit against them and prevailed </AC8><AC9> but then you have to pay the 20% of what you recoup to the attorney.</AC9><AC10> I wish they would just lose their license for harassing you for 20 years.</AC10><AC11> It is disgusting that no one in NYC has done anything about it</AC11><AC12> but then I don't need to tell you how corrupt everyone there is and that includes the legal system.</AC12><AC13> NYC government and housing system is like dealing with the mob</AC13><AC14> and I say that after having to deal with them aggressively for the past 3 years after being attacked for almost 20</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [12, 13]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>With increased and onerous liability for making calls and sending letters to debtors, creditors and debt buyers have had little option but to file suit rather than repeatedly attempt to contact an uncooperative or uncommunicative debtor.</AC1><AC2> Most complaints provide adequate and identifying information about the debt.</AC2><AC3> In my experience, most debtors don't feel taken advantage of by lawsuits,</AC3><AC4> they simply understand they owe the debt</AC4><AC5> so there is little point in filing an answer or taking time to appear in court.</AC5><AC6> In fact, the vast majority never respond to a Federal Law letter inviting them to dispute the debt.</AC6><AC7> Filing suits and appearing in court is expensive and time consuming for creditors and debt buyer,</AC7><AC8> but there is little alternative,</AC8><AC9> nor should there be</AC9><AC10> as these matters have always been governed appropriately by State law and State judges.</AC10><AC11> and the US is a credit ecomony</AC11><AC12> over 70% of our economy is based on consumer spending </AC12><AC13> which comes mainly from credit extensions and not consumers pay increases),</AC13><AC14> there are simply more defaults,</AC14><AC15> particularly in a Great Recession.</AC15><AC16> Any heavy handed Federal regulation will hamper and restrict credit granting and debt buying,</AC16><AC17> both of which are needed by the economy and the credit industry.</AC17><AC18> While credit grantors should should make their documentation retention systems more accessible and share more documents upon a sale of accounts,</AC18><AC19> a lack of documentation should not hamper State court lawsuits when a debtor offers no dispute so long as the account is adequately identified in a complaint.</AC19><AC20> In Michigan, efforts to \"make it more likely that consumers would defend themselves\" have fell very flat for the reasons mentioned above.</AC20><AC21> As it has always been, the protections are in place and are used by those debtors that wish to avail themselves of them.</AC21><AC22> Judges are there to listen.</AC22><AC23> However, most debtors (bless them) understand they simply owe the debt.</AC23>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [4, 2], [4, 3], [5, 6], [8, 9], [10, 11], [10, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When we did it, it was agreed that any 3rd party communication outside SOL at any point was a potential violation of the FDCPA.</AC1><AC2> Since 3rd party debt collectors are required to be truthful at all times,</AC2><AC3> they cannot say 'we are attempting to collect a debt' if they are time-barred from collecting the debt.</AC3><AC4> We were the meanest, nastiest, most aggressive in the multi-state area at that time,</AC4><AC5> and this was the stance.</AC5><AC6> Suggestion is clarify that time-barred debts are time-barred for the 3rd party as well, and cannot be collected, attempted to be collected, or bought/sold.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A contractor who did work unlicensed was able to file bogus claims against both me and my wife amounting to double the original bid price.</AC1><AC2> there was no court action.</AC2><AC3> I managed to get rid of the debt collector </AC3><AC4> but there seems nothing I could do to stop another contractor doing the same thing.</AC4><AC5> There should be a penalty for the people filing the false debt.</AC5><AC6> The amount in question was almost $10,000</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I do not think that answering 97% of the calls from an automated dialer within two seconds is a solution to my problem.</AC1><AC2> I would like for Mr. Dan to explain exactly what the safeguards of using a robo dialer are.</AC2><AC3> From my perspective as a frequent recipient of robo calls from debt collectors, the problem is a lack of ownership and impersonality of the collection agency when the debt is not assigned to one collector to handle.</AC3><AC4> Years ago when a collector would call me, it would always be the same person.</AC4><AC5> Now it is not.</AC5><AC6> Assign the debt to one collector who would then take full responsibility for making all contacts with the alleged debtor.</AC6><AC7> This could even include acquisition of location information.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 2], [5, 3], [5, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 10, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Verifying the debt by the collector is a must.</AC1><AC2> I had an instance where the bill was sent to wrong address.</AC2><AC3> After 6 months I got a call reg the debt.</AC3><AC4> They mentioned only the amount and the service provider.</AC4><AC5> when service provider was contacted they said already it is on collection and we're not helpful.</AC5><AC6> i asked them to send the Bill to pay it off.</AC6><AC7> Only more calls from collector started.</AC7><AC8> After almost 6/7 requests to the collector the bill detail was sent .</AC8><AC9> On verification with my bank statement I found out that the amount had been paid.</AC9><AC10> When confronted both the collector and service provider did not bother to apologize for the mistake.</AC10><AC11> It is a case of non verification.</AC11>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Keep in mind that there are businesses or entities that allow people to receive credit for things they do not have money for at the moment.</AC1><AC2> The business or entity, in good faith, extends credit to the consumer with the intent to receive payment at a later date.</AC2><AC3> The business or entity was provided contact information by the consumer that it will use to collect or pass along to a collection agency to use to collect.</AC3><AC4> The consumer can list whatever numbers or information they want </AC4><AC5> and the business or entity must consider it to be truthful.</AC5><AC6> Often the only way to determine if the information is accurate is to make a phone call.</AC6><AC7> I've received these calls myself.</AC7><AC8> Depending on how much debt and how many business or entities have extended credit may be a factor on how often third parties are contacted.</AC8><AC9> I do believe that collection agencies that violate the law are not good for anyone.</AC9><AC10> However, I pay my bills</AC10><AC11> and would expect that everyone should be responsible for paying their bills.</AC11><AC12> Much of the discussion has nothing to do with weather the bill is owed but how the contact was made.</AC12> Have you been harmed by a phone call?  No Has the business or entity been harmed by the debt not being paid?  Yes Have those of us that due pay our bills been harmed by the outstanding debt?  Yes\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have had my cell phone number for 4 1/2 years;</AC1><AC2> the previous owner of my number had a student loan debt....</AC2><AC3> I cannot get collection agencies to stop calling me!</AC3><AC4> Every time I emphatically tell them I'm not the person in question </AC4><AC5> and the person dutifully \"takes me off the list\".</AC5><AC6> But in another few months I hear from them (or probably a collector who bought the list) all over again.</AC6><AC7> I'm familiar with the FDCPA,</AC7><AC8> but I don't think it currently provides a practical solution for me.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The current penalty for violating the FDCPA is \"not less than $100 and up to $1000.\"</AC1><AC2> Further, the violations cannot be \"stacked\"</AC2><AC3> so those violating the law 10 times on one debt, will generally only face the maximum of a $1000 penalty.</AC3><AC4> Punitive damages are hard to prove.</AC4><AC5> A $1000 penalty is not a deterrent to the debt collection industry,and too low to get most attorney's interest is taking these cases.</AC5><AC6> If we want to see the law upheld, raise the penalty to $10,000 per violation</AC6><AC7> and you'll see most of these characters clean up their act and stop using abusive collection tactics.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1], [5, 4], [5, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The contractor was just able to make up an invoice and send it to the collection agency.</AC1><AC2> At the time legal action was being pursued against the contractor </AC2><AC3> and we then had to deal with collection agencies aswell as a unlicensed contractor.</AC3><AC4> So in answer to your question , I dont think it would have made much difference</AC4><AC5> as it appears that an invoice is sufficient grounds to file a claim</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [4, 0], [4, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If you have a standing complaint with a company's mishandling of your account and/or complaints with any federally recognized oversight bureau, like CFPB, a company should be required to resolve the dispute before prosecuting what they define as a breach of debt.</AC1><AC2> Banks and companies should not be allowed to try to prosecute over \"missed\" payments that were erroneously processed by them.</AC2><AC3> Especially when evidence has been provided to the contrary and disputes are on file.</AC3><AC4> Continuing to place the burden of proof on the consumer is onerous and prohibitive for many consumers.</AC4><AC5> I personally had a problem with a mortgage company</AC5><AC6> and the amount of my time it took to get the problem resolved was worth 20% of the original principal amount.</AC6><AC7> If a consumer complaint is on file, the company should be burdened with disproving the consumer complaint before prosecuting.</AC7><AC8> They have both the financial and personnel resources to do so, whereas a consumer usually does not.</AC8><AC9> Otherwise, why wouldn't they continue to bully and defraud consumers to boost bottom line profits?</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5], [6, 7], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 8, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As I have had many accounts in collection due to an identity theft, </AC1><AC2>I have several different experiences with the \"validation\" process.</AC2><AC3>My belief is that there is no rule defining exactly what documentation constitutes validation.</AC3><AC4>As we know, if we dispute with the CRA and ask for a reinvestigation, all that will be done is the social security number will be matched and verified with the amount owed. </AC4><AC5>It is a useless tool and a waste of the consumer's time.</AC5><AC6>Asking for validation with a collection agency is almost as useless.</AC6><AC7>This is because current laws suggest that the collection agency provide the consumer with information \"such as\" the name and address of the original creditor, and the amount owed.</AC7><AC8>This does not prove a debt is still owed, and to whom it is owed.</AC8><AC9>If we are going to allow companies to buy debts for amounts as low as pennies on the dollar, then the burden of proof MUST lie with the collection agency.</AC9><AC10>As they are in the business of collecting debts,</AC10><AC11>they are given all information regarding payment history, original contracts, methods of prior payment, and all personal information relating to the consumer.</AC11><AC12>For far too long the consumer has been at the mercy of the collection agency.</AC12><AC13>We are forced to send proof of our identity, current mailing address, phone number, etc. as well as all documentation we have regarding the account that would show an error has been made.</AC13><AC14>The collection agency has this information readily available.</AC14><AC15>And if they do not, the account should be permanently deleted.</AC15><AC16>If the collection agency cannot produce documentation from the original creditor including (1)a contract (2)payment history from original creditor if any (3)proper identification of the consumer (4)proof of purchase of the debt (5)proof they are legally able to collect on the debt in the consumer's state-then there should be laws in place that prevent the debt from being reported.</AC16><AC17>In most cases, it is being reported from the original creditor already.</AC17><AC18>And if it isn't, this should be a red flag to CRA's that the debt is not valid.</AC18><AC19>Collection agencies must be able to show proof that a collection notice was sent,</AC19><AC20>and they should be required to provide the same proof a consumer must provide to prove a dispute was sent (CMRR).</AC20><AC21>If it is required of the consumer, it should be required of all.</AC21><AC22>A debt should be considered validated only when all of these conditions have been met.</AC22><AC23>Without these safeguards, a consumer could end up paying a debt they do not owe.</AC23><AC24>It happens all the time.</AC24><AC25>How many stories have you heard of collection agencies voluntarily providing any information to a consumer before demanding money?</AC25><AC26>They don't.</AC26><AC27>Enough is enough.</AC27><AC28>Take the burden of proof off the consumer and place it with the party that legally owns the debt.</AC28>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [4, 3], [5, 6], [5, 7], [10, 9], [11, 12], [19, 20], [21, 22]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>They didn't say a thing about it.</AC1><AC2> They contacted him via phone </AC2><AC3> since he was homeless at the time and told him they were taking him to court.</AC3><AC4> They didn't even tell him which debt it was for initially.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My concern about a \"reasonable\" investigation is that it is so subjective.</AC1><AC2> It opens the collector up to an entirely new avenue of prosecution.</AC2><AC3> It is unlikely that a consumer and collector are ever going to agree on what is \"reasonable\".</AC3><AC4> As it stands now courts have steadfastly maintained that collectors are allowed to rely on information given to them by their clients: ie: a debt for an amount stated against consumer so and so.</AC4><AC5> Beyond that the consumer and the collector have the ability to ask a third party, a judge, to make a determination.</AC5><AC6> By all appearances the FTC and the CFPB would place this burden directly on the collector, with predictable results: more needless litigation over the process and less resolution regarding the debt itself.</AC6><AC7> One alternative might be for the rule to state a set formula for verification along with the proviso that if the collector follows it they are provided a safe harbor from litigation.</AC7><AC8> However the myriad possibilities for reasonable investigation probably preclude anything so simple.</AC8><AC9> In the end I think it is still a judges purvey to make the final determination.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [1, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As a former bill collector for over 17 years there are alot of ways the industry needs to be cleaned up.</AC1><AC2> I do believe that a debtor should be informed of when a debt is transfered from original creditor to a collector and whether or not that collection agency purchased the debt or if the agency is contracted by the original creditor to collect the debt.</AC2><AC3> There is a big misconception that I see being made in most of these comments that everything is \"purchased\" which is far from the truth!</AC3><AC4> I personally have not and would not work for an agency that purchased debt,</AC4><AC5> because I know and have heard the horror stories of not only how they treat the debtor but also how the business as a whole treats the collector.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Owing to the inherently non-private nature of the internet,</AC1><AC2> NOTHING should be sent electronically.</AC2><AC3> There is absolutely nothing wrong with continuing the use of the US Mail.</AC3><AC4> However, the consumer should be free to allow the use of specific electronic communications, if they deem it proper.</AC4><AC5> However, that should be specific;</AC5><AC6> so that a collector cannot use Facebook, twitter, etc; only the specified means.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think the Massachusetts rule is a positive step in the right direction, and would be better than the current situation.</AC1><AC2> However, for those debtors who truly cannot pay at all, due to a serious adverse life event, such as the loss of a job due to a medical disability, their situation is not likely to change from week to week.</AC2><AC3> For example, most disability insurance companies only require a patient's doctor to submit a re-certification of the patient's medical disability every 3, 6, or 12 months.</AC3><AC4> In essence, the debt collector would be acting as a sort of medical re-certification investigator twice a week, which is unnecessary, burdensome on both debtor and collector, and potentially harassing.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Debt Neutrality Petition, you have made a lot of arguments in this thread about \"involuntary\" defaulters.</AC1><AC2> However, the law doesn't make that distinction.</AC2><AC3> Financial hardship is not a defense to someone's failure to repay a debt that he or she promised to</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Preserving the industry DOES protect consumers.</AC1><AC2> If there isn't a lawful and enforceable way of collecting money that is owed, then future consumers will pay the price in increased cost for credit, or denial of credit entirely due to risk.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>If consumers can receive phone calls on Sundays, there's no reason for them to not accept emails.</AC1><AC2> Controlling which messages you get and how they are routed and presented to you, including what alerts or sounds they make when received, is only possible with email.</AC2><AC3> Email is far superior to any other communication medium.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>These so called free-to-end-user alternatives (if allowed to be used) also need to be regulated.</AC1><AC2> There are huge privacy concerns at stake here.</AC2><AC3> My friend started texting me on a free texting app, </AC3><AC4> and then all of a sudden I was begging to be bombarded by SPAM text and SPAM phone calls.</AC4><AC5> I can't be certain that the Free Text App that my friend was using was selling my phone number to other people, </AC5><AC6> but it was a massive coincidence.</AC6><AC7> Why else are these text apps free?</AC7><AC8> How do they make their money (besides a few embedded ads)?</AC8><AC9> Of course these people are selling phone numbers.</AC9><AC10> My privacy is not for sell.</AC10><AC11> Nor is my phone number.</AC11><AC12> The CFPB needs to really think about these so called free-to-end user alternatives and what sort of privacy practices these companies are engaging in, if any.</AC12>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Providing too much information in the first notice creates a risk of divulging sensitive personal information to the person who now lives where the actual debtor used to.</AC1><AC2> I do think that providing the chain of ownership information (especially original creditor) should be provided for sold debts.</AC2><AC3> When it comes to medical debts, HIPPA becomes another concern.</AC3><AC4> Therefore, specific info on medical debts should only be provided AFTER the collector has verified that they are communicating with the proper party.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [3, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I had a debt collector tell me they told me that if I'd make a payment right then they'd make a payment plan.</AC1><AC2> This was an Amercian Express collector.</AC2><AC3> Once I made the payment they said they're supervisor would have to approve it and they weren't there. But that she would call back at 7pm MST to make the arrangement.</AC3><AC4> Needless to say no one called back</AC4><AC5> and American Express would not make arrangements with me </AC5><AC6> because they said I was able to pay that amount so I shouldn't need arrangements.</AC6><AC7> I was so dumbfounded by the collection practices of American Express.</AC7><AC8> It was from their internal collections department.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The CFPB should clarify whether \"verify\" means verify that you are a legitimate collection agency (not a scam) OR does it mean to prove the legitimacy of the account relative to the debtor's objections.</AC1><AC2> If is the former, some basic information relative to the account--contract, itemized statements, or any other identifying information that only the creditor would have access to would suffice.</AC2><AC3> If CFPB wants \"verify\" to answer every single objection a debtor can cook up, a collector could never move forward without spending hundreds of hours normally reserved for litigation.</AC3><AC4> As to a time frame on answering, I think the current system of stopping collection action until verification is provided is appropriate.</AC4><AC5> Normally, sending the information to the debtor is not the hard part.</AC5><AC6> Getting the info from the creditor and then circling back around to this particular account is what takes the time.</AC6><AC7> I don't think disputes should be limited to the first 30 days, but should be prohibited once suit has been filed.</AC7><AC8> The Court rules and discovery process provide the debtor all the access to this information they could ever need or want</AC8><AC9> and the provide this access under pretty strict penalties from the Court if the creditor/plaintiff does not provide the info requested.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have a hard time believing that a debt collection company \"treat[s] EVERY dispute the same\"</AC1><AC2> when debt collectors seem to blatantly disregard a dispute that has the appearance of being \"copied directly from the internet.\"</AC2><AC3> Consumer advocates are trying to educate consumers, debtors, and alleged debtors with information on how to handle debt collectors or how to handle their particular situation.</AC3><AC4> We are try to give them relevant links to FDCPA, FCRA, HIPPA, and various form letters that can help them communicate with debt collectors.</AC4><AC5> There is nothing wrong with form letters.</AC5><AC6> But there is everything wrong with debt collectors disregaring certain letters just because they don't like that it came from a consumer advocate source.</AC6><AC7> Debt collectors operating legally and with nothing to hide should never treat form letters as something to throw in the trash.</AC7><AC8> You seem to be saying that debt collectors will only want to communicate with consumers who are misinformed and don't know what their rights are, rather than communicate with a consumer who knows the laws and the appropriate ways to address a letter of dispute.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[6, 5]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>A collector contacting a consumer via email, voice mail, or text message should identify themselves and say what they are calling about (e.g. overdue ABC account) without details of amount, account #, etc.</AC1><AC2> So what if a third party might possibly conclude this person has debt?</AC2><AC3> Without details they still don't know anything.</AC3><AC4> I personally never return any calls about \"an important business matter\":</AC4><AC5> if you don't tell me who you are or what you are calling about, I consider it spam.</AC5><AC6> If you call in good faith to clear up an outstanding balance for ABC company, then you should say so.</AC6><AC7> It's the ones that are trying to scam consumers that give as little detail as possible in hope that someone panics and fills in the blanks for them.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>it should be a fdcpa violation to spoof a debt collector's phone number on the caller ID.</AC1><AC2> Either no number on the caller ID or a number linked back to the collection agency.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>paythefiddler, It's not just innocent family members that debt collectors go after, it's also perfect strangers.</AC1><AC2> I have a common last name, no debts, and have been the target of many debt collectors.</AC2><AC3> All of the deadbeats have had my common last name and first initial.</AC3><AC4> Once a debt collector has me on their hit list, they don't stop calling until I sent them a cease-communication letter.</AC4><AC5> They want me to pay the debt to get them to stop.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [0, 2], [0, 3], [0, 4], [3, 4]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"evidence\", \"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is not an appropriate requirement</AC1><AC2> because not all states have licensing or registration for debt collectors.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>But they also can't send you a signed paper for something you agreed to online, or over the phone.</AC1><AC2> So few people actually put a pen to paper these days to sign a formal written agreement.</AC2><AC3> So that's an unfair requirement when it doesn't always exist.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [2, 1]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>New rules should allow consumers to resolve, discuss, or negotiate the matter strictly with the creditor.</AC1><AC2> In other words, consumers should be told that they can refuse to speak to debt collectors about their account(s).</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 4, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When creditor or servicing company doesn't \"credit\" a payment after receiving it and then getter further proof but still puts the victim in arrears or foreclosure, there should be fines regardless of whether it is a \"mistake\" or \"criminal act.\"</AC1><AC2> A grace period can be allowed</AC2><AC3> but after that slap on the fines. and keep them coming every week they don't correct their problem.</AC3><AC4> Basically by not crediting payment they are stealing that payment.</AC4><AC5> This should apply to any \"mistakes\" or unethical practices such as deliberately or \"mistakenly\" changing around escrow, interest, principal, late fees, insurance and so forth to the profit of the collector.</AC5><AC6> Heavy fines will take away the profit motive and such \"mistakes\" and unethical practices will greatly decrease.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 3], [0, 5], [2, 3], [4, 5]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I also wanted to add that because debt collectors know they can hire robo service companies to false service,</AC1><AC2> they aren't going to negotiate in good faith.</AC2><AC3> Just as appalling for me was the judge agreeing that the one service I challenged was a false service, but allowing the case to go forward anyways.</AC3><AC4> Sure, people can lie and say they were not served when they were served,</AC4><AC5> but the very day I was in court contesting the service, a person who spoke before me made the comment that they found their service document on their door step when they got home.</AC5><AC6> This means the servicers are lying in court documents,</AC6><AC7> and nobody seems to care.</AC7><AC8> I still want redress on these two cases,</AC8><AC9> and I want to be able to file an errors and omissions claim with both debt collectors insurance company for lying on court documents.</AC9><AC10> And if it is not a law, then isn't it time that debt collection companies carry errors and omissions insurance?</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 4], [1, 0]]", "output": "{\"relation_types\": [\"evidence\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is an awesome suggestion!</AC1><AC2> Your suggestion \"I don't think they should be allowed to call ANY number for more than 3 months without successful contact with the debtor\" is spot on!</AC2><AC3> And I can't believe that no one else has ever suggested this before.</AC3><AC4> 3 months (or whatever an appropriate time limit is) would reduce the constant harassment that I and many other innocent parties receive.</AC4><AC5> This morning I received an illegal phone call from a collector at 6:17 AM with a spoofed phone number for a person that I have never known</AC5><AC6> and I have told these collectors this several times already.</AC6><AC7> They have the wrong number.</AC7><AC8> And I am tired of this.</AC8><AC9> The CFPB should absolutely implement a rule that forces unsuccessful contact to 3 months.</AC9>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 3], [2, 1], [3, 4], [3, 5], [3, 6], [3, 7], [8, 3]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There's nothing in place for any of them, unless (often several years down the road) a judge decides to throw them out.</AC1><AC2> This is yet another consequence of the litigious society in which we currently live.</AC2><AC3> I don't have the answers,</AC3><AC4> but it seems that someone in government or law should be able to do something about unscrupulous attorneys who create a claim out of thin air just to make a buck.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Not every debt collection agency is like that.</AC1><AC2> The one I work for certainly isn't.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>When anyone makes a demand for payment from another party, it is incumbent on that person to produce the evidence to support such demand and not up to the second party to produce evidence that he is not liable for such alleged debt.</AC1><AC2> Otherwise, anyone can create trouble and misery for any person out of mischief, ill-intent or out to make some fast money for himself or even to defame the second party,</AC2><AC3> as proper businesses are adverse to bad publicity.</AC3><AC4> If the first party claims to represent a third party to collect debt for that third party, then the first party (collector) must produce evidence that he is authorized by the third party to collect a debt for the third party alone</AC4><AC5> because anyone can claim to represent any party in an attempt to defraud the innocent second party.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [3, 4]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>It is the responsibility of the creditor and debt collectors to report accurate information.</AC1><AC2> Reporting accurate information has nothing to do with \"debt collectors who don't report to credit reporting agencies at all.\"</AC2><AC3> If a debt collector reported accurately that the debt in question has not been paid, but now is, it is the responsibility of that debt collector to report the newly accurate information.</AC3><AC4> As I too have noticed, some debt collectors will not accurately report updated information to the credit bureaus once they are paid.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 7, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>As medical records become more digitized, </AC1><AC2>I see no significant cost increase to debt collectors in passing on substantive info to debtors,</AC2><AC3>although debt collectors are bound to say otherwise.</AC3><AC4>My concern is that the cost to consumers of inadequate information is routinely underestimated or dismissed as trivial.</AC4><AC5>When I worked with a non-profit in Alabama, I took part in an informational meeting on a program of federal assistance (Farmers Home Admin, IIRC) in securing access to home loans on affordable terms for low-income workers.</AC5><AC6>One woman who was at the meeting spoke of having been denied access to the program because of a single blot on her credit record, namely an unpaid medical bill.</AC6><AC7>She said she had not paid it because she could not determine what the charges were for, was unaware of any medical treatment she had not paid for, and could not get a straight answer from the debt collector.</AC7><AC8>She decided the debt might be illegitimate and refused to pay.</AC8><AC9>As a result she was excluded from access to a home loan.</AC9><AC10>This is an example of a consumer on a limited income who was consistently disciplined about her finances and who should have had access to credit.</AC10><AC11>I find it significant that it was a medical bill that tripped her up, placing her in a category in which even the FHA would not work with her.</AC11><AC12>From this point, credit was only available to her at high cost if at all.</AC12><AC13>I am confident that the rule I am suggesting would have led her to either pay the debt or dispute it formally on the basis of valid information.</AC13><AC14>What it would not have done is to leave her to conclude that she was being scammed and refuse to pay at all.</AC14><AC15>This anecdote (and I admit I only have anecdotal evidence) does suggest that legitimate credit agencies also stand to benefit by disclosing information that will persuade skeptical consumers that they do actually owe the debt.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [1, 0], [8, 7]]", "output": "{\"relation_types\": [\"evidence\", \"evidence\", \"evidence\", \"evidence\", \"evidence\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>My only concern about this excellent comment is that consumers not be subjected to a flood of confusing or potentially intimidating information.</AC1><AC2> The most useful information is the what, when, who, and why of the original transaction that incurred the unpaid debt.</AC2><AC3> The original creditor should be identified by a name known to the consumer, e.g. DR. JOHN SMITH, RHEUMATOLOGIST not DYNAMIC HEALTHCARE OF GREATER ANYTOWN d/b/a ASSOCIATED SPECIALISTS P.C.</AC3><AC4> You get the idea.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have not encountered a situation in which the bill collector is hired by a business for many decades now.</AC1><AC2> Usually the debt collector has bought the debt, usually for pennies on the dollar, from the original creditor.</AC2><AC3> I also disagree that the law provides a way for consumers to steal from businesses.</AC3><AC4> If anything, I would say we have become in danger of reverting to the tyranny of Dickens' time, where a person and that person's family, including children, would be imprisoned for debt.</AC4><AC5> Surely we can agree on reasonableness when it comes to how we treat each other, whether debtor or creditor?</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>You are absolutely right.</AC1><AC2> But, you'd be surprised at how many times this does happen and how many times the Credit Bureaus Do change correct information to false information supplied by the 'furnisher/debt collector'.</AC2><AC3> Because I had to send in numerous Certified Letter to the Credit Bureaus, (all of them), in order to stay on top of all the false information and tricks that they did supply.</AC3><AC4> And I have written proof, that this does and is still happening to other consumers, right now.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 2]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>From 1999 - 2004 I worked on a number of online identity authentication initiatives.</AC1><AC2> At that time the only available solution was to ask \"out of wallet\" questions based on the consumer's credit file.</AC2><AC3> For example, the credit report might show that the consumer lived on Elm Street 20 years ago.</AC3><AC4> Since an old address would not be easy to find (e.g. in a lost wallet) </AC4><AC5> the idea is that if the consumer knows that they lived on Elm Street 20 years ago, there is greater confidence that this is indeed the person that they claim to be.</AC5><AC6> The problem with this approach is that the information in credit reports has a reliability problem.</AC6><AC7> Reports indicating low error rates are misleading:</AC7><AC8> they only look to \"material errors\" </AC8><AC9> and they are often funded by credit industry groups.</AC9><AC10> If it is commonly accepted that credit reports are filled with errors - then it is incumbent upon collectors to validate and verify the debt prior to pulling a credit report or contacting the consumer.</AC10>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have not heard of anyone in the US being imprisoned for their debt.</AC1><AC2> I have been in the business for 20 years </AC2><AC3> and rest assured, while there are 'debt buyers', the majority of agencies are contingency based collections.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>In NYC courts, a lawyer representing a particular party (doesn't have to be collection related) will have a full day of cases lined up</AC1><AC2> which leads me to believe at least some scheduling preference is given.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am in the same situation as From_ill_annoy.</AC1><AC2> I have been denied credit and loans as a result of these adverse actions which have impacted both my personal and professional life.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Texting should follow all rules regarding phone calls.</AC1><AC2> Email should follow rules set in place regarding written, mailed, letters.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 6, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There are currently no \"teeth\" in the enforcement mechanism as well.</AC1><AC2> Right now filing complaints with the regulators does absolutely nothing except get you into some database </AC2><AC3> but nothing is every done about violations.</AC3><AC4> Requiring accurate identification of the collector with a working call-back number should be the bare minimum.</AC4><AC5> At least that way the consumer has a fighting chance of at least talking to them and trying to get erroneous calls stopped.</AC5><AC6> Right now government enforcement is non-existent and completely worthless.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1], [3, 1], [3, 2], [3, 4], [5, 1], [5, 2]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There are laws on the books.</AC1><AC2> There is no enforcement by the regulators.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>After a court verdict in favor of a debt collector, Banks assess a significant fee against a customer when a customer's account is levied by the debt collector , even if there are scant funds in the account on the day the levy is imposed.</AC1><AC2> Explain how assessing a 125 dollar bank levy fee when an account has 50 dollars in it helps resolve the ongoing debt resolution.</AC2><AC3> The Debt collector gets nothing and the customer is hit with a 125 dollar bank levy fee.</AC3><AC4> Why isn't there a 100 dollar float that is impervious to a bank levy fee and protected from the debt collector's clutches as well?</AC4><AC5> Once again, we get back to the same underpinning, Judges who simply decide on whether a default has occurred without caring why the default occurred are basically rubber stamping minions of a system corrupted by a lack of fairness.</AC5><AC6> People can lose income based on circumstances beyond their control, yet the system doesn't even blanche an eye.</AC6><AC7> A debtor who purposely runs up debt quickly and defaults is treated identically to someone who had a perfect payment history but had to stop working to become a CareGiver for a family member.</AC7><AC8> A debtor who purposely runs up debt quickly and hires a lawyer can strategically default and possibly get a better resolution than an honest person with an impeccable payment history who has lost income because of an event beyond their control.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There should be clear guidelines on what constitutes \"irrelevant and frivolous\".</AC1><AC2> In my own experience, the CRA's consistently refused to delete trade lines not belonging to me even when I had provided documentation from the original creditor validating the debt was not mine.</AC2><AC3> They falsely claimed they received additional information from the original creditor that superseded the documentation I had.</AC3><AC4> When I circled back to the original creditor, I had learned the debt was sold to a junk debt buyer which leads to a separate issue.</AC4><AC5> If the junk debt buyer is reporting to a credit reporting agency, why are they misrepresenting themselves as the original creditor.</AC5><AC6> Junk Debt buying should be prohibited all together.</AC6><AC7> The original creditors should know their vendors just as the law mandates they know their customers.</AC7><AC8> If the vendor is violating the law on the original creditor's behalf the original creditor should hold responsibility to some extent.</AC8>\n### Here is the list of pairs of related argument components in this paragraph: [[5, 4]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I am all for consumers right protection</AC1><AC2> but when you see CFPB, FDCPA and other law they are all to make it difficult for collection agencies to do their honest job.</AC2><AC3> But there is never a talk about consumers responsibilities.</AC3><AC4> I agree that some collection agencies are aggressive.</AC4><AC5> but I think a good honest collection agencies also need their rights to do honest work.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I received several Robo calls leaving messages to have me served at my job on a debt I do not owe.</AC1><AC2> They have Threatened me via voice mail.</AC2><AC3> They also use Voip numbers we have reversed them different each time.</AC3><AC4> I have reported them several times </AC4><AC5> but they continue to call.</AC5>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Explaining why the repeat phone call abuse happens does not justify it.</AC1><AC2> Apparently there are autodialers that call several consumers at the same time, than hang up on all but the first consumer that answers the phone.</AC2><AC3> The result is a person can get several collection calls and hang ups through out the day, </AC3><AC4> that is just not right.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>One communication from the debt collector per week is plenty.</AC1><AC2> On top of that, The debt collector's phone rep should have power over the autodialer in the following way.</AC2><AC3> A consumer's number is on the screen, the report log on that number is on the screen, the most current info at the top of the screen.</AC3><AC4> If the debt collector phone rep sees that the very last communication does is already updated (such as waiting on a job interview with a date that is still in the future), then the debt collector phone rep should have the power to prevent the auto dialer from making the call.</AC4><AC5> Not only does this prevent unnecessary hounding of the customer, it also helps prevent abusive reactions from consumers towards the debt collector phone rep</AC5><AC6> because the consumer recalls their last communication and that what was discussed could not have reasonably happened yet.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Collection agencies are not an all loose for the consumer nor they should be.</AC1><AC2> Some collections agencies have gone beyond their job scope and their role in the process of repayment.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 3, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I have dealt with the issue of disputes </AC1><AC2>and when you file a dispute and it as been closed it is placed in the comment section that you have filed a dispute.</AC2><AC3>By doing this, this has kept me from refinancing my home </AC3><AC4>just because the word dispute was there.</AC4><AC5>The mortgage company said I had to have this removed,</AC5><AC6>so I filed another form to ask for this to be removed it never was.</AC6><AC7>I believe that once the dispute has been closed there should be no indication that there was a dispute filed.</AC7><AC8>You again get penalized for trying to correct mistakes on your report.</AC8><AC9>Another issue that has come up regarding when an account has been charged off or in my case a repossession of a vehicle I had turn over due to not being released by my doctor to go back to work and my disability ran out , I had no other choice but to hand the vehicle over.</AC9><AC10>then 6 years later I received a 1099 for over $6000.00.</AC10><AC11>Plus the 16% interest they charged me for 4 years.</AC11><AC12>We keep paying these high interest rates </AC12><AC13>but yet we still have to pay for our credit scores and only receive one free report a year,</AC13><AC14>If we are trying to stay on top of credit fraud and inaccurate information that is not of our doing but from reporting agencies , these agencies should be putting more funds in for these things.</AC14>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3], [5, 4], [6, 7]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I think the cost of education needs to be reduced to a more reasonable amount or repayment plans need to be income based.</AC1><AC2> As far as consumer protection, legal aid needs to be made available, affordable and effective,</AC2><AC3> and consumers need to take time to really know their rights and stop complaining about harassment</AC3><AC4> because that's a completely different cause of action than restitution.</AC4>\n### Here is the list of pairs of related argument components in this paragraph: [[2, 3]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I would like to see some strict regulation on the number of times a creditor can call in a given period of time.</AC1><AC2> Capital One Bank's dialers will call every single hour if a payment is overdue...</AC2><AC3> sometimes these things are simply overlooked.</AC3><AC4> If I know I am paying bills on a given day, I just use my caller ID and ignore them.</AC4><AC5> I do think that these calls need to be at least limited.</AC5><AC6> It comes down to simple harrasment.</AC6>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 5]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 5, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>Yes, the Massachusetts model sounds very sensible</AC1><AC2> and the Feds should consider adopting it or something similar.</AC2><AC3> Two contacts in a 7-day period is plenty,</AC3><AC4> but I think wherever the limits are set they will have to be very strictly enforced.</AC4><AC5> These collectors will find any loopholes, excuses or reasons to get around a regulation like this.</AC5><AC6> There has to be zero tolerance, every time, no exceptions.</AC6><AC7> They have violated our privacy and the right to peaceful enjoyment of our home one too many times.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: [[1, 0], [3, 4], [3, 6], [5, 4], [5, 6]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>They should not have free-to-end-user </AC1><AC2>it will just making worse for consumer.</AC2><AC3>This does not make sense.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>There are a few states that have the barbaric practice of actually arresting people for their debts by using a legal loophole.</AC1><AC2> Some of the most egregious examples are in Minnesota, Illinois, and Missouri.</AC2><AC3> The creditor sues the debtor in court.</AC3><AC4> If the person fails to show, a warrant can be issued for their arrest.</AC4><AC5> The police can actually arrest and jail the debtor until a court hearing, or until they pay the bond (which is usually the amount of the debt).</AC5><AC6> This is a downright abuse of the legal system.</AC6><AC7> These loopholes need to be closed in all states.</AC7>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I appreciate Mr. Bartmann's comments</AC1><AC2> but they appear to be grounded in a collection agency perspective </AC2><AC3> (there is always business and market share tension between collection agencies and law firms).</AC3><AC4> The reality is that (and this was voiced by other participants) many (not all but many) debtors simply won't/can't pay until they have to.</AC4><AC5> The FDCPA and TCPA have truly made communications with debtor both difficult and hazardous for the collector.</AC5><AC6> For instance, the fact that you can't safely leave a voice message for a debtor should be very troubling.</AC6><AC7> Over the years, our firm has stopped initial outbound calling (responding only to inbound calls) and also limited our pre-suit letters to just two.</AC7><AC8> We send the required disclosure letter and (there being no response and the account reviewed for suit) then send a discounted payment offer that says we are going to file suit but would rather settle.</AC8><AC9> We offer reasonable terms to the debtors to avoid a costly suit but </AC9><AC10> the response rate is absolutely miserable, probably in the single digits percentage wise.</AC10><AC11> Believe me, suits are time consuming and expensive, </AC11><AC12> but they are often simply the only option.</AC12><AC13> Even when the debtors are served, few contact us, and even fewer when the court sends them the judgment.</AC13><AC14> Worse, a judgment doesn't guarantee payment on the account.</AC14><AC15> Clarification via Regulations as to what we can say and do in communications would at least promote more communication between the parties.</AC15><AC16> With that, perhaps more points of contact could resolve debts before suit.</AC16><AC17> I strongly disagree that litigation should be \"discouraged\"</AC17><AC18> as it is not only a simple reality in much of debt collection but a fundamental right of a creditor.</AC18><AC19> However, I think Regulations making it clear what can and cannot be done in communications that can shield the industry from the wild west of FDCPA and TCPA lawsuits would greatly encourage more communication.</AC19><AC20> I also think a reasonable, good faith attempt to resolve the case (offering a payment plan and/or lump sum) before suit is filed is still a good idea as well </AC20><AC21> even though our own response rate has not been great.</AC21><AC22> Anything more will infringe on a creditor's rights and interfere with state law.</AC22><AC23> Perhaps the CFPB Portal could have a debt resolution aspect to it where a debtor could try to resolve an account in a \"safer\" more disarming manner.</AC23>\n### Here is the list of pairs of related argument components in this paragraph: [[16, 17], [19, 21]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 2, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>This is the PROBLEM over and over</AC1><AC2> Why should lawyers get a pass from rules of the Bar Associations or rules of the court because they are now considered \"debt collectors\"</AC2><AC3> even I did not know this, though I have seen advertised quite a bit lawyers in the \"collection\" business.</AC3><AC4> This is wrong.</AC4><AC5> I hope if anything, this very thing is addressed.</AC5><AC6> Using a lawyer to send a letter is often a way to intimidate.</AC6><AC7> People become too frightened to even respond.</AC7><AC8> The rules are blown off by lawyers who go into this debt collection business </AC8><AC9> because they make a fast easy buck, and they know the debtor has very little recourse, and there is so few rules that protect the consumer/debtor.</AC9><AC10> Being in debt stopped being a crime decades ago,</AC10><AC11> but the lack of rules that protect the debtor are bringing back these draconian practices.</AC11><AC12> Uniformity, is needed, and making lawyers abide by the rules of the Bar.</AC12> Just two right off.<AC13> It is bringing to light why this system has become so fraught with abuse.</AC13>\n### Here is the list of pairs of related argument components in this paragraph: [[4, 3], [7, 8]]", "output": "{\"relation_types\": [\"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 1, in following JSON format: {\"relation_types\": [\"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>I disagree.</AC1><AC2> Keeping a paper trail protects everyone, especially the most vulnerable and least able to protect oneself.</AC2>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 1]]", "output": "{\"relation_types\": [\"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 8, in following JSON format: {\"relation_types\": [\"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\", \"component_type (str)\"]} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>The Permissible hours of 9am - 8 pm is good.</AC1><AC2> I actually would like to see it moved to the other proposed time of 9am - 7pm,</AC2><AC3> but i think 8pm is a fair compromise.</AC3><AC4> Because the current 8am - 9pm really is just way to early/late.</AC4><AC5> I (and many families) are in bed after 8pm </AC5><AC6> and phone afer 8pm really is way too late.</AC6><AC7> I support the 9am - 8pm hours.</AC7><AC8> I further support weekend calling lessened to noon-5pm </AC8><AC9> because people like to sleep in on the weekends and spend time with family.</AC9><AC10> Having a phone call after 5pm really is not necessary </AC10><AC11> as most people will be out and/or entertaining guests at their homes and will not take calls in the afternoon.</AC11><AC12> I further support adherence to blue laws that prohibit consumer contact on Sundays.</AC12><AC13> Sundays really are when most people are spending whatever little time they have left before the workweek with friends and family.</AC13><AC14> I do not conduct business on Sundays.</AC14><AC15> The work week really should be when debt collectors are working on trying to contact consumers.</AC15>\n### Here is the list of pairs of related argument components in this paragraph: [[0, 3], [3, 4], [5, 4], [6, 3], [7, 8], [9, 10], [11, 12], [13, 12]]", "output": "{\"relation_types\": [\"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\", \"reason\"]}"}, {"instruction": "### You are an expert in Argument Mining. You are given a text which contains numbered argument components enclosed by <AC></AC> tags. You are also given a list of pairs of related argument components in the form: [(target AC (int), source AC (int)), (target AC (int), source AC (int)), ..., (target AC (int), source AC (int))]. Your task is to classify each pair of related argument components in the list as either \"reason\" or \"evidence\". You must return a list of argument relation types, strictly of length 0, in following JSON format: {\"relation_types\": []} where each element \"relation_type (str)\" is replaced by either \"reason\" or \"evidence\". \n", "input": "### Here is the text: <AC1>For further reference on debt tolling: __URL__</AC1><AC2> So, again, it seems as though the SOL matters very little in these cases.</AC2><AC3> Perhaps the bigger question is whether or not eliminating debt tolling should be considered as a new rule.</AC3>\n### Here is the list of pairs of related argument components in this paragraph: []", "output": "{\"relation_types\": []}"}]